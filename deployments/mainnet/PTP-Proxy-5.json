{
  "address": "0xE7ff20a6704bDab44B34cE6e6ef4776898Cc66bf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platypusVoter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeVoter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_votingGauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupportedMasterPlatypusVersion",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakerFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boosterFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stakerFeeReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "boosterFeeReceiver",
              "type": "address"
            }
          ],
          "internalType": "struct PlatypusVoterProxy.FeeSettings",
          "name": "_feeSettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PLATYPUS_NFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PTP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeVoter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupportedMasterPlatypusVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "migrateStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonusTokens",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bonusTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PlatypusVoterProxy.Reward[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platypusVoter",
      "outputs": [
        {
          "internalType": "contract IPlatypusVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvestFeeBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_boosterFeeBips",
          "type": "uint256"
        }
      ],
      "name": "setBoosterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_boosterFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setBoosterFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakerFeeBips",
          "type": "uint256"
        }
      ],
      "name": "setStakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakerFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setStakerFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "stakeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "sweepNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateGaugeVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxSupportedMasterPlatypusVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateVotingGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vePTP",
      "outputs": [
        {
          "internalType": "contract IVePTP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_lpVote",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        },
        {
          "internalType": "address",
          "name": "_bribeReceiver",
          "type": "address"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PlatypusVoterProxy.Reward[]",
          "name": "claimedBribes",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingGauge",
      "outputs": [
        {
          "internalType": "contract IVotingGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x248d242c50254da610a255913f65cf817180d50678f6c563f640a34e0733eb80",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xE7ff20a6704bDab44B34cE6e6ef4776898Cc66bf",
    "transactionIndex": 6,
    "gasUsed": "3816804",
    "logsBloom": "0x
    "blockHash": "0x97c9cd3fab013cb7a1b3824871396197d7bb0f34adead39f84df33cef49b2f40",
    "transactionHash": "0x248d242c50254da610a255913f65cf817180d50678f6c563f640a34e0733eb80",
    "logs": [],
    "blockNumber": 20342978,
    "cumulativeGasUsed": "4635367",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x40089e90156Fc6F994cc0eC86dbe84634A1C156F",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "0x1f6B6b505D199B9bd0a6642B8d44533a811598da",
    "4",
    {
      "stakerFeeBips": 1500,
      "boosterFeeBips": 0,
      "stakerFeeReceiver": "0x9bc36cc686800be1905bf7e10578ee6fbdd6f27a",
      "boosterFeeReceiver": "0x0000000000000000000000000000000000000000"
    }
  ],
  "solcInputHash": "32afb2637b6d77cf33631af711fde900",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platypusVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_votingGauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupportedMasterPlatypusVersion\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakerFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosterFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakerFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boosterFeeReceiver\",\"type\":\"address\"}],\"internalType\":\"struct PlatypusVoterProxy.FeeSettings\",\"name\":\"_feeSettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PLATYPUS_NFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PTP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeVoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupportedMasterPlatypusVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"migrateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bonusTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PlatypusVoterProxy.Reward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platypusVoter\",\"outputs\":[{\"internalType\":\"contract IPlatypusVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestFeeBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boosterFeeBips\",\"type\":\"uint256\"}],\"name\":\"setBoosterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boosterFeeReceiver\",\"type\":\"address\"}],\"name\":\"setBoosterFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakerFeeBips\",\"type\":\"uint256\"}],\"name\":\"setStakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerFeeReceiver\",\"type\":\"address\"}],\"name\":\"setStakerFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"sweepNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateGaugeVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxSupportedMasterPlatypusVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateVotingGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vePTP\",\"outputs\":[{\"internalType\":\"contract IVePTP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lpVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"},{\"internalType\":\"address\",\"name\":\"_bribeReceiver\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PlatypusVoterProxy.Reward[]\",\"name\":\"claimedBribes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingGauge\",\"outputs\":[{\"internalType\":\"contract IVotingGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"For accounting reasons, there is one approved strategy per Masterchef PID. In case of upgrade, use a new proxy.\",\"kind\":\"dev\",\"methods\":{\"approveStrategy(address,address)\":{\"details\":\"Very sensitive, restricted to devAddrCan only be set once per PID and staking contract (reported by the strategy)\",\"params\":{\"_stakingContract\":\"address\",\"_strategy\":\"address\"}},\"claimReward(address,uint256)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"\":\"@param _pid PID\"}},\"deposit(uint256,address,address,address,address,uint256,uint256)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"\":\"@param _pool Platypus pool\",\"_amount\":\"deposit amount\",\"_asset\":\"Platypus asset\",\"_depositFee\":\"deposit fee\",\"_pid\":\"PID\",\"_token\":\"Deposit asset\"}},\"emergencyWithdraw(uint256,address,address,address,address)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"\":\"@param _pool Platypus pool\",\"_asset\":\"Platypus asset\",\"_pid\":\"PID\",\"_token\":\"Deposit asset\"}},\"pendingRewards(address,uint256)\":{\"params\":{\"\":\"@param _pid PID\"},\"returns\":{\"_0\":\"pendingPtp\",\"bonusTokenAddress\":\"bonus token address\",\"bonusTokens\":\"pending bonus token\"}},\"poolBalance(address,uint256)\":{\"params\":{\"\":\"@param _pid PID\"},\"returns\":{\"balance\":\"in depositToken\"}},\"reinvestFeeBips()\":{\"returns\":{\"_0\":\"reinvest fee\"}},\"setBoosterFee(uint256)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_boosterFeeBips\":\"new fee in bips (1% = 100 bips)\"}},\"setBoosterFeeReceiver(address)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_boosterFeeReceiver\":\"address\"}},\"setStakerFee(uint256)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_stakerFeeBips\":\"new fee in bips (1% = 100 bips)\"}},\"setStakerFeeReceiver(address)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_stakerFeeReceiver\":\"address\"}},\"stakeNFT(uint256)\":{\"details\":\"Restricted to devAddr.The currently staked NFT will be automatically unstaked and remain on voter. Use \\\"sweepNFT\\\" to get it back.\",\"params\":{\"id\":\"id of the NFT to be staked\"}},\"sweepNFT(uint256)\":{\"details\":\"Restricted to devAddr.\",\"params\":{\"id\":\"id of the NFT to be swept\"}},\"unstakeNFT()\":{\"details\":\"Restricted to devAddr.The unstaked NFT will remain on voter. Use \\\"sweepNFT\\\" to get it back.\"},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateGaugeVoter(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateMaxSupportedMasterPlatypusVersion(uint256)\":{\"params\":{\"newValue\":\"uint\"}},\"updateVotingGauge(address)\":{\"params\":{\"newValue\":\"address\"}},\"withdraw(uint256,address,address,address,address,uint256,uint256)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"\":\"@param _pool Platypus pool\",\"_amount\":\"withdraw amount\",\"_asset\":\"Platypus asset\",\"_maxSlippage\":\"max slippage in bips\",\"_pid\":\"PID\",\"_token\":\"Deposit asset\"},\"returns\":{\"_0\":\"amount withdrawn, in _token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveStrategy(address,address)\":{\"notice\":\"Add an approved strategy\"},\"claimReward(address,uint256)\":{\"notice\":\"Claim and distribute PTP rewards\"},\"deposit(uint256,address,address,address,address,uint256,uint256)\":{\"notice\":\"Deposit function\"},\"emergencyWithdraw(uint256,address,address,address,address)\":{\"notice\":\"Emergency withdraw function\"},\"pendingRewards(address,uint256)\":{\"notice\":\"Pending rewards matching interface for PlatypusStrategy\"},\"poolBalance(address,uint256)\":{\"notice\":\"Pool balance\"},\"reinvestFeeBips()\":{\"notice\":\"Calculation of reinvest fee (boost + staking)\"},\"setBoosterFee(uint256)\":{\"notice\":\"Update booster fee\"},\"setBoosterFeeReceiver(address)\":{\"notice\":\"Update booster fee receiver\"},\"setStakerFee(uint256)\":{\"notice\":\"Update staker fee\"},\"setStakerFeeReceiver(address)\":{\"notice\":\"Update staker fee receiver\"},\"stakeNFT(uint256)\":{\"notice\":\"Stake NFT\"},\"sweepNFT(uint256)\":{\"notice\":\"Sweep NFT\"},\"unstakeNFT()\":{\"notice\":\"Unstake the currently staked NFT\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateGaugeVoter(address)\":{\"notice\":\"Update gaugeVoter\"},\"updateMaxSupportedMasterPlatypusVersion(uint256)\":{\"notice\":\"Update maxSupportedMasterPlatypusVersion\"},\"updateVotingGauge(address)\":{\"notice\":\"Update votingGauge\"},\"withdraw(uint256,address,address,address,address,uint256,uint256)\":{\"notice\":\"Withdraw function\"}},\"notice\":\"PlatypusVoterProxy is an upgradable contract. Strategies interact with PlatypusVoterProxy and PlatypusVoterProxy interacts with PlatypusVoter.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol\":\"PlatypusVoterProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9308fda9e9c7221936f36c2656f45522eda68c8474d21db131dbf1ea5a2dc83d\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../lib/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IPlatypusVoter.sol\\\";\\nimport \\\"./interfaces/IMasterPlatypus.sol\\\";\\nimport \\\"./interfaces/IBaseMasterPlatypus.sol\\\";\\nimport \\\"./interfaces/IPlatypusPool.sol\\\";\\nimport \\\"./interfaces/IPlatypusAsset.sol\\\";\\nimport \\\"./interfaces/IPlatypusNFT.sol\\\";\\nimport \\\"./interfaces/IVePTP.sol\\\";\\nimport \\\"./interfaces/IPlatypusStrategy.sol\\\";\\nimport \\\"./interfaces/IVotingGauge.sol\\\";\\nimport \\\"./interfaces/IBribe.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(\\n        IPlatypusVoter platypusVoter,\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returnValue) = platypusVoter.execute(target, value, data);\\n        if (!success) revert(\\\"PlatypusVoterProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\n/**\\n * @notice PlatypusVoterProxy is an upgradable contract.\\n * Strategies interact with PlatypusVoterProxy and\\n * PlatypusVoterProxy interacts with PlatypusVoter.\\n * @dev For accounting reasons, there is one approved\\n * strategy per Masterchef PID. In case of upgrade,\\n * use a new proxy.\\n */\\ncontract PlatypusVoterProxy {\\n    using SafeProxy for IPlatypusVoter;\\n    using SafeERC20 for IERC20;\\n\\n    struct FeeSettings {\\n        uint256 stakerFeeBips;\\n        uint256 boosterFeeBips;\\n        address stakerFeeReceiver;\\n        address boosterFeeReceiver;\\n    }\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    uint256 public boosterFee;\\n    uint256 public stakerFee;\\n    address public stakerFeeReceiver;\\n    address public boosterFeeReceiver;\\n    address public constant PTP = 0x22d4002028f537599bE9f666d1c4Fa138522f9c8;\\n    address public constant PLATYPUS_NFT = 0x6A04a578247e15e3c038AcF2686CA00A624a5aa0;\\n    IVePTP public constant vePTP = IVePTP(0x5857019c749147EEE22b1Fe63500F237F3c1B692);\\n\\n    IPlatypusVoter public immutable platypusVoter;\\n    address public devAddr;\\n    address public gaugeVoter;\\n    IVotingGauge public votingGauge;\\n    uint256 public maxSupportedMasterPlatypusVersion;\\n\\n    // strategy => masterchef\\n    mapping(address => address) public stakingContract;\\n    // staking contract => pid => strategy\\n    mapping(address => mapping(uint256 => address)) public approvedStrategies;\\n\\n    // factory pools masterchef\\n    address private constant BASE_MASTER_PLATYPUS = 0x2Cd5012b5f7cc09bfE0De6C44df32a92D2431232;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"PlatypusVoterProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _platypusVoter,\\n        address _devAddr,\\n        address _gaugeVoter,\\n        address _votingGauge,\\n        uint256 _maxSupportedMasterPlatypusVersion,\\n        FeeSettings memory _feeSettings\\n    ) {\\n        devAddr = _devAddr;\\n        gaugeVoter = _gaugeVoter;\\n        votingGauge = IVotingGauge(_votingGauge);\\n        boosterFee = _feeSettings.boosterFeeBips;\\n        stakerFee = _feeSettings.stakerFeeBips;\\n        stakerFeeReceiver = _feeSettings.stakerFeeReceiver;\\n        boosterFeeReceiver = _feeSettings.boosterFeeReceiver;\\n        maxSupportedMasterPlatypusVersion = _maxSupportedMasterPlatypusVersion;\\n        platypusVoter = IPlatypusVoter(_platypusVoter);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) external onlyDev {\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Update maxSupportedMasterPlatypusVersion\\n     * @param newValue uint\\n     */\\n    function updateMaxSupportedMasterPlatypusVersion(uint256 newValue) external onlyDev {\\n        maxSupportedMasterPlatypusVersion = newValue;\\n    }\\n\\n    /**\\n     * @notice Update gaugeVoter\\n     * @param newValue address\\n     */\\n    function updateGaugeVoter(address newValue) external onlyDev {\\n        gaugeVoter = newValue;\\n    }\\n\\n    /**\\n     * @notice Update votingGauge\\n     * @param newValue address\\n     */\\n    function updateVotingGauge(address newValue) external onlyDev {\\n        votingGauge = IVotingGauge(newValue);\\n    }\\n\\n    /**\\n     * @notice Add an approved strategy\\n     * @dev Very sensitive, restricted to devAddr\\n     * @dev Can only be set once per PID and staking contract (reported by the strategy)\\n     * @param _stakingContract address\\n     * @param _strategy address\\n     */\\n    function approveStrategy(address _stakingContract, address _strategy) public onlyDev {\\n        uint256 pid = IPlatypusStrategy(_strategy).PID();\\n        require(\\n            approvedStrategies[_stakingContract][pid] == address(0),\\n            \\\"PlatypusVoterProxy::Strategy for PID already added\\\"\\n        );\\n\\n        approvedStrategies[_stakingContract][pid] = _strategy;\\n        stakingContract[_strategy] = _stakingContract;\\n    }\\n\\n    function migrateStrategy(address _strategy, address _from) external onlyDev {\\n        uint256 pid = IPlatypusStrategy(_strategy).PID();\\n        require(approvedStrategies[_from][pid] == _strategy, \\\"PlatypusVoterProxy::Unknown strategy\\\");\\n\\n        address currentMasterPlatypus = stakingContract[_strategy];\\n        address newMasterPlatypus = IMasterPlatypus(currentMasterPlatypus).newMasterPlatypus();\\n        require(\\n            approvedStrategies[newMasterPlatypus][pid] == address(0),\\n            \\\"PlatypusVoterProxy::Strategy for PID already added\\\"\\n        );\\n        require(\\n            IMasterPlatypus(newMasterPlatypus).version() <= maxSupportedMasterPlatypusVersion,\\n            \\\"PlatypusVoterProxy::New Version not supported\\\"\\n        );\\n\\n        uint256[] memory pids = new uint256[](1);\\n        pids[0] = pid;\\n\\n        platypusVoter.safeExecute(currentMasterPlatypus, 0, abi.encodeWithSignature(\\\"migrate(uint256[])\\\", pids));\\n\\n        approvedStrategies[_from][pid] = address(0);\\n        approveStrategy(newMasterPlatypus, _strategy);\\n    }\\n\\n    /**\\n     * @notice Update booster fee\\n     * @dev Restricted to devAddr\\n     * @param _boosterFeeBips new fee in bips (1% = 100 bips)\\n     */\\n    function setBoosterFee(uint256 _boosterFeeBips) external onlyDev {\\n        boosterFee = _boosterFeeBips;\\n    }\\n\\n    /**\\n     * @notice Update staker fee\\n     * @dev Restricted to devAddr\\n     * @param _stakerFeeBips new fee in bips (1% = 100 bips)\\n     */\\n    function setStakerFee(uint256 _stakerFeeBips) external onlyDev {\\n        stakerFee = _stakerFeeBips;\\n    }\\n\\n    /**\\n     * @notice Update booster fee receiver\\n     * @dev Restricted to devAddr\\n     * @param _boosterFeeReceiver address\\n     */\\n    function setBoosterFeeReceiver(address _boosterFeeReceiver) external onlyDev {\\n        boosterFeeReceiver = _boosterFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice Update staker fee receiver\\n     * @dev Restricted to devAddr\\n     * @param _stakerFeeReceiver address\\n     */\\n    function setStakerFeeReceiver(address _stakerFeeReceiver) external onlyDev {\\n        stakerFeeReceiver = _stakerFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice Stake NFT\\n     * @dev Restricted to devAddr.\\n     * @dev The currently staked NFT will be automatically unstaked and remain on voter. Use \\\"sweepNFT\\\" to get it back.\\n     * @param id id of the NFT to be staked\\n     */\\n    function stakeNFT(uint256 id) external onlyDev {\\n        if (IERC721(PLATYPUS_NFT).ownerOf(id) != address(platypusVoter)) {\\n            IERC721(PLATYPUS_NFT).transferFrom(msg.sender, address(platypusVoter), id);\\n        }\\n\\n        platypusVoter.safeExecute(\\n            PLATYPUS_NFT,\\n            0,\\n            abi.encodeWithSignature(\\\"approve(address,uint256)\\\", address(vePTP), id)\\n        );\\n        platypusVoter.safeExecute(address(vePTP), 0, abi.encodeWithSignature(\\\"stakeNft(uint256)\\\", id));\\n    }\\n\\n    /**\\n     * @notice Unstake the currently staked NFT\\n     * @dev Restricted to devAddr.\\n     * @dev The unstaked NFT will remain on voter. Use \\\"sweepNFT\\\" to get it back.\\n     */\\n    function unstakeNFT() external onlyDev {\\n        platypusVoter.safeExecute(address(vePTP), 0, abi.encodeWithSignature(\\\"unstakeNft()\\\"));\\n    }\\n\\n    /**\\n     * @notice Sweep NFT\\n     * @dev Restricted to devAddr.\\n     * @param id id of the NFT to be swept\\n     */\\n    function sweepNFT(uint256 id) public onlyDev {\\n        platypusVoter.safeExecute(\\n            PLATYPUS_NFT,\\n            0,\\n            abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", address(platypusVoter), msg.sender, id)\\n        );\\n    }\\n\\n    /**\\n     * @notice Deposit function\\n     * @dev Restricted to strategy with _pid\\n     * @param _pid PID\\n     * @param\\n     * @param _pool Platypus pool\\n     * @param _token Deposit asset\\n     * @param _asset Platypus asset\\n     * @param _amount deposit amount\\n     * @param _depositFee deposit fee\\n     */\\n    function deposit(\\n        uint256 _pid,\\n        address, /*_stakingContract*/\\n        address _pool,\\n        address _token,\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _depositFee\\n    ) external {\\n        address masterchef = stakingContract[msg.sender];\\n        require(approvedStrategies[masterchef][_pid] == msg.sender, \\\"PlatypusVoterProxy::onlyStrategy\\\");\\n\\n        uint256 liquidity = _depositTokenToAsset(_asset, _amount, _depositFee);\\n        IERC20(_token).safeApprove(_pool, _amount);\\n        IPlatypusPool(_pool).deposit(address(_token), _amount, address(platypusVoter), type(uint256).max);\\n        platypusVoter.safeExecute(\\n            _asset,\\n            0,\\n            abi.encodeWithSignature(\\\"approve(address,uint256)\\\", masterchef, liquidity)\\n        );\\n        platypusVoter.safeExecute(masterchef, 0, abi.encodeWithSignature(\\\"deposit(uint256,uint256)\\\", _pid, liquidity));\\n        platypusVoter.safeExecute(_asset, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", masterchef, 0));\\n    }\\n\\n    /**\\n     * @notice Conversion for deposit token to Platypus asset\\n     * @return liquidity amount of LP tokens\\n     */\\n    function _depositTokenToAsset(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _depositFee\\n    ) private view returns (uint256 liquidity) {\\n        if (IPlatypusAsset(_asset).liability() == 0) {\\n            liquidity = _amount - _depositFee;\\n        } else {\\n            liquidity =\\n                ((_amount - _depositFee) * IPlatypusAsset(_asset).totalSupply()) /\\n                IPlatypusAsset(_asset).liability();\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculation of reinvest fee (boost + staking)\\n     * @return reinvest fee\\n     */\\n    function reinvestFeeBips() public view returns (uint256) {\\n        uint256 boostFee = 0;\\n        if (boosterFee > 0 && boosterFeeReceiver > address(0) && platypusVoter.depositsEnabled()) {\\n            boostFee = boosterFee;\\n        }\\n\\n        uint256 stakingFee = 0;\\n        if (stakerFee > 0 && stakerFeeReceiver > address(0)) {\\n            stakingFee = stakerFee;\\n        }\\n        return boostFee + stakingFee;\\n    }\\n\\n    /**\\n     * @notice Calculation of withdraw fee\\n     * @param _pool Platypus pool\\n     * @param _token Withdraw token\\n     * @param _amount Withdraw amount, in _token\\n     * @return fee Withdraw fee\\n     */\\n    function _calculateWithdrawFee(\\n        address _pool,\\n        address _token,\\n        uint256 _amount\\n    ) private view returns (uint256 fee) {\\n        (, fee, ) = IPlatypusPool(_pool).quotePotentialWithdraw(_token, _amount);\\n    }\\n\\n    /**\\n     * @notice Conversion for handling withdraw\\n     * @param _pid PID\\n     * @param _stakingContract Platypus Masterchef\\n     * @param _amount withdraw amount in deposit asset\\n     * @return liquidity LP tokens\\n     */\\n    function _depositTokenToAssetForWithdrawal(\\n        uint256 _pid,\\n        address _stakingContract,\\n        uint256 _amount\\n    ) private view returns (uint256) {\\n        uint256 totalDeposits = _poolBalance(_stakingContract, _pid);\\n        uint256 assetBalance = getAssetBalance(_stakingContract, _pid);\\n        return (_amount * assetBalance) / totalDeposits;\\n    }\\n\\n    /**\\n     * @notice Withdraw function\\n     * @dev Restricted to strategy with _pid\\n     * @param _pid PID\\n     * @param\\n     * @param _pool Platypus pool\\n     * @param _token Deposit asset\\n     * @param _asset Platypus asset\\n     * @param _maxSlippage max slippage in bips\\n     * @param _amount withdraw amount\\n     * @return amount withdrawn, in _token\\n     */\\n    function withdraw(\\n        uint256 _pid,\\n        address, /*_stakingContract*/\\n        address _pool,\\n        address _token,\\n        address _asset,\\n        uint256 _maxSlippage,\\n        uint256 _amount\\n    ) external returns (uint256) {\\n        address masterchef = stakingContract[msg.sender];\\n        require(approvedStrategies[masterchef][_pid] == msg.sender, \\\"PlatypusVoterProxy::onlyStrategy\\\");\\n\\n        uint256 liquidity = _depositTokenToAssetForWithdrawal(_pid, masterchef, _amount);\\n        platypusVoter.safeExecute(masterchef, 0, abi.encodeWithSignature(\\\"withdraw(uint256,uint256)\\\", _pid, liquidity));\\n        platypusVoter.safeExecute(_asset, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _pool, liquidity));\\n        uint256 minimumReceive = liquidity - _calculateWithdrawFee(_pool, _token, liquidity);\\n        uint256 slippage = (minimumReceive * _maxSlippage) / BIPS_DIVISOR;\\n        minimumReceive = minimumReceive - slippage;\\n        bytes memory result = platypusVoter.safeExecute(\\n            _pool,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"withdraw(address,uint256,uint256,address,uint256)\\\",\\n                _token,\\n                liquidity,\\n                minimumReceive,\\n                address(this),\\n                type(uint256).max\\n            )\\n        );\\n        platypusVoter.safeExecute(_asset, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _pool, 0));\\n        uint256 amount = toUint256(result, 0);\\n        IERC20(_token).safeTransfer(msg.sender, amount);\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw function\\n     * @dev Restricted to strategy with _pid\\n     * @param _pid PID\\n     * @param\\n     * @param _pool Platypus pool\\n     * @param _token Deposit asset\\n     * @param _asset Platypus asset\\n     */\\n    function emergencyWithdraw(\\n        uint256 _pid,\\n        address, /*_stakingContract*/\\n        address _pool,\\n        address _token,\\n        address _asset\\n    ) external {\\n        address masterchef = stakingContract[msg.sender];\\n        require(approvedStrategies[masterchef][_pid] == msg.sender, \\\"PlatypusVoterProxy::onlyStrategy\\\");\\n\\n        platypusVoter.safeExecute(masterchef, 0, abi.encodeWithSignature(\\\"emergencyWithdraw(uint256)\\\", _pid));\\n        uint256 balance = IERC20(_asset).balanceOf(address(platypusVoter));\\n        (uint256 expectedAmount, , ) = IPlatypusPool(_pool).quotePotentialWithdraw(_token, balance);\\n        platypusVoter.safeExecute(_asset, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _pool, balance));\\n        platypusVoter.safeExecute(\\n            _pool,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"withdraw(address,uint256,uint256,address,uint256)\\\",\\n                _token,\\n                balance,\\n                expectedAmount,\\n                msg.sender,\\n                type(uint256).max\\n            )\\n        );\\n        platypusVoter.safeExecute(_asset, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", masterchef, 0));\\n        platypusVoter.safeExecute(_token, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _pool, 0));\\n    }\\n\\n    /**\\n     * @notice Pending rewards matching interface for PlatypusStrategy\\n     * @param\\n     * @param _pid PID\\n     * @return pendingPtp\\n     * @return bonusTokens pending bonus token\\n     * @return bonusTokenAddress bonus token address\\n     */\\n    function pendingRewards(\\n        address, /*_stakingContract*/\\n        uint256 _pid\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256 bonusTokens,\\n            address bonusTokenAddress\\n        )\\n    {\\n        (\\n            uint256 pendingPtp,\\n            address[] memory bonusTokenAddresses,\\n            uint256[] memory pendingBonusTokens\\n        ) = _pendingTokens(_pid);\\n\\n        if (pendingBonusTokens.length > 0 && bonusTokenAddresses.length > 0 && bonusTokenAddresses[0] != address(0)) {\\n            bonusTokens = pendingBonusTokens[0];\\n            bonusTokenAddress = bonusTokenAddresses[0];\\n        }\\n\\n        return (pendingPtp, bonusTokens, bonusTokenAddress);\\n    }\\n\\n    function pendingRewards(uint256 _pid) external view returns (Reward[] memory) {\\n        (\\n            uint256 pendingPtp,\\n            address[] memory bonusTokenAddresses,\\n            uint256[] memory pendingBonusTokens\\n        ) = _pendingTokens(_pid);\\n\\n        uint256 feeBips = reinvestFeeBips();\\n        uint256 boostFee = (pendingPtp * feeBips) / BIPS_DIVISOR;\\n\\n        Reward[] memory rewards = new Reward[](bonusTokenAddresses.length + 1);\\n        rewards[0] = Reward({reward: address(PTP), amount: pendingPtp - boostFee});\\n        for (uint256 i = 0; i < bonusTokenAddresses.length; i++) {\\n            address bonusTokenAddress = bonusTokenAddresses[i] == address(0) ? WAVAX : bonusTokenAddresses[i];\\n            rewards[i + 1] = Reward({reward: bonusTokenAddress, amount: pendingBonusTokens[i]});\\n        }\\n        return rewards;\\n    }\\n\\n    function _pendingTokens(uint256 _pid)\\n        internal\\n        view\\n        returns (\\n            uint256 pendingPtp,\\n            address[] memory bonusTokenAddresses,\\n            uint256[] memory pendingBonusTokens\\n        )\\n    {\\n        address masterchef = stakingContract[msg.sender];\\n        (pendingPtp, bonusTokenAddresses, , pendingBonusTokens) = IMasterPlatypus(masterchef).pendingTokens(\\n            _pid,\\n            address(platypusVoter)\\n        );\\n    }\\n\\n    /**\\n     * @notice Pool balance\\n     * @param\\n     * @param _pid PID\\n     * @return balance in depositToken\\n     */\\n    function poolBalance(\\n        address, /*_stakingContract*/\\n        uint256 _pid\\n    ) external view returns (uint256 balance) {\\n        address masterchef = stakingContract[msg.sender];\\n        return _poolBalance(masterchef, _pid);\\n    }\\n\\n    function _poolBalance(address _stakingContract, uint256 _pid) internal view returns (uint256 balance) {\\n        uint256 assetBalance = getAssetBalance(_stakingContract, _pid);\\n        if (assetBalance > 0) {\\n            address asset = getAsset(_stakingContract, _pid);\\n\\n            IPlatypusPool pool = IPlatypusPool(IPlatypusAsset(asset).pool());\\n            (uint256 expectedAmount, uint256 fee, bool enoughCash) = pool.quotePotentialWithdraw(\\n                IPlatypusAsset(asset).underlyingToken(),\\n                assetBalance\\n            );\\n            require(enoughCash, \\\"PlatypusVoterProxy::This shouldn't happen\\\");\\n            return expectedAmount + fee;\\n        }\\n        return 0;\\n    }\\n\\n    function getAssetBalance(address _stakingContract, uint256 _pid) private view returns (uint256 assetBalance) {\\n        if (_stakingContract == BASE_MASTER_PLATYPUS) {\\n            (assetBalance, ) = IBaseMasterPlatypus(_stakingContract).userInfo(_pid, address(platypusVoter));\\n        } else {\\n            (assetBalance, , ) = IMasterPlatypus(_stakingContract).userInfo(_pid, address(platypusVoter));\\n        }\\n    }\\n\\n    function getAsset(address _stakingContract, uint256 _pid) private view returns (address asset) {\\n        if (_stakingContract == BASE_MASTER_PLATYPUS) {\\n            (asset, , ) = IBaseMasterPlatypus(_stakingContract).poolInfo(_pid);\\n        } else {\\n            (asset, , , , ) = IMasterPlatypus(_stakingContract).poolInfo(_pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim and distribute PTP rewards\\n     * @dev Restricted to strategy with _pid\\n     * @param\\n     * @param _pid PID\\n     */\\n    function claimReward(\\n        address, /*_stakingContract*/\\n        uint256 _pid\\n    ) external {\\n        address masterchef = stakingContract[msg.sender];\\n        require(approvedStrategies[masterchef][_pid] == msg.sender, \\\"PlatypusVoterProxy::onlyStrategy\\\");\\n\\n        platypusVoter.safeExecute(masterchef, 0, abi.encodeWithSignature(\\\"deposit(uint256,uint256)\\\", _pid, 0));\\n\\n        uint256 pendingPtp = IERC20(PTP).balanceOf(address(platypusVoter));\\n        if (pendingPtp > 0) {\\n            uint256 boostFee = 0;\\n            if (boosterFee > 0 && boosterFeeReceiver > address(0) && platypusVoter.depositsEnabled()) {\\n                boostFee = (pendingPtp * boosterFee) / BIPS_DIVISOR;\\n                platypusVoter.depositFromBalance(boostFee);\\n                IERC20(address(platypusVoter)).safeTransfer(boosterFeeReceiver, boostFee);\\n            }\\n\\n            uint256 stakingFee = 0;\\n            if (stakerFee > 0 && stakerFeeReceiver > address(0)) {\\n                stakingFee = (pendingPtp * stakerFee) / BIPS_DIVISOR;\\n                platypusVoter.safeExecute(\\n                    PTP,\\n                    0,\\n                    abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", stakerFeeReceiver, stakingFee)\\n                );\\n            }\\n\\n            uint256 reward = pendingPtp - boostFee - stakingFee;\\n            platypusVoter.safeExecute(PTP, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, reward));\\n        }\\n\\n        (address[] memory bonusTokenAddresses, ) = IMasterPlatypus(masterchef).rewarderBonusTokenInfo(_pid);\\n\\n        for (uint256 i = 0; i < bonusTokenAddresses.length; i++) {\\n            if (bonusTokenAddresses[i] == address(0)) {\\n                bonusTokenAddresses[i] = WAVAX;\\n            }\\n            if (bonusTokenAddresses[i] == WAVAX) {\\n                platypusVoter.wrapAvaxBalance();\\n            }\\n            uint256 pendingBonusToken = IERC20(bonusTokenAddresses[i]).balanceOf(address(platypusVoter));\\n            platypusVoter.safeExecute(\\n                bonusTokenAddresses[i],\\n                0,\\n                abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, pendingBonusToken)\\n            );\\n        }\\n\\n        if (platypusVoter.vePTPBalance() > 0) {\\n            platypusVoter.claimVePTP();\\n        }\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function vote(\\n        address[] memory _lpVote,\\n        int256[] memory _deltas,\\n        address _bribeReceiver\\n    ) external returns (Reward[] memory claimedBribes) {\\n        address voter = gaugeVoter;\\n        require(msg.sender == voter, \\\"PlatypusVoterProxy::Unauthorized\\\");\\n\\n        IVotingGauge gauge = votingGauge;\\n        platypusVoter.safeExecute(\\n            address(gauge),\\n            0,\\n            abi.encodeWithSignature(\\\"vote(address[],int256[])\\\", _lpVote, _deltas)\\n        );\\n\\n        _bribeReceiver = _bribeReceiver > address(0) ? _bribeReceiver : voter;\\n        claimedBribes = new Reward[](_lpVote.length);\\n        for (uint256 i = 0; i < _lpVote.length; i++) {\\n            IBribe bribe = IBribe(gauge.bribes(_lpVote[i]));\\n            address rewardToken = bribe.rewardToken();\\n            uint256 claimedAmount = IERC20(rewardToken).balanceOf(address(platypusVoter));\\n            if (claimedAmount > 0) {\\n                platypusVoter.safeExecute(\\n                    rewardToken,\\n                    0,\\n                    abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _bribeReceiver, claimedAmount)\\n                );\\n            }\\n            Reward memory reward = Reward({reward: rewardToken, amount: claimedAmount});\\n            claimedBribes[i] = reward;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x888ac24da8c5dc6bb6c956c12325abc5b29752106d608918788f219aea61dd01\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IBaseMasterPlatypus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBaseMasterPlatypus {\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingPtp,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVePtpBalance) external;\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256 _amount, uint256 _rewardDebt);\\n\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address _lpToken,\\n            address _rewarder,\\n            uint256 _accPtpPerShare\\n        );\\n}\\n\",\"keccak256\":\"0xdbb66619834dd8b764b61750c319767a2ceae1d3ff2094906fd795cd2c16ddc5\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IBribe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBribe {\\n    function rewardToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4fb3e475c870fcad93e82683cd519c1785ae2b5486aa7876e010d242979c8dbf\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IMasterPlatypus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IMasterPlatypus {\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingPtp,\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusTokens\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address[] memory bonusTokenAddress, string[] memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVePtpBalance) external;\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 _amount,\\n            uint256 _rewardDebt,\\n            uint256 _factor\\n        );\\n\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address _lpToken,\\n            address _rewarder,\\n            uint256 _sumOfFactors,\\n            uint256 _accPtpPerShare,\\n            uint256 _accPtpPerFactorShare\\n        );\\n\\n    function newMasterPlatypus() external view returns (address);\\n\\n    function version() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6c7bc3b4b0fcc200456ab76bc025a4e86fa0c16f1e28304975f2036805a46df3\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusAsset {\\n    function cash() external view returns (uint256);\\n\\n    function liability() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbbf22f57ab3ede7d0ba9e0b4167fc8be9f1268ab15ccd26cd3cc1e7a9cf9da5d\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../../interfaces/IERC721.sol\\\";\\n\\ninterface IPlatypusNFT is IERC721 {\\n    struct Platypus {\\n        uint16 level;\\n        uint16 score;\\n        // Attributes ( 0 - 9 | D4 D3 D2 D1 C3 C2 C1 B1 B2 A)\\n        uint8 eyes;\\n        uint8 mouth;\\n        uint8 skin;\\n        uint8 clothes;\\n        uint8 tail;\\n        uint8 accessories;\\n        uint8 bg;\\n        // Abilities\\n        // 0 - Speedo\\n        // 1 - Pudgy\\n        // 2 - Diligent\\n        // 3 - Gifted\\n        // 4 - Hibernate\\n        uint8[5] ability;\\n        uint32[5] power;\\n        uint256 xp;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getPrice() external view returns (uint256);\\n\\n    function availableTotalSupply() external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n        CONTRACT MANAGEMENT OPERATIONS / SALES\\n    //////////////////////////////////////////////////////////////*/\\n    function owner() external view returns (address);\\n\\n    function ownerCandidate() external view returns (address);\\n\\n    function proposeOwner(address newOwner) external;\\n\\n    function acceptOwnership() external;\\n\\n    function cancelOwnerProposal() external;\\n\\n    function increaseAvailableTotalSupply(uint256 amount) external;\\n\\n    function changeMintCost(\\n        uint256 publicCost,\\n        uint256 wlCost,\\n        uint256 veCost\\n    ) external;\\n\\n    function setSaleDetails(\\n        uint256 _preSaleOpenTime,\\n        bytes32 _wlRoot,\\n        bytes32 _veRoot,\\n        bytes32 _freeRoot,\\n        uint256 _reserved\\n    ) external;\\n\\n    function preSaleOpenTime() external view returns (uint256);\\n\\n    function withdrawPTP() external;\\n\\n    function setNewRoyaltyDetails(address _newAddress, uint256 _newFee) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        PLATYPUS LEVEL MECHANICS\\n            Caretakers are other authorized contracts that\\n                according to their own logic can issue a platypus\\n                    to level up\\n    //////////////////////////////////////////////////////////////*/\\n    function caretakers(address) external view returns (uint256);\\n\\n    function addCaretaker(address caretaker) external;\\n\\n    function removeCaretaker(address caretaker) external;\\n\\n    function growXp(uint256 tokenId, uint256 xp) external;\\n\\n    function levelUp(\\n        uint256 tokenId,\\n        uint256 newAbility,\\n        uint256 newPower\\n    ) external;\\n\\n    function levelDown(uint256 tokenId) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function changePlatypusName(uint256 tokenId, string calldata name) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            PLATYPUS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getPlatypusXp(uint256 tokenId) external view returns (uint256 xp);\\n\\n    function getPlatypusLevel(uint256 tokenId) external view returns (uint16 level);\\n\\n    function getPrimaryAbility(uint256 tokenId) external view returns (uint8 ability, uint32 power);\\n\\n    function getPlatypusDetails(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint32 speedo,\\n            uint32 pudgy,\\n            uint32 diligent,\\n            uint32 gifted,\\n            uint32 hibernate\\n        );\\n\\n    function platypusesLength() external view returns (uint256);\\n\\n    function setBaseURI(string memory _baseURI) external;\\n\\n    function setNameFee(uint256 _nameFee) external;\\n\\n    function getPlatypusName(uint256 tokenId) external view returns (string memory name);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MINTING\\n    //////////////////////////////////////////////////////////////*/\\n    function normalMint(uint256 numberOfMints) external;\\n\\n    function veMint(\\n        uint256 numberOfMints,\\n        uint256 totalGiven,\\n        bytes32[] memory proof\\n    ) external;\\n\\n    function wlMint(\\n        uint256 numberOfMints,\\n        uint256 totalGiven,\\n        bytes32[] memory proof\\n    ) external;\\n\\n    function freeMint(\\n        uint256 numberOfMints,\\n        uint256 totalGiven,\\n        bytes32[] memory proof\\n    ) external;\\n\\n    // comment to disable a slither false allert: PlatypusNFT does not implement functions\\n    // function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n    function _jsonString(uint256 tokenId) external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n    // event OwnerUpdated(address indexed newOwner);\\n\\n    // ERC2981.sol\\n    // event ChangeRoyalty(address newAddress, uint256 newFee);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                ERRORS\\n    //////////////////////////////////////////////////////////////*/\\n    // error FeeTooHigh();\\n    // error InvalidCaretaker();\\n    // error InvalidTokenID();\\n    // error MintLimit();\\n    // error PreSaleEnded();\\n    // error TicketError();\\n    // error TooSoon();\\n    // error Unauthorized();\\n}\\n\",\"keccak256\":\"0xa7005c2c9ddcd104940de6e2127ad655bb50369a72db0ca416cac479a6f99354\",\"license\":\"UNLICENSED\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusPool {\\n    function assetOf(address token) external view returns (address);\\n\\n    function deposit(\\n        address to,\\n        uint256 amount,\\n        address token,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function getHaircutRate() external view returns (uint256);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function getC1() external view returns (uint256);\\n\\n    function getXThreshold() external view returns (uint256);\\n\\n    function getSlippageParamK() external view returns (uint256);\\n\\n    function getSlippageParamN() external view returns (uint256);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x5405c6d461a84e54d1844d3b7ccd92b189ca1720a250894047d831f7afd6479a\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusStrategy {\\n    function PID() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x451fc9a5679f947a0ab52759241ac6a689f070f8ce6cc2fd3b95bdb70ce57b9e\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusVoter {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function vePTPBalance() external view returns (uint256);\\n\\n    function wrapAvaxBalance() external returns (uint256);\\n\\n    function depositsEnabled() external view returns (bool);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function depositFromBalance(uint256 _value) external;\\n\\n    function setVoterProxy(address _voterProxy) external;\\n\\n    function claimVePTP() external;\\n}\\n\",\"keccak256\":\"0x7827dd64a8acaed1dfaed78260b8e010b395f90f7e19614557570fae47078bc1\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IVePTP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IVePTP {\\n    function deposit(uint256 _amount) external;\\n\\n    function claim() external;\\n\\n    function claimable(address _addr) external view;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function users(address _user)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 lastRelease,\\n            uint256 stakedNftId\\n        );\\n\\n    function getVotes(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc21d254b8b4aa15597f180dd9e20f6ad75a815e4255f8a88e6626b18db89babb\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IVotingGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IVotingGauge {\\n    function vote(address[] calldata _lpVote, int256[] calldata _deltas)\\n        external\\n        returns (uint256[] memory bribeRewards);\\n\\n    function bribes(address _lpToken) external view returns (address);\\n}\\n\",\"keccak256\":\"0x4c170fbd035b064006a9da3a304d94ccaeabee5fe48f429381df770542a54a93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "For accounting reasons, there is one approved strategy per Masterchef PID. In case of upgrade, use a new proxy.",
    "kind": "dev",
    "methods": {
      "approveStrategy(address,address)": {
        "details": "Very sensitive, restricted to devAddrCan only be set once per PID and staking contract (reported by the strategy)",
        "params": {
          "_stakingContract": "address",
          "_strategy": "address"
        }
      },
      "claimReward(address,uint256)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "": "@param _pid PID"
        }
      },
      "deposit(uint256,address,address,address,address,uint256,uint256)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "": "@param _pool Platypus pool",
          "_amount": "deposit amount",
          "_asset": "Platypus asset",
          "_depositFee": "deposit fee",
          "_pid": "PID",
          "_token": "Deposit asset"
        }
      },
      "emergencyWithdraw(uint256,address,address,address,address)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "": "@param _pool Platypus pool",
          "_asset": "Platypus asset",
          "_pid": "PID",
          "_token": "Deposit asset"
        }
      },
      "pendingRewards(address,uint256)": {
        "params": {
          "": "@param _pid PID"
        },
        "returns": {
          "_0": "pendingPtp",
          "bonusTokenAddress": "bonus token address",
          "bonusTokens": "pending bonus token"
        }
      },
      "poolBalance(address,uint256)": {
        "params": {
          "": "@param _pid PID"
        },
        "returns": {
          "balance": "in depositToken"
        }
      },
      "reinvestFeeBips()": {
        "returns": {
          "_0": "reinvest fee"
        }
      },
      "setBoosterFee(uint256)": {
        "details": "Restricted to devAddr",
        "params": {
          "_boosterFeeBips": "new fee in bips (1% = 100 bips)"
        }
      },
      "setBoosterFeeReceiver(address)": {
        "details": "Restricted to devAddr",
        "params": {
          "_boosterFeeReceiver": "address"
        }
      },
      "setStakerFee(uint256)": {
        "details": "Restricted to devAddr",
        "params": {
          "_stakerFeeBips": "new fee in bips (1% = 100 bips)"
        }
      },
      "setStakerFeeReceiver(address)": {
        "details": "Restricted to devAddr",
        "params": {
          "_stakerFeeReceiver": "address"
        }
      },
      "stakeNFT(uint256)": {
        "details": "Restricted to devAddr.The currently staked NFT will be automatically unstaked and remain on voter. Use \"sweepNFT\" to get it back.",
        "params": {
          "id": "id of the NFT to be staked"
        }
      },
      "sweepNFT(uint256)": {
        "details": "Restricted to devAddr.",
        "params": {
          "id": "id of the NFT to be swept"
        }
      },
      "unstakeNFT()": {
        "details": "Restricted to devAddr.The unstaked NFT will remain on voter. Use \"sweepNFT\" to get it back."
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateGaugeVoter(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateMaxSupportedMasterPlatypusVersion(uint256)": {
        "params": {
          "newValue": "uint"
        }
      },
      "updateVotingGauge(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "withdraw(uint256,address,address,address,address,uint256,uint256)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "": "@param _pool Platypus pool",
          "_amount": "withdraw amount",
          "_asset": "Platypus asset",
          "_maxSlippage": "max slippage in bips",
          "_pid": "PID",
          "_token": "Deposit asset"
        },
        "returns": {
          "_0": "amount withdrawn, in _token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveStrategy(address,address)": {
        "notice": "Add an approved strategy"
      },
      "claimReward(address,uint256)": {
        "notice": "Claim and distribute PTP rewards"
      },
      "deposit(uint256,address,address,address,address,uint256,uint256)": {
        "notice": "Deposit function"
      },
      "emergencyWithdraw(uint256,address,address,address,address)": {
        "notice": "Emergency withdraw function"
      },
      "pendingRewards(address,uint256)": {
        "notice": "Pending rewards matching interface for PlatypusStrategy"
      },
      "poolBalance(address,uint256)": {
        "notice": "Pool balance"
      },
      "reinvestFeeBips()": {
        "notice": "Calculation of reinvest fee (boost + staking)"
      },
      "setBoosterFee(uint256)": {
        "notice": "Update booster fee"
      },
      "setBoosterFeeReceiver(address)": {
        "notice": "Update booster fee receiver"
      },
      "setStakerFee(uint256)": {
        "notice": "Update staker fee"
      },
      "setStakerFeeReceiver(address)": {
        "notice": "Update staker fee receiver"
      },
      "stakeNFT(uint256)": {
        "notice": "Stake NFT"
      },
      "sweepNFT(uint256)": {
        "notice": "Sweep NFT"
      },
      "unstakeNFT()": {
        "notice": "Unstake the currently staked NFT"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateGaugeVoter(address)": {
        "notice": "Update gaugeVoter"
      },
      "updateMaxSupportedMasterPlatypusVersion(uint256)": {
        "notice": "Update maxSupportedMasterPlatypusVersion"
      },
      "updateVotingGauge(address)": {
        "notice": "Update votingGauge"
      },
      "withdraw(uint256,address,address,address,address,uint256,uint256)": {
        "notice": "Withdraw function"
      }
    },
    "notice": "PlatypusVoterProxy is an upgradable contract. Strategies interact with PlatypusVoterProxy and PlatypusVoterProxy interacts with PlatypusVoter.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40550,
        "contract": "contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "boosterFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 40552,
        "contract": "contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "stakerFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 40554,
        "contract": "contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "stakerFeeReceiver",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 40556,
        "contract": "contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "boosterFeeReceiver",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 40573,
        "contract": "contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "devAddr",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 40575,
        "contract": "contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "gaugeVoter",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 40578,
        "contract": "contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "votingGauge",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IVotingGauge)43573"
      },
      {
        "astId": 40580,
        "contract": "contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "maxSupportedMasterPlatypusVersion",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 40584,
        "contract": "contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "stakingContract",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 40590,
        "contract": "contracts/strategies/avalanche/platypus/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "approvedStrategies",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IVotingGauge)43573": {
        "encoding": "inplace",
        "label": "contract IVotingGauge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}