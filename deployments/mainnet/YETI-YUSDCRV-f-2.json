{
  "address": "0x18426989f3BA9a8674Af33FBdc651cFAa185252E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum CurveSwap.PoolType",
              "name": "poolType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "swapPairRewardZap",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zapToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zapContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "zapTokenIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            }
          ],
          "internalType": "struct CurveSwap.Settings",
          "name": "_zapSettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapPair",
              "type": "address"
            }
          ],
          "internalType": "struct VariableRewardsStrategy.RewardSwapPairs[]",
          "name": "_rewardSwapPairs",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voterProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakStrategyV2.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "AddReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RemoveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "contract IYetiVoterProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSwapPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x89c2ffd128072c08fcd5c7700df72fcc6b8f774cbfe81afecf5f9f8b6224febe",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x18426989f3BA9a8674Af33FBdc651cFAa185252E",
    "transactionIndex": 6,
    "gasUsed": "4486481",
    "logsBloom": "0x
    "blockHash": "0xd8f35c530edcd3be42ca8fba384d80e544c5b183ac763b13577d590904e0ed27",
    "transactionHash": "0x89c2ffd128072c08fcd5c7700df72fcc6b8f774cbfe81afecf5f9f8b6224febe",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 14894630,
        "transactionHash": "0x89c2ffd128072c08fcd5c7700df72fcc6b8f774cbfe81afecf5f9f8b6224febe",
        "address": "0x18426989f3BA9a8674Af33FBdc651cFAa185252E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0xd8f35c530edcd3be42ca8fba384d80e544c5b183ac763b13577d590904e0ed27"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 14894630,
        "transactionHash": "0x89c2ffd128072c08fcd5c7700df72fcc6b8f774cbfe81afecf5f9f8b6224febe",
        "address": "0x18426989f3BA9a8674Af33FBdc651cFAa185252E",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000",
        "logIndex": 31,
        "blockHash": "0xd8f35c530edcd3be42ca8fba384d80e544c5b183ac763b13577d590904e0ed27"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 14894630,
        "transactionHash": "0x89c2ffd128072c08fcd5c7700df72fcc6b8f774cbfe81afecf5f9f8b6224febe",
        "address": "0x18426989f3BA9a8674Af33FBdc651cFAa185252E",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f4",
        "logIndex": 32,
        "blockHash": "0xd8f35c530edcd3be42ca8fba384d80e544c5b183ac763b13577d590904e0ed27"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 14894630,
        "transactionHash": "0x89c2ffd128072c08fcd5c7700df72fcc6b8f774cbfe81afecf5f9f8b6224febe",
        "address": "0x18426989f3BA9a8674Af33FBdc651cFAa185252E",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f4",
        "logIndex": 33,
        "blockHash": "0xd8f35c530edcd3be42ca8fba384d80e544c5b183ac763b13577d590904e0ed27"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 14894630,
        "transactionHash": "0x89c2ffd128072c08fcd5c7700df72fcc6b8f774cbfe81afecf5f9f8b6224febe",
        "address": "0x18426989f3BA9a8674Af33FBdc651cFAa185252E",
        "topics": [
          "0x916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80"
        ],
        "data": "0x00000000000000000000000077777777777d4554c39223c354a05825b2e8faa3000000000000000000000000bdc7ef37283bc67d50886c4afb64877e3e83f869",
        "logIndex": 34,
        "blockHash": "0xd8f35c530edcd3be42ca8fba384d80e544c5b183ac763b13577d590904e0ed27"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 14894630,
        "transactionHash": "0x89c2ffd128072c08fcd5c7700df72fcc6b8f774cbfe81afecf5f9f8b6224febe",
        "address": "0x18426989f3BA9a8674Af33FBdc651cFAa185252E",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 35,
        "blockHash": "0xd8f35c530edcd3be42ca8fba384d80e544c5b183ac763b13577d590904e0ed27"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 14894630,
        "transactionHash": "0x89c2ffd128072c08fcd5c7700df72fcc6b8f774cbfe81afecf5f9f8b6224febe",
        "address": "0x18426989f3BA9a8674Af33FBdc651cFAa185252E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000302404cb8f34713a8b8dbf9b4989a41252332068"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0xd8f35c530edcd3be42ca8fba384d80e544c5b183ac763b13577d590904e0ed27"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 14894630,
        "transactionHash": "0x89c2ffd128072c08fcd5c7700df72fcc6b8f774cbfe81afecf5f9f8b6224febe",
        "address": "0x18426989f3BA9a8674Af33FBdc651cFAa185252E",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 37,
        "blockHash": "0xd8f35c530edcd3be42ca8fba384d80e544c5b183ac763b13577d590904e0ed27"
      }
    ],
    "blockNumber": 14894630,
    "cumulativeGasUsed": "5935057",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Yeti x Curve YUSDCRV-f",
    "0x1da20Ac34187b2d9c74F729B85acB225D3341b25",
    {
      "poolType": 5,
      "swapPairRewardZap": "0xf4003f4efbe8691b60249e6afbd307abe7758adb",
      "zapToken": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
      "zapContract": "0x1da20Ac34187b2d9c74F729B85acB225D3341b25",
      "zapTokenIndex": 1,
      "maxSlippage": 50
    },
    [
      {
        "reward": "0x77777777777d4554c39223C354A05825b2E8Faa3",
        "swapPair": "0xbdc7ef37283bc67d50886c4afb64877e3e83f869"
      }
    ],
    "0xd8a4aa01d54c8fdd104eac28b9c975f0663e75d8",
    "0xE2a789Aeac5a47FC389Ef227aC58084e777ABf5C",
    "0x302404cb8F34713A8B8DBF9b4989A41252332068",
    {
      "minTokensToReinvest": "100000000000000",
      "adminFeeBips": 0,
      "devFeeBips": 500,
      "reinvestRewardBips": 500
    }
  ],
  "solcInputHash": "0f19e27e896d99055da1b6028351a953",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum CurveSwap.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"swapPairRewardZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zapToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zapContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"zapTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveSwap.Settings\",\"name\":\"_zapSettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"internalType\":\"struct VariableRewardsStrategy.RewardSwapPairs[]\",\"name\":\"_rewardSwapPairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voterProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct YakStrategyV2.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract IYetiVoterProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSwapPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\",\"_deadline\":\"The time at which to expire the signature\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens after withdraw fee\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Deprecated; Kept for compatibility\",\"params\":{\"newValue\":\"fee in BIPS; required to be 0\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance after withdraw fee\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/yeti/YetiStrategyForLP.sol\":\"YetiStrategyForLP\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => mapping(address => uint256)) internal allowances;\\n    mapping(address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(\\n        address signer,\\n        bytes32 encodeData,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), encodeData));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x6a1eba50e580678ef7b6b96dc90629e51f828e129060135fb7aeaba91a326d5f\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint256;\\n\\n    struct StrategySettings {\\n        uint256 minTokensToReinvest;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint256 public MIN_TOKENS_TO_REINVEST;\\n    uint256 public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint256 public ADMIN_FEE_BIPS;\\n    uint256 public REINVEST_REWARD_BIPS;\\n    uint256 public DEV_FEE_BIPS;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    uint256 internal constant MAX_UINT = type(uint256).max;\\n\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdraw(address indexed account, uint256 amount);\\n    event Reinvest(uint256 newTotalDeposits, uint256 newTotalSupply);\\n    event Recovered(address token, uint256 amount);\\n    event UpdateAdminFee(uint256 oldValue, uint256 newValue);\\n    event UpdateDevFee(uint256 oldValue, uint256 newValue);\\n    event UpdateReinvestReward(uint256 oldValue, uint256 newValue);\\n    event UpdateMinTokensToReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(StrategySettings memory _strategySettings) {\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256) {\\n        uint256 unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount) public view returns (uint256) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits());\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount) public view returns (uint256) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits()).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @dev Deprecated; Kept for compatibility\\n     * @param newValue fee in BIPS; required to be 0\\n     */\\n    function updateAdminFee(uint256 newValue) public onlyOwner {\\n        require(newValue == 0);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint256 newValue) public onlyOwner {\\n        require(newValue.add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint256 newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        payable(msg.sender).transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2e20de5ac3ae62c4cc655c5ce4d785c3aed08eb8b2454d5d2b5d007842ab35bb\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xdb4adbfe678b51139c50ca81931c58e0ce6aef9bc85195bf5dee3444aa9a2410\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7770575951dbb745d5ba319363b64dd1165d9a6380e685f1e8aff5cf1ca2c608\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair\\n    ) internal returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint256 amountOut1 = 0;\\n        uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(\\n        IPair pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (bool) {\\n        return\\n            (tokenA == pair.token0() || tokenA == pair.token1()) &&\\n            (tokenB == pair.token0() || tokenB == pair.token1()) &&\\n            tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair\\n    ) internal view returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        IPair swapPairToken1\\n    ) internal returns (uint256) {\\n        uint256 amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint256 amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint256 amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(\\n        address depositToken,\\n        uint256 maxAmountIn0,\\n        uint256 maxAmountIn1\\n    ) internal returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = IPair(address(depositToken)).getReserves();\\n        uint256 amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        IERC20(IPair(depositToken).token0()).safeTransfer(depositToken, maxAmountIn0);\\n        IERC20(IPair(depositToken).token1()).safeTransfer(depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(\\n        uint256 amountIn,\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) private pure returns (uint256) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n}\\n\",\"keccak256\":\"0x7d3e51e6f2c95f4ee832db2e24d40328e23c5757ecac4a3b71233bd16d01d20c\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\\n\",\"keccak256\":\"0xc1d5010fa46f3699ba89c0988895d0236c96d4f88490228698bdbd55a15dccf7\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity 0.8.13;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc346884413e71a1422efe5e44741b2692cbabf006f562dbdf38186790f49b1c5\",\"license\":\"MIT\"},\"contracts/strategies/VariableRewardsStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../YakStrategyV2.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\n/**\\n * @notice VariableRewardsStrategy\\n */\\nabstract contract VariableRewardsStrategy is YakStrategyV2 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IWAVAX internal constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    struct RewardSwapPairs {\\n        address reward;\\n        address swapPair;\\n    }\\n\\n    // reward -> swapPair\\n    mapping(address => address) public rewardSwapPairs;\\n    address[] public supportedRewards;\\n    uint256 public rewardCount;\\n\\n    event AddReward(address rewardToken, address swapPair);\\n    event RemoveReward(address rewardToken);\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        RewardSwapPairs[] memory _rewardSwapPairs,\\n        address _timelock,\\n        StrategySettings memory _strategySettings\\n    ) YakStrategyV2(_strategySettings) {\\n        name = _name;\\n        depositToken = IERC20(_depositToken);\\n        rewardToken = IERC20(address(WAVAX));\\n        devAddr = 0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF;\\n\\n        for (uint256 i = 0; i < _rewardSwapPairs.length; i++) {\\n            _addReward(_rewardSwapPairs[i].reward, _rewardSwapPairs[i].swapPair);\\n        }\\n\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function addReward(address _rewardToken, address _swapPair) public onlyDev {\\n        _addReward(_rewardToken, _swapPair);\\n    }\\n\\n    function _addReward(address _rewardToken, address _swapPair) internal {\\n        if (_rewardToken != address(rewardToken)) {\\n            require(\\n                DexLibrary.checkSwapPairCompatibility(IPair(_swapPair), _rewardToken, address(rewardToken)),\\n                \\\"VariableRewardsStrategy::Swap pair does not contain reward token\\\"\\n            );\\n        }\\n        rewardSwapPairs[_rewardToken] = _swapPair;\\n        supportedRewards.push(_rewardToken);\\n        rewardCount = rewardCount.add(1);\\n        emit AddReward(_rewardToken, _swapPair);\\n    }\\n\\n    function removeReward(address _rewardToken) public onlyDev {\\n        delete rewardSwapPairs[_rewardToken];\\n        bool found = false;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n                supportedRewards[i] = supportedRewards[supportedRewards.length - 1];\\n            }\\n        }\\n        require(found, \\\"VariableRewardsStrategy::Reward to delete not found!\\\");\\n        supportedRewards.pop();\\n        rewardCount = rewardCount.sub(1);\\n        emit RemoveReward(_rewardToken);\\n    }\\n\\n    function calculateDepositFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateDepositFee(_amount);\\n    }\\n\\n    function calculateWithdrawFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateWithdrawFee(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param _amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param _amount Amount of tokens to deposit\\n     * @param _deadline The time at which to expire the signature\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _account, uint256 _amount) external override {\\n        _deposit(_account, _amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"VariableRewardsStrategy::Deposits disabled\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            uint256 estimatedTotalReward = checkReward();\\n            if (estimatedTotalReward > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n                _reinvest(true);\\n            }\\n        }\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), _amount),\\n            \\\"VariableRewardsStrategy::Deposit token transfer failed\\\"\\n        );\\n        uint256 depositFee = _calculateDepositFee(_amount);\\n        _mint(_account, getSharesForDepositTokens(_amount.sub(depositFee)));\\n        _stakeDepositTokens(_amount);\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     */\\n    function _getDepositFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit fee of underlying farm\\n     * @dev Override if deposit fee is calculated dynamically\\n     */\\n    function _calculateDepositFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 depositFeeBips = _getDepositFeeBips();\\n        return _amount.mul(depositFeeBips).div(_bip());\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(_amount);\\n        require(depositTokenAmount > 0, \\\"VariableRewardsStrategy::Withdraw amount too low\\\");\\n        uint256 withdrawAmount = _withdrawFromStakingContract(depositTokenAmount);\\n        uint256 withdrawFee = _calculateWithdrawFee(depositTokenAmount);\\n        depositToken.safeTransfer(msg.sender, withdrawAmount.sub(withdrawFee));\\n        _burn(msg.sender, _amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _getWithdrawFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee of underlying farm\\n     * @dev Override if withdraw fee is calculated dynamically\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _calculateWithdrawFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips();\\n        return _amount.mul(withdrawFeeBips).div(_bip());\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        _reinvest(false);\\n    }\\n\\n    function _convertRewardsIntoWAVAX() private returns (uint256) {\\n        uint256 avaxAmount = WAVAX.balanceOf(address(this));\\n        uint256 count = supportedRewards.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            address reward = supportedRewards[i];\\n            if (reward == address(WAVAX)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    WAVAX.deposit{value: balance}();\\n                    avaxAmount = avaxAmount.add(balance);\\n                }\\n                continue;\\n            }\\n            uint256 amount = IERC20(reward).balanceOf(address(this));\\n            if (amount > 0) {\\n                address swapPair = rewardSwapPairs[reward];\\n                if (swapPair > address(0)) {\\n                    avaxAmount = avaxAmount.add(DexLibrary.swap(amount, reward, address(rewardToken), IPair(swapPair)));\\n                }\\n            }\\n        }\\n        return avaxAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from the staking contract\\n     */\\n    function _reinvest(bool userDeposit) private {\\n        _getRewards();\\n        uint256 amount = _convertRewardsIntoWAVAX();\\n        if (!userDeposit) {\\n            require(amount >= MIN_TOKENS_TO_REINVEST, \\\"VariableRewardsStrategy::Reinvest amount too low\\\");\\n        }\\n\\n        uint256 devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            rewardToken.safeTransfer(devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            rewardToken.safeTransfer(msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount.sub(devFee).sub(reinvestFee));\\n\\n        _stakeDepositTokens(depositTokenAmount);\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _stakeDepositTokens(uint256 _amount) private {\\n        require(_amount > 0, \\\"VariableRewardsStrategy::Stake amount too low\\\");\\n        _depositToStakingContract(_amount);\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        Reward[] memory rewards = _pendingRewards();\\n        uint256 estimatedTotalReward = WAVAX.balanceOf(address(this));\\n        estimatedTotalReward.add(address(this).balance);\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            if (reward == address(WAVAX)) {\\n                estimatedTotalReward = estimatedTotalReward.add(rewards[i].amount);\\n            } else {\\n                uint256 balance = IERC20(reward).balanceOf(address(this));\\n                uint256 amount = balance.add(rewards[i].amount);\\n                address swapPair = rewardSwapPairs[rewards[i].reward];\\n                if (amount > 0 && swapPair > address(0)) {\\n                    estimatedTotalReward = estimatedTotalReward.add(\\n                        DexLibrary.estimateConversionThroughPair(amount, reward, address(WAVAX), IPair(swapPair))\\n                    );\\n                }\\n            }\\n        }\\n        return estimatedTotalReward;\\n    }\\n\\n    /**\\n     * @notice Estimate recoverable balance after withdraw fee\\n     * @return deposit tokens after withdraw fee\\n     */\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        uint256 depositBalance = totalDeposits();\\n        uint256 withdrawFee = _calculateWithdrawFee(depositBalance);\\n        return depositBalance.sub(withdrawFee);\\n    }\\n\\n    function rescueDeployedFunds(\\n        uint256 _minReturnAmountAccepted,\\n        bool /*_disableDeposits*/\\n    ) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw();\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter.sub(balanceBefore) >= _minReturnAmountAccepted,\\n            \\\"VariableRewardsStrategy::Emergency withdraw minimum return amount not reached\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n\\n    function _bip() internal view virtual returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal virtual returns (uint256 toAmount);\\n\\n    function _depositToStakingContract(uint256 _amount) internal virtual;\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal virtual returns (uint256 withdrawAmount);\\n\\n    function _emergencyWithdraw() internal virtual;\\n\\n    function _getRewards() internal virtual;\\n\\n    function _pendingRewards() internal view virtual returns (Reward[] memory);\\n}\\n\",\"keccak256\":\"0x95dd5206403700e9be29ef6afa8a7f150ce38b6445874422dc13db8aa31e3726\",\"license\":\"MIT\"},\"contracts/strategies/curve/interfaces/ICurveBtcSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurveBtcSwap {\\n    function calc_token_amount(uint256[2] memory _amounts, bool _is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory _amounts,\\n        uint256 _min_mint_amount,\\n        bool _use_underlying\\n    ) external;\\n\\n    function underlying_coins(uint256 index) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdb8cad54b542418b3c45149501cbd39035ce067da7d0706dc57f04257e32296b\",\"license\":\"MIT\"},\"contracts/strategies/curve/interfaces/ICurveCryptoSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurveCryptoSwap {\\n    function calc_token_amount(uint256[5] memory _amounts, bool _is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[5] memory _amounts, uint256 _min_mint_amount) external;\\n\\n    function underlying_coins(uint256 index) external view returns (address);\\n}\\n\",\"keccak256\":\"0x85dce12d5c9a30072adc59177934749a4ba69d7b914e72c527d0adde7d713001\",\"license\":\"MIT\"},\"contracts/strategies/curve/interfaces/ICurveFactory3AssetsZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurveFactory3AssetsZap {\\n    function calc_token_amount(uint256[3] memory _amounts, bool _is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\\n}\\n\",\"keccak256\":\"0x25e524317301f5597dc84cd692f20510cb19792f08b7a385b6f1bf6aed457f15\",\"license\":\"MIT\"},\"contracts/strategies/curve/interfaces/ICurveFactory4AssetsZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurveFactory4AssetsZap {\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        bool _is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] memory _amounts,\\n        uint256 _min_mint_amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x93c387561c7a233c8fb8853e1d3568e915176f6e9abc0693b22c8689e02e0ae7\",\"license\":\"MIT\"},\"contracts/strategies/curve/interfaces/ICurveStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurveStableSwap {\\n    function calc_token_amount(uint256[3] memory _amounts, bool _is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\\n\\n    function underlying_coins(uint256 index) external view returns (address);\\n}\\n\",\"keccak256\":\"0xbd2c8974ceb4f7d0cc797b7add726add36e397a69110d2b32a31bcea6b6d4298\",\"license\":\"MIT\"},\"contracts/strategies/curve/interfaces/ICurveStableSwapAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface ICurveStableSwapAave {\\n    function calc_token_amount(uint256[3] memory _amounts, bool _is_deposit) external view returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[3] memory _amounts,\\n        uint256 _min_mint_amount,\\n        bool _use_underlying\\n    ) external returns (uint256);\\n\\n    function underlying_coins(uint256 index) external view returns (address);\\n}\\n\",\"keccak256\":\"0x6d8b93e368fcbeec3a340b19f50cfb3c8efe547cdefe83b8246db8ecef5c775f\",\"license\":\"MIT\"},\"contracts/strategies/curve/lib/CurveSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../../../lib/SafeMath.sol\\\";\\nimport \\\"../../../lib/SafeERC20.sol\\\";\\nimport \\\"../../../lib/DexLibrary.sol\\\";\\nimport \\\"../../../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/ICurveCryptoSwap.sol\\\";\\nimport \\\"../interfaces/ICurveStableSwap.sol\\\";\\nimport \\\"../interfaces/ICurveStableSwapAave.sol\\\";\\nimport \\\"../interfaces/ICurveBtcSwap.sol\\\";\\nimport \\\"../interfaces/ICurveFactory4AssetsZap.sol\\\";\\nimport \\\"../interfaces/ICurveFactory3AssetsZap.sol\\\";\\n\\nlibrary CurveSwap {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    enum PoolType {\\n        AAVE,\\n        CRYPTO,\\n        BTC,\\n        STABLE,\\n        FACTORY4,\\n        FACTORY3\\n    }\\n\\n    struct Settings {\\n        PoolType poolType;\\n        address swapPairRewardZap;\\n        address zapToken;\\n        address zapContract;\\n        uint256 zapTokenIndex;\\n        uint256 maxSlippage;\\n    }\\n\\n    uint256 private constant BIPS_DIVISOR = 10000;\\n\\n    function zapToAaveLP(\\n        uint256 amount,\\n        address rewardToken,\\n        address, /* depositToken */\\n        Settings memory zapSettings\\n    ) internal returns (uint256) {\\n        uint256 zapTokenAmount = DexLibrary.swap(\\n            amount,\\n            rewardToken,\\n            zapSettings.zapToken,\\n            IPair(zapSettings.swapPairRewardZap)\\n        );\\n        uint256[3] memory amounts = [uint256(0), uint256(0), uint256(0)];\\n        amounts[zapSettings.zapTokenIndex] = zapTokenAmount;\\n        uint256 expectedAmount = ICurveStableSwapAave(zapSettings.zapContract).calc_token_amount(amounts, true);\\n        uint256 slippage = expectedAmount.mul(zapSettings.maxSlippage).div(BIPS_DIVISOR);\\n        return ICurveStableSwapAave(zapSettings.zapContract).add_liquidity(amounts, expectedAmount.sub(slippage), true);\\n    }\\n\\n    function zapToStableLP(\\n        uint256 amount,\\n        address rewardToken,\\n        address, /* depositToken */\\n        Settings memory zapSettings\\n    ) internal returns (uint256) {\\n        uint256 zapTokenAmount = DexLibrary.swap(\\n            amount,\\n            rewardToken,\\n            zapSettings.zapToken,\\n            IPair(zapSettings.swapPairRewardZap)\\n        );\\n        uint256[3] memory amounts = [uint256(0), uint256(0), uint256(0)];\\n        amounts[zapSettings.zapTokenIndex] = zapTokenAmount;\\n        uint256 expectedAmount = ICurveStableSwap(zapSettings.zapContract).calc_token_amount(amounts, true);\\n        uint256 slippage = expectedAmount.mul(zapSettings.maxSlippage).div(BIPS_DIVISOR);\\n        return ICurveStableSwap(zapSettings.zapContract).add_liquidity(amounts, expectedAmount.sub(slippage));\\n    }\\n\\n    function zapToCryptoLP(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        Settings memory zapSettings\\n    ) internal returns (uint256) {\\n        uint256 zapTokenAmount = DexLibrary.swap(\\n            amount,\\n            rewardToken,\\n            zapSettings.zapToken,\\n            IPair(zapSettings.swapPairRewardZap)\\n        );\\n        uint256[5] memory amounts = [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)];\\n        amounts[zapSettings.zapTokenIndex] = zapTokenAmount;\\n        uint256 expectedAmount = ICurveCryptoSwap(zapSettings.zapContract).calc_token_amount(amounts, true);\\n        uint256 slippage = expectedAmount.mul(zapSettings.maxSlippage).div(BIPS_DIVISOR);\\n        ICurveCryptoSwap(zapSettings.zapContract).add_liquidity(amounts, expectedAmount.sub(slippage));\\n        return IERC20(depositToken).balanceOf(address(this));\\n    }\\n\\n    function zapToTwoPoolLP(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        Settings memory zapSettings\\n    ) internal returns (uint256) {\\n        uint256 zapTokenAmount = DexLibrary.swap(\\n            amount,\\n            rewardToken,\\n            zapSettings.zapToken,\\n            IPair(zapSettings.swapPairRewardZap)\\n        );\\n        uint256[2] memory amounts = [uint256(0), uint256(0)];\\n        amounts[zapSettings.zapTokenIndex] = zapTokenAmount;\\n        uint256 expectedAmount = ICurveBtcSwap(zapSettings.zapContract).calc_token_amount(amounts, true);\\n        uint256 slippage = expectedAmount.mul(zapSettings.maxSlippage).div(BIPS_DIVISOR);\\n        ICurveBtcSwap(zapSettings.zapContract).add_liquidity(amounts, expectedAmount.sub(slippage), true);\\n        return IERC20(depositToken).balanceOf(address(this));\\n    }\\n\\n    function zapToFactory4AssetsPoolLP(\\n        uint256 amount,\\n        address from,\\n        address to,\\n        Settings memory zapSettings\\n    ) internal returns (uint256) {\\n        if (from != zapSettings.zapToken) {\\n            amount = DexLibrary.swap(amount, from, zapSettings.zapToken, IPair(zapSettings.swapPairRewardZap));\\n        }\\n        uint256[4] memory amounts = [uint256(0), uint256(0), uint256(0), uint256(0)];\\n        amounts[zapSettings.zapTokenIndex] = amount;\\n        uint256 expectedAmount = ICurveFactory4AssetsZap(zapSettings.zapContract).calc_token_amount(to, amounts, true);\\n        uint256 slippage = expectedAmount.mul(zapSettings.maxSlippage).div(BIPS_DIVISOR);\\n        ICurveFactory4AssetsZap(zapSettings.zapContract).add_liquidity(to, amounts, expectedAmount.sub(slippage));\\n        return IERC20(to).balanceOf(address(this));\\n    }\\n\\n    function zapToFactory3AssetsPoolLP(\\n        uint256 amount,\\n        address from,\\n        address to,\\n        Settings memory zapSettings\\n    ) internal returns (uint256) {\\n        if (from != zapSettings.zapToken) {\\n            amount = DexLibrary.swap(amount, from, zapSettings.zapToken, IPair(zapSettings.swapPairRewardZap));\\n        }\\n        uint256[3] memory amounts = [uint256(0), uint256(0), uint256(0)];\\n        amounts[zapSettings.zapTokenIndex] = amount;\\n        uint256 expectedAmount = ICurveFactory3AssetsZap(zapSettings.zapContract).calc_token_amount(amounts, true);\\n        uint256 slippage = expectedAmount.mul(zapSettings.maxSlippage).div(BIPS_DIVISOR);\\n        IERC20(zapSettings.zapToken).approve(zapSettings.zapContract, amount);\\n        ICurveFactory3AssetsZap(zapSettings.zapContract).add_liquidity(amounts, expectedAmount.sub(slippage));\\n        IERC20(zapSettings.zapToken).approve(zapSettings.zapContract, 0);\\n        return IERC20(to).balanceOf(address(this));\\n    }\\n\\n    function setZap(Settings memory zapSettings)\\n        internal\\n        view\\n        returns (function(uint256, address, address, Settings memory) returns (uint256))\\n    {\\n        function(uint256, address, address, Settings memory) returns (uint256) zapFunction;\\n        if (zapSettings.poolType == CurveSwap.PoolType.AAVE) {\\n            require(\\n                zapSettings.zapToken ==\\n                    ICurveStableSwap(zapSettings.zapContract).underlying_coins(zapSettings.zapTokenIndex),\\n                \\\"Wrong zap token index\\\"\\n            );\\n            zapFunction = zapToAaveLP;\\n        } else if (zapSettings.poolType == CurveSwap.PoolType.CRYPTO) {\\n            require(\\n                zapSettings.zapToken ==\\n                    ICurveCryptoSwap(zapSettings.zapContract).underlying_coins(zapSettings.zapTokenIndex),\\n                \\\"Wrong zap token index\\\"\\n            );\\n            zapFunction = zapToCryptoLP;\\n        } else if (zapSettings.poolType == CurveSwap.PoolType.BTC) {\\n            require(\\n                zapSettings.zapToken ==\\n                    ICurveBtcSwap(zapSettings.zapContract).underlying_coins(zapSettings.zapTokenIndex),\\n                \\\"Wrong zap token index\\\"\\n            );\\n            zapFunction = zapToTwoPoolLP;\\n        }\\n        return zapFunction;\\n    }\\n}\\n\",\"keccak256\":\"0x6555cba15a81263a77f81490fe850bb871abbdd1c17f2dae072ed3692064a865\",\"license\":\"MIT\"},\"contracts/strategies/yeti/YetiStrategyForLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../VariableRewardsStrategy.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../curve/lib/CurveSwap.sol\\\";\\n\\nimport \\\"./interfaces/IYetiVoterProxy.sol\\\";\\n\\ncontract YetiStrategyForLP is VariableRewardsStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    address private constant YETI = 0x77777777777d4554c39223C354A05825b2E8Faa3;\\n\\n    address public stakingContract;\\n    IYetiVoterProxy public proxy;\\n\\n    CurveSwap.Settings private zapSettings;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        CurveSwap.Settings memory _zapSettings,\\n        RewardSwapPairs[] memory _rewardSwapPairs,\\n        address _stakingContract,\\n        address _voterProxy,\\n        address _timelock,\\n        StrategySettings memory _strategySettings\\n    ) VariableRewardsStrategy(_name, _depositToken, _rewardSwapPairs, _timelock, _strategySettings) {\\n        stakingContract = _stakingContract;\\n        proxy = IYetiVoterProxy(_voterProxy);\\n        zapSettings = _zapSettings;\\n    }\\n\\n    function _depositToStakingContract(uint256 _amount) internal override {\\n        depositToken.safeTransfer(address(proxy), _amount);\\n        proxy.deposit(stakingContract, address(depositToken), _amount);\\n    }\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal override returns (uint256 _withdrawAmount) {\\n        proxy.withdraw(stakingContract, address(depositToken), _amount);\\n        return _amount;\\n    }\\n\\n    function _emergencyWithdraw() internal override {\\n        depositToken.approve(address(proxy), 0);\\n        proxy.emergencyWithdraw(stakingContract, address(depositToken));\\n    }\\n\\n    /**\\n     * @notice Returns pending rewards\\n     */\\n    function _pendingRewards() internal view override returns (Reward[] memory) {\\n        Reward[] memory pendingRewards = new Reward[](1);\\n        uint256 pendingYETI = proxy.pendingRewards(stakingContract);\\n        pendingRewards[0] = Reward({reward: address(YETI), amount: pendingYETI});\\n        return pendingRewards;\\n    }\\n\\n    function _getRewards() internal override {\\n        proxy.claimReward(stakingContract);\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal override returns (uint256 toAmount) {\\n        return\\n            CurveSwap.zapToFactory3AssetsPoolLP(_fromAmount, address(rewardToken), address(depositToken), zapSettings);\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        return proxy.poolBalance(stakingContract);\\n    }\\n}\\n\",\"keccak256\":\"0x51a7a5cf4e7debb5e61384208cf291a8e409638bfb9fa918a4a96834acb21022\",\"license\":\"MIT\"},\"contracts/strategies/yeti/interfaces/IYetiVoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IYetiVoterProxy {\\n    function withdraw(\\n        address _stakingContract,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function emergencyWithdraw(address _stakingContract, address _token) external;\\n\\n    function deposit(\\n        address _stakingContract,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function pendingRewards(address _stakingContract) external view returns (uint256);\\n\\n    function poolBalance(address _stakingContract) external view returns (uint256);\\n\\n    function claimReward(address _stakingContract) external;\\n\\n    function approveStrategy(address _stakingContract, address _strategy) external;\\n}\\n\",\"keccak256\":\"0x5a7f524e7745cd9d5e62572ea66dd7ec77fc1056f965084f75bcc5fee7031154\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260096080819052685969656c642059616b60b81b60a09081526200002c916000919062000a7a565b506040805180820190915260038082526216549560ea1b6020909201918252620000599160019162000a7a565b503480156200006757600080fd5b506040516200555a3803806200555a8339810160408190526200008a9162000d77565b878786848480600033600680546001600160a01b0319166001600160a01b038316908117909155604051919250906000906000805160206200553a833981519152908290a3508051620000dd9062000312565b6020810151620000ed90620003a2565b6040810151620000fd9062000459565b5084516200011390600090602088019062000a7a565b50600980546001600160a01b0386166001600160a01b031991821617909155600a8054821673b31f66aa3c1e785363f0875a1b74e27b85fd66c7179055600b8054909116732d580f9cf2fb2d09bc411532988f2afda4e7beff17905560005b8351811015620001e357620001ce84828151811062000195576200019562000ed3565b602002602001015160000151858381518110620001b657620001b662000ed3565b6020026020010151602001516200051060201b60201c565b80620001da8162000eff565b91505062000172565b50620001f0600162000699565b620001fb8262000743565b60408051600080825260208201527fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234910160405180910390a15050601580546001600160a01b03808a166001600160a01b03199283161790925560168054928916929091169190911790555050865160178054899350909190829060ff1916600183600581111562000291576200029162000f1b565b0217905550602082015181546001600160a01b0391821661010002610100600160a81b031990911617825560408301516001830180549183166001600160a01b031992831617905560608401516002840180549190931691161790556080820151600382015560a0909101516004909101555062000fa69650505050505050565b6006546001600160a01b03163314620003615760405162461bcd60e51b815260206004820181905260248201526000805160206200551a83398151915260448201526064015b60405180910390fd5b600c5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600c55565b6006546001600160a01b03163314620003ed5760405162461bcd60e51b815260206004820181905260248201526000805160206200551a833981519152604482015260640162000358565b6127106200040c601054836200084060201b620022851790919060201c565b11156200041857600080fd5b60115460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1601155565b6006546001600160a01b03163314620004a45760405162461bcd60e51b815260206004820181905260248201526000805160206200551a833981519152604482015260640162000358565b612710620004c3601154836200084060201b620022851790919060201c565b1115620004cf57600080fd5b60105460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1601055565b600a546001600160a01b03838116911614620005c957620005538183600a60009054906101000a90046001600160a01b03166200085560201b620022911760201c565b620005c9576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e606482015260840162000358565b6001600160a01b038083166000818152601260209081526040822080549486166001600160a01b03199586161790556013805460018181018355919093527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09090920180549094169092179092556014546200064f9290916200228562000840821b17901c565b601455604080516001600160a01b038085168252831660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a15050565b6006546001600160a01b03163314620006e45760405162461bcd60e51b815260206004820181905260248201526000805160206200551a833981519152604482015260640162000358565b600e5481151560ff909116151503620006fc57600080fd5b600e805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859060200160405180910390a150565b6006546001600160a01b031633146200078e5760405162461bcd60e51b815260206004820181905260248201526000805160206200551a833981519152604482015260640162000358565b6001600160a01b038116620007f55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000358565b6006546040516001600160a01b038084169216906000805160206200553a83398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b60006200084e828462000f31565b9392505050565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000896573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008bc919062000f4c565b6001600160a01b0316836001600160a01b03161480620009515750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000916573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200093c919062000f4c565b6001600160a01b0316836001600160a01b0316145b801562000a535750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000998573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009be919062000f4c565b6001600160a01b0316826001600160a01b0316148062000a535750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a3e919062000f4c565b6001600160a01b0316826001600160a01b0316145b801562000a725750816001600160a01b0316836001600160a01b031614155b949350505050565b82805462000a889062000f6a565b90600052602060002090601f01602090048101928262000aac576000855562000af7565b82601f1062000ac757805160ff191683800117855562000af7565b8280016001018555821562000af7579182015b8281111562000af757825182559160200191906001019062000ada565b5062000b0592915062000b09565b5090565b5b8082111562000b05576000815560010162000b0a565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171562000b5b5762000b5b62000b20565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000b8c5762000b8c62000b20565b604052919050565b80516001600160a01b038116811462000bac57600080fd5b919050565b600060c0828403121562000bc457600080fd5b60405160c081016001600160401b038111828210171562000be95762000be962000b20565b806040525080915082516006811062000c0157600080fd5b815262000c116020840162000b94565b602082015262000c246040840162000b94565b604082015262000c376060840162000b94565b60608201526080830151608082015260a083015160a08201525092915050565b600082601f83011262000c6957600080fd5b815160206001600160401b0382111562000c875762000c8762000b20565b62000c97818360051b0162000b61565b82815260069290921b8401810191818101908684111562000cb757600080fd5b8286015b8481101562000d0d576040818903121562000cd65760008081fd5b62000ce062000b36565b62000ceb8262000b94565b815262000cfa85830162000b94565b8186015283529183019160400162000cbb565b509695505050505050565b60006060828403121562000d2b57600080fd5b604051606081016001600160401b038111828210171562000d505762000d5062000b20565b80604052508091508251815260208301516020820152604083015160408201525092915050565b6000806000806000806000806101e0898b03121562000d9557600080fd5b88516001600160401b038082111562000dad57600080fd5b818b0191508b601f83011262000dc257600080fd5b81518181111562000dd75762000dd762000b20565b602062000ded601f8301601f1916820162000b61565b8281528e8284870101111562000e0257600080fd5b60005b8381101562000e2257858101830151828201840152820162000e05565b8381111562000e345760008385840101525b509b5062000e448d820162000b94565b9a50505062000e578c60408d0162000bb1565b97506101008b015191508082111562000e6f57600080fd5b5062000e7e8b828c0162000c57565b95505062000e906101208a0162000b94565b935062000ea16101408a0162000b94565b925062000eb26101608a0162000b94565b915062000ec48a6101808b0162000d18565b90509295985092959890939650565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162000f145762000f1462000ee9565b5060010190565b634e487b7160e01b600052602160045260246000fd5b6000821982111562000f475762000f4762000ee9565b500190565b60006020828403121562000f5f57600080fd5b6200084e8262000b94565b600181811c9082168062000f7f57607f821691505b60208210810362000fa057634e487b7160e01b600052602260045260246000fd5b50919050565b6145648062000fb66000396000f3fe608060405234801561001057600080fd5b50600436106103ba5760003560e01c80638b73e606116101f4578063c4b24a461161011a578063e75ab045116100ad578063ee99205c1161007c578063ee99205c14610846578063f2fde38b14610859578063f7c618c11461086c578063fdb5a03e1461087f57600080fd5b8063e75ab04514610805578063eab89a5a14610818578063ec5568891461082b578063ed24911d1461083e57600080fd5b8063da09c72c116100e9578063da09c72c14610793578063dd62ed3e146107a6578063dd8ce4d6146107df578063e21ac825146107f257600080fd5b8063c4b24a4614610752578063c89039c51461075a578063cff1b6ef1461076d578063d505accf1461078057600080fd5b8063a5534e7111610192578063b52a321f11610161578063b52a321f14610721578063b6b55f251461072e578063b9e57b8014610741578063bd079f551461074957600080fd5b8063a5534e71146106bf578063a8ae2b7c146106e8578063a9059cbb146106fb578063ac0d31ff1461070e57600080fd5b806395d89b41116101ce57806395d89b411461066a57806399729ec1146106725780639e4e731814610685578063a4d5e67c146106ac57600080fd5b80638b73e6061461061f5780638da5cb5b146106325780639291d5631461065757600080fd5b8063483c2ef0116102e4578063789139bc116102775780637ecebe00116102465780637ecebe00146105d057806381837230146105f05780638980f11f146106035780638aff733d1461061657600080fd5b8063789139bc146105a357806379085425146105ac5780637ae26773146105b55780637d882097146105c857600080fd5b80634ebb7916116102b35780634ebb7916146105565780635ea682ea1461056957806370a0823114610572578063715018a61461059b57600080fd5b8063483c2ef0146104fa5780634a970be71461051d5780634bebd1e7146105305780634e77ace51461054357600080fd5b806323b872dd1161035c57806330adf81f1161032b57806330adf81f1461049d578063313ce567146104c45780633bdc6e72146104de57806340b47e1a146104e757600080fd5b806323b872dd14610462578063247d284b1461041f5780632e1a7d4d146104755780632f4f21e21461048a57600080fd5b80630f23475d116103985780630f23475d14610417578063110560351461041f57806318160ddd1461043257806320606b701461043b57600080fd5b806306fdde03146103bf57806307677111146103dd578063095ea7b3146103f4575b600080fd5b6103c7610887565b6040516103d49190613f1e565b60405180910390f35b6103e6600f5481565b6040519081526020016103d4565b610407610402366004613f46565b610915565b60405190151581526020016103d4565b6103e661092b565b6103e661042d366004613f72565b610956565b6103e660025481565b6103e67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b610407610470366004613f8b565b610967565b610488610483366004613f72565b610a4b565b005b610488610498366004613f46565b610b53565b6103e67f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6104cc601281565b60405160ff90911681526020016103d4565b6103e660075481565b6104886104f5366004613fcc565b610b61565b610407610508366004614005565b60086020526000908152604090205460ff1681565b61048861052b366004614038565b610bc5565b61048861053e366004614005565b610c77565b61048861055136600461408d565b610d94565b610488610564366004613f72565b610e3b565b6103e660115481565b6103e6610580366004614005565b6001600160a01b031660009081526004602052604090205490565b610488610ef5565b6103e6600d5481565b6103e660145481565b6104886105c3366004613fcc565b610f87565b6103e661104b565b6103e66105de366004614005565b60056020526000908152604090205481565b6104886105fe366004613f72565b6110de565b610488610611366004613f46565b611167565b6103e660105481565b61048861062d366004614005565b61127d565b6006546001600160a01b03165b6040516001600160a01b0390911681526020016103d4565b610488610665366004614005565b611438565b6103c76114fb565b610488610680366004613f72565b611508565b6103e67fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6104886106ba366004614005565b6115b4565b61063f6106cd366004614005565b6012602052600090815260409020546001600160a01b031681565b6104886106f6366004613f72565b6117f3565b610407610709366004613f46565b61189f565b61048861071c3660046140aa565b6118ac565b600e546104079060ff1681565b61048861073c366004613f72565b611ae2565b6103e6611aef565b6103e6600c5481565b6103e6611b34565b60095461063f906001600160a01b031681565b61048861077b366004613f72565b611da2565b61048861078e3660046140cf565b611e36565b600b5461063f906001600160a01b031681565b6103e66107b4366004613fcc565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6103e66107ed366004613f72565b611f49565b610488610800366004613f72565b611f83565b61063f610813366004613f72565b61200c565b6103e6610826366004613f72565b612036565b60165461063f906001600160a01b031681565b6103e661206a565b60155461063f906001600160a01b031681565b610488610867366004614005565b61210a565b600a5461063f906001600160a01b031681565b61048861222a565b600080546108949061413d565b80601f01602080910402602001604051908101604052809291908181526020018280546108c09061413d565b801561090d5780601f106108e25761010080835404028352916020019161090d565b820191906000526020600020905b8154815290600101906020018083116108f057829003601f168201915b505050505081565b60006109223384846124a6565b50600192915050565b60008061093661104b565b90506000610943826125b4565b905061094f82826125c7565b9250505090565b6000610961826125b4565b92915050565b6001600160a01b0383166000818152600360209081526040808320338085529252822054919290919082148015906109a157506000198114155b15610a325760006109cd856040518060600160405280602f81526020016144ab602f91398491906125d3565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610a3d8686866125ff565b6001925050505b9392505050565b6000610a5682612036565b905060008111610ad35760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5769746864726160448201527f7720616d6f756e7420746f6f206c6f770000000000000000000000000000000060648201526084015b60405180910390fd5b6000610ade8261273b565b90506000610aeb836125b4565b9050610b0e33610afb84846125c7565b6009546001600160a01b031691906127d2565b610b18338561283e565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250505050565b610b5d8282612914565b5050565b600b546001600160a01b03163314610bbb5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610aca565b610b5d8282612b35565b6009546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b039091169063d505accf9060e401600060405180830381600087803b158015610c4e57600080fd5b505af1158015610c62573d6000803e3d6000fd5b50505050610c703386612914565b5050505050565b6006546001600160a01b03163314610cbf5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6001600160a01b03811660009081526008602052604090205460ff1615610d285760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610aca565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610d5a91612285565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b03163314610ddc5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b600e5481151560ff909116151503610df357600080fd5b600e805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b03163314610e835760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b60008111610e9057600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610ebd573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610e30565b6006546001600160a01b03163314610f3d5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b03163314610fcf5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af115801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190614177565b610b5d57600080fd5b6016546015546040517f68abb5e00000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260009291909116906368abb5e090602401602060405180830381865afa1580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d99190614194565b905090565b6006546001600160a01b031633146111265760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b600c5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600c55565b6006546001600160a01b031633146111af5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b600081116111bc57600080fd5b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d9190614177565b61123657600080fd5b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b031633146112c55760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b60006007541161133d5760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610aca565b6001600160a01b03811660009081526008602052604090205460ff1615156001146113d05760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610aca565b6001600160a01b0381166000908152600860205260409020805460ff191690556007546113fe9060016125c7565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b600b546001600160a01b031633146114925760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610aca565b600b54604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600180546108949061413d565b6006546001600160a01b031633146115505760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6127106115686010548361228590919063ffffffff16565b111561157357600080fd5b60115460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1601155565b600b546001600160a01b0316331461160e5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610aca565b6001600160a01b038116600090815260126020526040812080546001600160a01b0319169055805b6013548110156117025760138181548110611653576116536141ad565b6000918252602090912001546001600160a01b03908116908416036116f05760138054600193506116859084906141d9565b81548110611695576116956141ad565b600091825260209091200154601380546001600160a01b0390921691839081106116c1576116c16141ad565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806116fa816141f0565b915050611636565b50806117765760405162461bcd60e51b815260206004820152603460248201527f5661726961626c655265776172647353747261746567793a3a5265776172642060448201527f746f2064656c657465206e6f7420666f756e64210000000000000000000000006064820152608401610aca565b601380548061178757611787614209565b600082815260209020810160001990810180546001600160a01b03191690550190556014546117b79060016125c7565b6014556040516001600160a01b03831681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc90602001611271565b6006546001600160a01b0316331461183b5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6127106118536011548361228590919063ffffffff16565b111561185e57600080fd5b60105460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1601055565b60006109223384846125ff565b6006546001600160a01b031633146118f45760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119619190614194565b905061196b612c91565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156119b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d89190614194565b9050836119e582846125c7565b1015611a7f5760405162461bcd60e51b815260206004820152604d60248201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60448201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60648201527f74206e6f74207265616368656400000000000000000000000000000000000000608482015260a401610aca565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611aa861104b565b6002546040805192835260208301919091520160405180910390a1600e5460ff161515600103611adc57611adc6000610d94565b50505050565b611aec3382612914565b50565b600080611afa611b34565b9050600c548110611b2c57611b26612710611b2060105484612d8d90919063ffffffff16565b90612d99565b91505090565b600091505090565b600080611b3f612da5565b6040516370a0823160e01b815230600482015290915060009073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190602401602060405180830381865afa158015611b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb89190614194565b9050611bc48147612285565b5060005b8251811015611d9b576000838281518110611be557611be56141ad565b602002602001015160000151905073b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b0316816001600160a01b031603611c5757611c50848381518110611c3557611c356141ad565b6020026020010151602001518461228590919063ffffffff16565b9250611d88565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc29190614194565b90506000611cf6868581518110611cdb57611cdb6141ad565b6020026020010151602001518361228590919063ffffffff16565b9050600060126000888781518110611d1057611d106141ad565b602090810291909101810151516001600160a01b03908116835290820192909252604001600020541690508115801590611d5257506001600160a01b03811615155b15611d8457611d81611d7a838673b31f66aa3c1e785363f0875a1b74e27b85fd66c785612ece565b8790612285565b95505b5050505b5080611d93816141f0565b915050611bc8565b5092915050565b6006546001600160a01b03163314611dea5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b8015611df557600080fd5b600f5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600f55565b42841015611e865760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610aca565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a919086611ed3836141f0565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050611f348882868686612f9a565b611f3f8888886124a6565b5050505050505050565b6000611f5f611f5661104b565b60025490612d8d565b600003611f6a575090565b610961611f7561104b565b600254611b20908590612d8d565b6006546001600160a01b03163314611fcb5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b600d5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600d55565b6013818154811061201c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000612043611f5661104b565b60000361205257506000919050565b610961600254611b2061206361104b565b8590612d8d565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161209f919061421f565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b031633146121525760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6001600160a01b0381166121ce5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610aca565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146122795760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610aca565b61228360006130fa565b565b6000610a4482846142ba565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f591906142d2565b6001600160a01b0316836001600160a01b031614806123865750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561234d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237191906142d2565b6001600160a01b0316836001600160a01b0316145b80156124805750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ef91906142d2565b6001600160a01b0316826001600160a01b031614806124805750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246b91906142d2565b6001600160a01b0316826001600160a01b0316145b801561249e5750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b0383166124fc5760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610aca565b6001600160a01b0382166125525760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610aca565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080610a44612710611b208584612d8d565b6000610a4482846141d9565b600081848411156125f75760405162461bcd60e51b8152600401610aca9190613f1e565b505050900390565b6001600160a01b03821661267b5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610aca565b6126b8816040518060600160405280602e8152602001614501602e91396001600160a01b03861660009081526004602052604090205491906125d3565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546126e79082612285565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906125a79085815260200190565b6016546015546009546040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216602482015260448101849052600092919091169063d9caed1290606401600060405180830381600087803b1580156127b457600080fd5b505af11580156127c8573d6000803e3d6000fd5b5093949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905261283990849061327d565b505050565b61287b816040518060600160405280602781526020016144da602791396001600160a01b03851660009081526004602052604090205491906125d3565b60046000846001600160a01b03166001600160a01b03168152602001908152602001600020819055506128cb816040518060600160405280602781526020016144646027913960025491906125d3565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600e5460ff1615156001146129915760405162461bcd60e51b815260206004820152602a60248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f732064697361626c6564000000000000000000000000000000000000000000006064820152608401610aca565b600d54156129bb5760006129a3611b34565b9050600d548111156129b9576129b960016130fa565b505b6009546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015612a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4f9190614177565b612ac15760405162461bcd60e51b815260206004820152603660248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f20746f6b656e207472616e73666572206661696c6564000000000000000000006064820152608401610aca565b6000612acc826125b4565b9050612ae483612adf6107ed85856125c7565b613362565b612aed826133e6565b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83604051612b2891815260200190565b60405180910390a2505050565b600a546001600160a01b03838116911614612bd757600a54612b6390829084906001600160a01b0316612291565b612bd7576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401610aca565b6001600160a01b03808316600081815260126020526040812080549385166001600160a01b03199485161790556013805460018181018355919092527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0909091018054909316909117909155601454612c4e91612285565b601455604080516001600160a01b038085168252831660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f809101611271565b60095460165460405163095ea7b360e01b81526001600160a01b0391821660048201526000602482015291169063095ea7b3906044016020604051808303816000875af1158015612ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0a9190614177565b506016546015546009546040517f6382d9ad0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529082166024820152911690636382d9ad906044015b600060405180830381600087803b158015612d7957600080fd5b505af1158015611adc573d6000803e3d6000fd5b6000610a4482846142ef565b6000610a44828461430e565b60408051600180825281830190925260609160009190816020015b6040805180820190915260008082526020820152815260200190600190039081612dc0579050506016546015546040517f31d7a2620000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201529293506000929116906331d7a26290602401602060405180830381865afa158015612e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e769190614194565b905060405180604001604052807377777777777d4554c39223c354a05825b2e8faa36001600160a01b031681526020018281525082600081518110612ebd57612ebd6141ad565b602090810291909101015250919050565b600080612edb8585613465565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f43919061434e565b5091509150866001600160a01b0316836001600160a01b031614612f6357905b612f8e88836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613496565b98975050505050505050565b6000612fa461206a565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561304a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906130805750866001600160a01b0316816001600160a01b0316145b6130f15760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610aca565b50505050505050565b6131026134e4565b600061310c613531565b90508161318b57600c5481101561318b5760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360448201527f7420616d6f756e7420746f6f206c6f77000000000000000000000000000000006064820152608401610aca565b60006131a8612710611b2060115485612d8d90919063ffffffff16565b905080156131cd57600b54600a546131cd916001600160a01b039182169116836127d2565b60006131ea612710611b2060105486612d8d90919063ffffffff16565b9050801561320957600a54613209906001600160a01b031633836127d2565b60006132276132228361321c87876125c7565b906125c7565b61376d565b9050613232816133e6565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461325b61104b565b6002546040805192835260208301919091520160405180910390a15050505050565b60006132d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661380e9092919063ffffffff16565b80519091501561283957808060200190518101906132f09190614177565b6128395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610aca565b60025461336f9082612285565b6002556001600160a01b0382166000908152600460205260409020546133959082612285565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906129089085815260200190565b6000811161345c5760405162461bcd60e51b815260206004820152602d60248201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160448201527f6d6f756e7420746f6f206c6f77000000000000000000000000000000000000006064820152608401610aca565b611aec8161381d565b600080826001600160a01b0316846001600160a01b03161061348857828461348b565b83835b915091509250929050565b6000806134a5856103e5612d8d565b905060006134b38285612d8d565b905060006134cd836134c7886103e8612d8d565b90612285565b90506134d98282612d99565b979650505050505050565b6016546015546040517fd279c1910000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291169063d279c19190602401612d5f565b6040516370a0823160e01b8152306004820152600090819073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190602401602060405180830381865afa158015613585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a99190614194565b60135490915060005b81811015613765576000601382815481106135cf576135cf6141ad565b6000918252602090912001546001600160a01b031690507fffffffffffffffffffffffff4ce09955c3e187ac9c0f78a5e48b1d847a0299398101613699574780156136925773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561366357600080fd5b505af1158015613677573d6000803e3d6000fd5b505050505061368f818661228590919063ffffffff16565b94505b5050613753565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156136e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137049190614194565b90508015613750576001600160a01b0380831660009081526012602052604090205416801561374e57600a5461374b90611d7a90849086906001600160a01b0316856138c2565b95505b505b50505b8061375d816141f0565b9150506135b2565b509092915050565b600a546009546040805160c08101909152601780546000946109619487946001600160a01b03928316949190921692829060ff1660058111156137b2576137b261439e565b60058111156137c3576137c361439e565b815281546001600160a01b036101009091048116602083015260018301548116604083015260028301541660608201526003820154608082015260049091015460a090910152613a5d565b606061249e8484600085613d55565b60165460095461383a916001600160a01b039182169116836127d2565b6016546015546009546040517f8340f5490000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216602482015260448101849052911690638340f54990606401600060405180830381600087803b1580156138ae57600080fd5b505af1158015610c70573d6000803e3d6000fd5b6000806138cf8585613465565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613913573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613937919061434e565b5091509150866001600160a01b0316836001600160a01b03161461395757905b6000806139858a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613496565b9050886001600160a01b0316856001600160a01b0316146139a257905b6139b66001600160a01b038a16888c6127d2565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f90613a0e90859085903090602481016143b4565b600060405180830381600087803b158015613a2857600080fd5b505af1158015613a3c573d6000803e3d6000fd5b50505050818111613a4d5781613a4f565b805b9a9950505050505050505050565b600081604001516001600160a01b0316846001600160a01b031614613a9357613a908585846040015185602001516138c2565b94505b600060405180606001604052806000815260200160008152602001600081525090508581846080015160038110613acc57613acc6141ad565b602002015260608301516040517f3883e1190000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690633883e11990613b2090859060019060040161440f565b602060405180830381865afa158015613b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b619190614194565b90506000613b82612710611b208760a0015185612d8d90919063ffffffff16565b6040868101516060880151915163095ea7b360e01b81526001600160a01b039283166004820152602481018c9052929350169063095ea7b3906044016020604051808303816000875af1158015613bdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c019190614177565b5060608501516001600160a01b0316634515cef384613c2085856125c7565b6040518363ffffffff1660e01b8152600401613c3d92919061442c565b600060405180830381600087803b158015613c5757600080fd5b505af1158015613c6b573d6000803e3d6000fd5b5050506040808701516060880151915163095ea7b360e01b81526001600160a01b039283166004820152600060248201529116915063095ea7b3906044016020604051808303816000875af1158015613cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cec9190614177565b506040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015613d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8e9190614194565b606082471015613dcd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610aca565b6001600160a01b0385163b613e245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aca565b600080866001600160a01b03168587604051613e409190614447565b60006040518083038185875af1925050503d8060008114613e7d576040519150601f19603f3d011682016040523d82523d6000602084013e613e82565b606091505b50915091506134d982828660608315613e9c575081610a44565b825115613eac5782518084602001fd5b8160405162461bcd60e51b8152600401610aca9190613f1e565b60005b83811015613ee1578181015183820152602001613ec9565b83811115611adc5750506000910152565b60008151808452613f0a816020860160208601613ec6565b601f01601f19169290920160200192915050565b602081526000610a446020830184613ef2565b6001600160a01b0381168114611aec57600080fd5b60008060408385031215613f5957600080fd5b8235613f6481613f31565b946020939093013593505050565b600060208284031215613f8457600080fd5b5035919050565b600080600060608486031215613fa057600080fd5b8335613fab81613f31565b92506020840135613fbb81613f31565b929592945050506040919091013590565b60008060408385031215613fdf57600080fd5b8235613fea81613f31565b91506020830135613ffa81613f31565b809150509250929050565b60006020828403121561401757600080fd5b8135610a4481613f31565b803560ff8116811461403357600080fd5b919050565b600080600080600060a0868803121561405057600080fd5b853594506020860135935061406760408701614022565b94979396509394606081013594506080013592915050565b8015158114611aec57600080fd5b60006020828403121561409f57600080fd5b8135610a448161407f565b600080604083850312156140bd57600080fd5b823591506020830135613ffa8161407f565b600080600080600080600060e0888a0312156140ea57600080fd5b87356140f581613f31565b9650602088013561410581613f31565b9550604088013594506060880135935061412160808901614022565b925060a0880135915060c0880135905092959891949750929550565b600181811c9082168061415157607f821691505b60208210810361417157634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561418957600080fd5b8151610a448161407f565b6000602082840312156141a657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156141eb576141eb6141c3565b500390565b600060018201614202576142026141c3565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600080835481600182811c91508083168061423b57607f831692505b6020808410820361425a57634e487b7160e01b86526022600452602486fd5b81801561426e576001811461427f576142ac565b60ff198616895284890196506142ac565b60008a81526020902060005b868110156142a45781548b82015290850190830161428b565b505084890196505b509498975050505050505050565b600082198211156142cd576142cd6141c3565b500190565b6000602082840312156142e457600080fd5b8151610a4481613f31565b6000816000190483118215151615614309576143096141c3565b500290565b60008261432b57634e487b7160e01b600052601260045260246000fd5b500490565b80516dffffffffffffffffffffffffffff8116811461403357600080fd5b60008060006060848603121561436357600080fd5b61436c84614330565b925061437a60208501614330565b9150604084015163ffffffff8116811461439357600080fd5b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b8481528360208201526001600160a01b03831660408201526080606082015260006143e26080830184613ef2565b9695505050505050565b8060005b6003811015611adc5781518452602093840193909101906001016143f0565b6080810161441d82856143ec565b82151560608301529392505050565b6080810161443a82856143ec565b8260608301529392505050565b60008251614459818460208701613ec6565b919091019291505056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212207198b6dd0cc2f48bb1c5392fa044e8e7f0b7a8519990201cc29a70928b9b4b2f64736f6c634300080d00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103ba5760003560e01c80638b73e606116101f4578063c4b24a461161011a578063e75ab045116100ad578063ee99205c1161007c578063ee99205c14610846578063f2fde38b14610859578063f7c618c11461086c578063fdb5a03e1461087f57600080fd5b8063e75ab04514610805578063eab89a5a14610818578063ec5568891461082b578063ed24911d1461083e57600080fd5b8063da09c72c116100e9578063da09c72c14610793578063dd62ed3e146107a6578063dd8ce4d6146107df578063e21ac825146107f257600080fd5b8063c4b24a4614610752578063c89039c51461075a578063cff1b6ef1461076d578063d505accf1461078057600080fd5b8063a5534e7111610192578063b52a321f11610161578063b52a321f14610721578063b6b55f251461072e578063b9e57b8014610741578063bd079f551461074957600080fd5b8063a5534e71146106bf578063a8ae2b7c146106e8578063a9059cbb146106fb578063ac0d31ff1461070e57600080fd5b806395d89b41116101ce57806395d89b411461066a57806399729ec1146106725780639e4e731814610685578063a4d5e67c146106ac57600080fd5b80638b73e6061461061f5780638da5cb5b146106325780639291d5631461065757600080fd5b8063483c2ef0116102e4578063789139bc116102775780637ecebe00116102465780637ecebe00146105d057806381837230146105f05780638980f11f146106035780638aff733d1461061657600080fd5b8063789139bc146105a357806379085425146105ac5780637ae26773146105b55780637d882097146105c857600080fd5b80634ebb7916116102b35780634ebb7916146105565780635ea682ea1461056957806370a0823114610572578063715018a61461059b57600080fd5b8063483c2ef0146104fa5780634a970be71461051d5780634bebd1e7146105305780634e77ace51461054357600080fd5b806323b872dd1161035c57806330adf81f1161032b57806330adf81f1461049d578063313ce567146104c45780633bdc6e72146104de57806340b47e1a146104e757600080fd5b806323b872dd14610462578063247d284b1461041f5780632e1a7d4d146104755780632f4f21e21461048a57600080fd5b80630f23475d116103985780630f23475d14610417578063110560351461041f57806318160ddd1461043257806320606b701461043b57600080fd5b806306fdde03146103bf57806307677111146103dd578063095ea7b3146103f4575b600080fd5b6103c7610887565b6040516103d49190613f1e565b60405180910390f35b6103e6600f5481565b6040519081526020016103d4565b610407610402366004613f46565b610915565b60405190151581526020016103d4565b6103e661092b565b6103e661042d366004613f72565b610956565b6103e660025481565b6103e67f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b610407610470366004613f8b565b610967565b610488610483366004613f72565b610a4b565b005b610488610498366004613f46565b610b53565b6103e67f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6104cc601281565b60405160ff90911681526020016103d4565b6103e660075481565b6104886104f5366004613fcc565b610b61565b610407610508366004614005565b60086020526000908152604090205460ff1681565b61048861052b366004614038565b610bc5565b61048861053e366004614005565b610c77565b61048861055136600461408d565b610d94565b610488610564366004613f72565b610e3b565b6103e660115481565b6103e6610580366004614005565b6001600160a01b031660009081526004602052604090205490565b610488610ef5565b6103e6600d5481565b6103e660145481565b6104886105c3366004613fcc565b610f87565b6103e661104b565b6103e66105de366004614005565b60056020526000908152604090205481565b6104886105fe366004613f72565b6110de565b610488610611366004613f46565b611167565b6103e660105481565b61048861062d366004614005565b61127d565b6006546001600160a01b03165b6040516001600160a01b0390911681526020016103d4565b610488610665366004614005565b611438565b6103c76114fb565b610488610680366004613f72565b611508565b6103e67fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6104886106ba366004614005565b6115b4565b61063f6106cd366004614005565b6012602052600090815260409020546001600160a01b031681565b6104886106f6366004613f72565b6117f3565b610407610709366004613f46565b61189f565b61048861071c3660046140aa565b6118ac565b600e546104079060ff1681565b61048861073c366004613f72565b611ae2565b6103e6611aef565b6103e6600c5481565b6103e6611b34565b60095461063f906001600160a01b031681565b61048861077b366004613f72565b611da2565b61048861078e3660046140cf565b611e36565b600b5461063f906001600160a01b031681565b6103e66107b4366004613fcc565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6103e66107ed366004613f72565b611f49565b610488610800366004613f72565b611f83565b61063f610813366004613f72565b61200c565b6103e6610826366004613f72565b612036565b60165461063f906001600160a01b031681565b6103e661206a565b60155461063f906001600160a01b031681565b610488610867366004614005565b61210a565b600a5461063f906001600160a01b031681565b61048861222a565b600080546108949061413d565b80601f01602080910402602001604051908101604052809291908181526020018280546108c09061413d565b801561090d5780601f106108e25761010080835404028352916020019161090d565b820191906000526020600020905b8154815290600101906020018083116108f057829003601f168201915b505050505081565b60006109223384846124a6565b50600192915050565b60008061093661104b565b90506000610943826125b4565b905061094f82826125c7565b9250505090565b6000610961826125b4565b92915050565b6001600160a01b0383166000818152600360209081526040808320338085529252822054919290919082148015906109a157506000198114155b15610a325760006109cd856040518060600160405280602f81526020016144ab602f91398491906125d3565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610a3d8686866125ff565b6001925050505b9392505050565b6000610a5682612036565b905060008111610ad35760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5769746864726160448201527f7720616d6f756e7420746f6f206c6f770000000000000000000000000000000060648201526084015b60405180910390fd5b6000610ade8261273b565b90506000610aeb836125b4565b9050610b0e33610afb84846125c7565b6009546001600160a01b031691906127d2565b610b18338561283e565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250505050565b610b5d8282612914565b5050565b600b546001600160a01b03163314610bbb5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610aca565b610b5d8282612b35565b6009546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b039091169063d505accf9060e401600060405180830381600087803b158015610c4e57600080fd5b505af1158015610c62573d6000803e3d6000fd5b50505050610c703386612914565b5050505050565b6006546001600160a01b03163314610cbf5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6001600160a01b03811660009081526008602052604090205460ff1615610d285760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610aca565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610d5a91612285565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b03163314610ddc5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b600e5481151560ff909116151503610df357600080fd5b600e805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b03163314610e835760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b60008111610e9057600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610ebd573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610e30565b6006546001600160a01b03163314610f3d5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b03163314610fcf5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af115801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190614177565b610b5d57600080fd5b6016546015546040517f68abb5e00000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260009291909116906368abb5e090602401602060405180830381865afa1580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d99190614194565b905090565b6006546001600160a01b031633146111265760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b600c5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600c55565b6006546001600160a01b031633146111af5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b600081116111bc57600080fd5b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d9190614177565b61123657600080fd5b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b031633146112c55760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b60006007541161133d5760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610aca565b6001600160a01b03811660009081526008602052604090205460ff1615156001146113d05760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610aca565b6001600160a01b0381166000908152600860205260409020805460ff191690556007546113fe9060016125c7565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b600b546001600160a01b031633146114925760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610aca565b600b54604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600180546108949061413d565b6006546001600160a01b031633146115505760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6127106115686010548361228590919063ffffffff16565b111561157357600080fd5b60115460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1601155565b600b546001600160a01b0316331461160e5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610aca565b6001600160a01b038116600090815260126020526040812080546001600160a01b0319169055805b6013548110156117025760138181548110611653576116536141ad565b6000918252602090912001546001600160a01b03908116908416036116f05760138054600193506116859084906141d9565b81548110611695576116956141ad565b600091825260209091200154601380546001600160a01b0390921691839081106116c1576116c16141ad565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b806116fa816141f0565b915050611636565b50806117765760405162461bcd60e51b815260206004820152603460248201527f5661726961626c655265776172647353747261746567793a3a5265776172642060448201527f746f2064656c657465206e6f7420666f756e64210000000000000000000000006064820152608401610aca565b601380548061178757611787614209565b600082815260209020810160001990810180546001600160a01b03191690550190556014546117b79060016125c7565b6014556040516001600160a01b03831681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc90602001611271565b6006546001600160a01b0316331461183b5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6127106118536011548361228590919063ffffffff16565b111561185e57600080fd5b60105460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1601055565b60006109223384846125ff565b6006546001600160a01b031633146118f45760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119619190614194565b905061196b612c91565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156119b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d89190614194565b9050836119e582846125c7565b1015611a7f5760405162461bcd60e51b815260206004820152604d60248201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60448201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60648201527f74206e6f74207265616368656400000000000000000000000000000000000000608482015260a401610aca565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611aa861104b565b6002546040805192835260208301919091520160405180910390a1600e5460ff161515600103611adc57611adc6000610d94565b50505050565b611aec3382612914565b50565b600080611afa611b34565b9050600c548110611b2c57611b26612710611b2060105484612d8d90919063ffffffff16565b90612d99565b91505090565b600091505090565b600080611b3f612da5565b6040516370a0823160e01b815230600482015290915060009073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190602401602060405180830381865afa158015611b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb89190614194565b9050611bc48147612285565b5060005b8251811015611d9b576000838281518110611be557611be56141ad565b602002602001015160000151905073b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b0316816001600160a01b031603611c5757611c50848381518110611c3557611c356141ad565b6020026020010151602001518461228590919063ffffffff16565b9250611d88565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc29190614194565b90506000611cf6868581518110611cdb57611cdb6141ad565b6020026020010151602001518361228590919063ffffffff16565b9050600060126000888781518110611d1057611d106141ad565b602090810291909101810151516001600160a01b03908116835290820192909252604001600020541690508115801590611d5257506001600160a01b03811615155b15611d8457611d81611d7a838673b31f66aa3c1e785363f0875a1b74e27b85fd66c785612ece565b8790612285565b95505b5050505b5080611d93816141f0565b915050611bc8565b5092915050565b6006546001600160a01b03163314611dea5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b8015611df557600080fd5b600f5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600f55565b42841015611e865760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610aca565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a919086611ed3836141f0565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050611f348882868686612f9a565b611f3f8888886124a6565b5050505050505050565b6000611f5f611f5661104b565b60025490612d8d565b600003611f6a575090565b610961611f7561104b565b600254611b20908590612d8d565b6006546001600160a01b03163314611fcb5760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b600d5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600d55565b6013818154811061201c57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000612043611f5661104b565b60000361205257506000919050565b610961600254611b2061206361104b565b8590612d8d565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161209f919061421f565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b031633146121525760405162461bcd60e51b8152602060048201819052602482015260008051602061448b8339815191526044820152606401610aca565b6001600160a01b0381166121ce5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610aca565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146122795760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610aca565b61228360006130fa565b565b6000610a4482846142ba565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f591906142d2565b6001600160a01b0316836001600160a01b031614806123865750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561234d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237191906142d2565b6001600160a01b0316836001600160a01b0316145b80156124805750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ef91906142d2565b6001600160a01b0316826001600160a01b031614806124805750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246b91906142d2565b6001600160a01b0316826001600160a01b0316145b801561249e5750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b0383166124fc5760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610aca565b6001600160a01b0382166125525760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610aca565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080610a44612710611b208584612d8d565b6000610a4482846141d9565b600081848411156125f75760405162461bcd60e51b8152600401610aca9190613f1e565b505050900390565b6001600160a01b03821661267b5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610aca565b6126b8816040518060600160405280602e8152602001614501602e91396001600160a01b03861660009081526004602052604090205491906125d3565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546126e79082612285565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906125a79085815260200190565b6016546015546009546040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216602482015260448101849052600092919091169063d9caed1290606401600060405180830381600087803b1580156127b457600080fd5b505af11580156127c8573d6000803e3d6000fd5b5093949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905261283990849061327d565b505050565b61287b816040518060600160405280602781526020016144da602791396001600160a01b03851660009081526004602052604090205491906125d3565b60046000846001600160a01b03166001600160a01b03168152602001908152602001600020819055506128cb816040518060600160405280602781526020016144646027913960025491906125d3565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600e5460ff1615156001146129915760405162461bcd60e51b815260206004820152602a60248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f732064697361626c6564000000000000000000000000000000000000000000006064820152608401610aca565b600d54156129bb5760006129a3611b34565b9050600d548111156129b9576129b960016130fa565b505b6009546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015612a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4f9190614177565b612ac15760405162461bcd60e51b815260206004820152603660248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f20746f6b656e207472616e73666572206661696c6564000000000000000000006064820152608401610aca565b6000612acc826125b4565b9050612ae483612adf6107ed85856125c7565b613362565b612aed826133e6565b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c83604051612b2891815260200190565b60405180910390a2505050565b600a546001600160a01b03838116911614612bd757600a54612b6390829084906001600160a01b0316612291565b612bd7576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401610aca565b6001600160a01b03808316600081815260126020526040812080549385166001600160a01b03199485161790556013805460018181018355919092527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0909091018054909316909117909155601454612c4e91612285565b601455604080516001600160a01b038085168252831660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f809101611271565b60095460165460405163095ea7b360e01b81526001600160a01b0391821660048201526000602482015291169063095ea7b3906044016020604051808303816000875af1158015612ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0a9190614177565b506016546015546009546040517f6382d9ad0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529082166024820152911690636382d9ad906044015b600060405180830381600087803b158015612d7957600080fd5b505af1158015611adc573d6000803e3d6000fd5b6000610a4482846142ef565b6000610a44828461430e565b60408051600180825281830190925260609160009190816020015b6040805180820190915260008082526020820152815260200190600190039081612dc0579050506016546015546040517f31d7a2620000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201529293506000929116906331d7a26290602401602060405180830381865afa158015612e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e769190614194565b905060405180604001604052807377777777777d4554c39223c354a05825b2e8faa36001600160a01b031681526020018281525082600081518110612ebd57612ebd6141ad565b602090810291909101015250919050565b600080612edb8585613465565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015612f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f43919061434e565b5091509150866001600160a01b0316836001600160a01b031614612f6357905b612f8e88836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613496565b98975050505050505050565b6000612fa461206a565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561304a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906130805750866001600160a01b0316816001600160a01b0316145b6130f15760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610aca565b50505050505050565b6131026134e4565b600061310c613531565b90508161318b57600c5481101561318b5760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360448201527f7420616d6f756e7420746f6f206c6f77000000000000000000000000000000006064820152608401610aca565b60006131a8612710611b2060115485612d8d90919063ffffffff16565b905080156131cd57600b54600a546131cd916001600160a01b039182169116836127d2565b60006131ea612710611b2060105486612d8d90919063ffffffff16565b9050801561320957600a54613209906001600160a01b031633836127d2565b60006132276132228361321c87876125c7565b906125c7565b61376d565b9050613232816133e6565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461325b61104b565b6002546040805192835260208301919091520160405180910390a15050505050565b60006132d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661380e9092919063ffffffff16565b80519091501561283957808060200190518101906132f09190614177565b6128395760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610aca565b60025461336f9082612285565b6002556001600160a01b0382166000908152600460205260409020546133959082612285565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906129089085815260200190565b6000811161345c5760405162461bcd60e51b815260206004820152602d60248201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160448201527f6d6f756e7420746f6f206c6f77000000000000000000000000000000000000006064820152608401610aca565b611aec8161381d565b600080826001600160a01b0316846001600160a01b03161061348857828461348b565b83835b915091509250929050565b6000806134a5856103e5612d8d565b905060006134b38285612d8d565b905060006134cd836134c7886103e8612d8d565b90612285565b90506134d98282612d99565b979650505050505050565b6016546015546040517fd279c1910000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015291169063d279c19190602401612d5f565b6040516370a0823160e01b8152306004820152600090819073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190602401602060405180830381865afa158015613585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135a99190614194565b60135490915060005b81811015613765576000601382815481106135cf576135cf6141ad565b6000918252602090912001546001600160a01b031690507fffffffffffffffffffffffff4ce09955c3e187ac9c0f78a5e48b1d847a0299398101613699574780156136925773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561366357600080fd5b505af1158015613677573d6000803e3d6000fd5b505050505061368f818661228590919063ffffffff16565b94505b5050613753565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156136e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137049190614194565b90508015613750576001600160a01b0380831660009081526012602052604090205416801561374e57600a5461374b90611d7a90849086906001600160a01b0316856138c2565b95505b505b50505b8061375d816141f0565b9150506135b2565b509092915050565b600a546009546040805160c08101909152601780546000946109619487946001600160a01b03928316949190921692829060ff1660058111156137b2576137b261439e565b60058111156137c3576137c361439e565b815281546001600160a01b036101009091048116602083015260018301548116604083015260028301541660608201526003820154608082015260049091015460a090910152613a5d565b606061249e8484600085613d55565b60165460095461383a916001600160a01b039182169116836127d2565b6016546015546009546040517f8340f5490000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216602482015260448101849052911690638340f54990606401600060405180830381600087803b1580156138ae57600080fd5b505af1158015610c70573d6000803e3d6000fd5b6000806138cf8585613465565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613913573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613937919061434e565b5091509150866001600160a01b0316836001600160a01b03161461395757905b6000806139858a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613496565b9050886001600160a01b0316856001600160a01b0316146139a257905b6139b66001600160a01b038a16888c6127d2565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f90613a0e90859085903090602481016143b4565b600060405180830381600087803b158015613a2857600080fd5b505af1158015613a3c573d6000803e3d6000fd5b50505050818111613a4d5781613a4f565b805b9a9950505050505050505050565b600081604001516001600160a01b0316846001600160a01b031614613a9357613a908585846040015185602001516138c2565b94505b600060405180606001604052806000815260200160008152602001600081525090508581846080015160038110613acc57613acc6141ad565b602002015260608301516040517f3883e1190000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690633883e11990613b2090859060019060040161440f565b602060405180830381865afa158015613b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b619190614194565b90506000613b82612710611b208760a0015185612d8d90919063ffffffff16565b6040868101516060880151915163095ea7b360e01b81526001600160a01b039283166004820152602481018c9052929350169063095ea7b3906044016020604051808303816000875af1158015613bdd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c019190614177565b5060608501516001600160a01b0316634515cef384613c2085856125c7565b6040518363ffffffff1660e01b8152600401613c3d92919061442c565b600060405180830381600087803b158015613c5757600080fd5b505af1158015613c6b573d6000803e3d6000fd5b5050506040808701516060880151915163095ea7b360e01b81526001600160a01b039283166004820152600060248201529116915063095ea7b3906044016020604051808303816000875af1158015613cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cec9190614177565b506040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa158015613d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8e9190614194565b606082471015613dcd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610aca565b6001600160a01b0385163b613e245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610aca565b600080866001600160a01b03168587604051613e409190614447565b60006040518083038185875af1925050503d8060008114613e7d576040519150601f19603f3d011682016040523d82523d6000602084013e613e82565b606091505b50915091506134d982828660608315613e9c575081610a44565b825115613eac5782518084602001fd5b8160405162461bcd60e51b8152600401610aca9190613f1e565b60005b83811015613ee1578181015183820152602001613ec9565b83811115611adc5750506000910152565b60008151808452613f0a816020860160208601613ec6565b601f01601f19169290920160200192915050565b602081526000610a446020830184613ef2565b6001600160a01b0381168114611aec57600080fd5b60008060408385031215613f5957600080fd5b8235613f6481613f31565b946020939093013593505050565b600060208284031215613f8457600080fd5b5035919050565b600080600060608486031215613fa057600080fd5b8335613fab81613f31565b92506020840135613fbb81613f31565b929592945050506040919091013590565b60008060408385031215613fdf57600080fd5b8235613fea81613f31565b91506020830135613ffa81613f31565b809150509250929050565b60006020828403121561401757600080fd5b8135610a4481613f31565b803560ff8116811461403357600080fd5b919050565b600080600080600060a0868803121561405057600080fd5b853594506020860135935061406760408701614022565b94979396509394606081013594506080013592915050565b8015158114611aec57600080fd5b60006020828403121561409f57600080fd5b8135610a448161407f565b600080604083850312156140bd57600080fd5b823591506020830135613ffa8161407f565b600080600080600080600060e0888a0312156140ea57600080fd5b87356140f581613f31565b9650602088013561410581613f31565b9550604088013594506060880135935061412160808901614022565b925060a0880135915060c0880135905092959891949750929550565b600181811c9082168061415157607f821691505b60208210810361417157634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561418957600080fd5b8151610a448161407f565b6000602082840312156141a657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156141eb576141eb6141c3565b500390565b600060018201614202576142026141c3565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600080835481600182811c91508083168061423b57607f831692505b6020808410820361425a57634e487b7160e01b86526022600452602486fd5b81801561426e576001811461427f576142ac565b60ff198616895284890196506142ac565b60008a81526020902060005b868110156142a45781548b82015290850190830161428b565b505084890196505b509498975050505050505050565b600082198211156142cd576142cd6141c3565b500190565b6000602082840312156142e457600080fd5b8151610a4481613f31565b6000816000190483118215151615614309576143096141c3565b500290565b60008261432b57634e487b7160e01b600052601260045260246000fd5b500490565b80516dffffffffffffffffffffffffffff8116811461403357600080fd5b60008060006060848603121561436357600080fd5b61436c84614330565b925061437a60208501614330565b9150604084015163ffffffff8116811461439357600080fd5b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b8481528360208201526001600160a01b03831660408201526080606082015260006143e26080830184613ef2565b9695505050505050565b8060005b6003811015611adc5781518452602093840193909101906001016143f0565b6080810161441d82856143ec565b82151560608301529392505050565b6080810161443a82856143ec565b8260608301529392505050565b60008251614459818460208701613ec6565b919091019291505056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212207198b6dd0cc2f48bb1c5392fa044e8e7f0b7a8519990201cc29a70928b9b4b2f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of tokens to deposit",
          "_deadline": "The time at which to expire the signature",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens after withdraw fee"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Deprecated; Kept for compatibility",
        "params": {
          "newValue": "fee in BIPS; required to be 0"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance after withdraw fee"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 556,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 559,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 564,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 570,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 574,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 590,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7409,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7522,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7526,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1965,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)4869"
      },
      {
        "astId": 1968,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)4869"
      },
      {
        "astId": 1970,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "devAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1972,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1974,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1976,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1978,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1980,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1982,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 11319,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "rewardSwapPairs",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11322,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "supportedRewards",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11324,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "rewardCount",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 48670,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "stakingContract",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 48673,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "proxy",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IYetiVoterProxy)49821"
      },
      {
        "astId": 48676,
        "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
        "label": "zapSettings",
        "offset": 0,
        "slot": "23",
        "type": "t_struct(Settings)28916_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4869": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IYetiVoterProxy)49821": {
        "encoding": "inplace",
        "label": "contract IYetiVoterProxy",
        "numberOfBytes": "20"
      },
      "t_enum(PoolType)28902": {
        "encoding": "inplace",
        "label": "enum CurveSwap.PoolType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Settings)28916_storage": {
        "encoding": "inplace",
        "label": "struct CurveSwap.Settings",
        "members": [
          {
            "astId": 28905,
            "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
            "label": "poolType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(PoolType)28902"
          },
          {
            "astId": 28907,
            "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
            "label": "swapPairRewardZap",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 28909,
            "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
            "label": "zapToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 28911,
            "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
            "label": "zapContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 28913,
            "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
            "label": "zapTokenIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 28915,
            "contract": "contracts/strategies/yeti/YetiStrategyForLP.sol:YetiStrategyForLP",
            "label": "maxSlippage",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}