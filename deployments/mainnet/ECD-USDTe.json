{
  "address": "0xD57dDbCFD0EdeC396009C4e891bc84210Aa23F8D",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "swapPairDepositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stakingContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "platypusPool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "boosterFeeCollector",
              "type": "address"
            }
          ],
          "internalType": "struct EchidnaStrategy.EchidnaStrategySettings",
          "name": "_echidnaStrategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "platformToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "reward",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "swapPair",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "swapFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct VariableRewardsStrategy.RewardSwapPair[]",
              "name": "rewardSwapPairs",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "timelock",
              "type": "address"
            }
          ],
          "internalType": "struct VariableRewardsStrategy.VariableRewardsStrategySettings",
          "name": "_variableRewardsStrategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakStrategyV2.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "AddReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RemoveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapFee",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterFeeCollector",
      "outputs": [
        {
          "internalType": "contract IBoosterFeeCollector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "echidnaBooster",
      "outputs": [
        {
          "internalType": "contract IEchidnaBooster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platypusAsset",
      "outputs": [
        {
          "internalType": "contract IPlatypusAsset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platypusPool",
      "outputs": [
        {
          "internalType": "contract IPlatypusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSwapPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collector",
          "type": "address"
        }
      ],
      "name": "updateBoosterFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3862f3722b7f46a395f0293e3a4fe754531820ee691f28466c857fa67e439b37",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xD57dDbCFD0EdeC396009C4e891bc84210Aa23F8D",
    "transactionIndex": 2,
    "gasUsed": "5518398",
    "logsBloom": "0x
    "blockHash": "0x38a4deb029d511caa39bf6df03a7ba0b77b660754e15e45c8af0d0d7972cc1e8",
    "transactionHash": "0x3862f3722b7f46a395f0293e3a4fe754531820ee691f28466c857fa67e439b37",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 22417965,
        "transactionHash": "0x3862f3722b7f46a395f0293e3a4fe754531820ee691f28466c857fa67e439b37",
        "address": "0xD57dDbCFD0EdeC396009C4e891bc84210Aa23F8D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x38a4deb029d511caa39bf6df03a7ba0b77b660754e15e45c8af0d0d7972cc1e8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 22417965,
        "transactionHash": "0x3862f3722b7f46a395f0293e3a4fe754531820ee691f28466c857fa67e439b37",
        "address": "0xD57dDbCFD0EdeC396009C4e891bc84210Aa23F8D",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc10000",
        "logIndex": 2,
        "blockHash": "0x38a4deb029d511caa39bf6df03a7ba0b77b660754e15e45c8af0d0d7972cc1e8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 22417965,
        "transactionHash": "0x3862f3722b7f46a395f0293e3a4fe754531820ee691f28466c857fa67e439b37",
        "address": "0xD57dDbCFD0EdeC396009C4e891bc84210Aa23F8D",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f4",
        "logIndex": 3,
        "blockHash": "0x38a4deb029d511caa39bf6df03a7ba0b77b660754e15e45c8af0d0d7972cc1e8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 22417965,
        "transactionHash": "0x3862f3722b7f46a395f0293e3a4fe754531820ee691f28466c857fa67e439b37",
        "address": "0xD57dDbCFD0EdeC396009C4e891bc84210Aa23F8D",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f4",
        "logIndex": 4,
        "blockHash": "0x38a4deb029d511caa39bf6df03a7ba0b77b660754e15e45c8af0d0d7972cc1e8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 22417965,
        "transactionHash": "0x3862f3722b7f46a395f0293e3a4fe754531820ee691f28466c857fa67e439b37",
        "address": "0xD57dDbCFD0EdeC396009C4e891bc84210Aa23F8D",
        "topics": [
          "0x916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80"
        ],
        "data": "0x00000000000000000000000022d4002028f537599be9f666d1c4fa138522f9c8000000000000000000000000cdfd91eea657cc2701117fe9711c9a4f61feed23",
        "logIndex": 5,
        "blockHash": "0x38a4deb029d511caa39bf6df03a7ba0b77b660754e15e45c8af0d0d7972cc1e8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 22417965,
        "transactionHash": "0x3862f3722b7f46a395f0293e3a4fe754531820ee691f28466c857fa67e439b37",
        "address": "0xD57dDbCFD0EdeC396009C4e891bc84210Aa23F8D",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 6,
        "blockHash": "0x38a4deb029d511caa39bf6df03a7ba0b77b660754e15e45c8af0d0d7972cc1e8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 22417965,
        "transactionHash": "0x3862f3722b7f46a395f0293e3a4fe754531820ee691f28466c857fa67e439b37",
        "address": "0xD57dDbCFD0EdeC396009C4e891bc84210Aa23F8D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x38a4deb029d511caa39bf6df03a7ba0b77b660754e15e45c8af0d0d7972cc1e8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 22417965,
        "transactionHash": "0x3862f3722b7f46a395f0293e3a4fe754531820ee691f28466c857fa67e439b37",
        "address": "0xD57dDbCFD0EdeC396009C4e891bc84210Aa23F8D",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0x38a4deb029d511caa39bf6df03a7ba0b77b660754e15e45c8af0d0d7972cc1e8"
      }
    ],
    "blockNumber": 22417965,
    "cumulativeGasUsed": "5594050",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "swapPairDepositToken": "0xed8cbd9f0ce3c6986b22002f03c6475ceb7a6256",
      "stakingContract": "0x1c898b4e77843aa3057d69350cd147c4ffdef93f",
      "platypusPool": "0x66357dcace80431aee0a7507e2e361b7e2402370",
      "pid": "0",
      "boosterFeeCollector": "0x0000000000000000000000000000000000000000"
    },
    {
      "name": "Yield Yak: Echidna USDT.e",
      "platformToken": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      "rewardSwapPairs": [
        {
          "reward": "0x22d4002028f537599be9f666d1c4fa138522f9c8",
          "swapPair": "0xcdfd91eea657cc2701117fe9711c9a4f61feed23",
          "swapFee": 3
        }
      ],
      "timelock": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
    },
    {
      "depositToken": "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
      "rewardToken": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
      "minTokensToReinvest": "10000000000000000",
      "devFeeBips": 500,
      "reinvestRewardBips": 500
    }
  ],
  "solcInputHash": "1c24251dfa716e6751d1e49418dc4abb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"swapPairDepositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"platypusPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"boosterFeeCollector\",\"type\":\"address\"}],\"internalType\":\"struct EchidnaStrategy.EchidnaStrategySettings\",\"name\":\"_echidnaStrategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"platformToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"internalType\":\"struct VariableRewardsStrategy.RewardSwapPair[]\",\"name\":\"rewardSwapPairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"timelock\",\"type\":\"address\"}],\"internalType\":\"struct VariableRewardsStrategy.VariableRewardsStrategySettings\",\"name\":\"_variableRewardsStrategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct YakStrategyV2.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterFeeCollector\",\"outputs\":[{\"internalType\":\"contract IBoosterFeeCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"echidnaBooster\",\"outputs\":[{\"internalType\":\"contract IEchidnaBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platypusAsset\",\"outputs\":[{\"internalType\":\"contract IPlatypusAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platypusPool\",\"outputs\":[{\"internalType\":\"contract IPlatypusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSwapPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"updateBoosterFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\",\"_deadline\":\"The time at which to expire the signature\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens after withdraw fee\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Deprecated; Kept for compatibility\",\"params\":{\"newValue\":\"fee in BIPS; required to be 0\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens available to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance after withdraw fee\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/avalanche/echidna/EchidnaStrategy.sol\":\"EchidnaStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => mapping(address => uint256)) internal allowances;\\n    mapping(address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance - amount;\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from] - value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        require(value > 0, \\\"_mint::zero shares\\\");\\n        totalSupply = totalSupply + value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from] - value;\\n        totalSupply = totalSupply - value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(\\n        address signer,\\n        bytes32 encodeData,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), encodeData));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x893040cb129e3428494993115424a9e7549ae5935e80b3c406ee672d7199aa70\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    struct StrategySettings {\\n        address depositToken;\\n        address rewardToken;\\n        uint256 minTokensToReinvest;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    IERC20 public immutable depositToken;\\n    IERC20 public immutable rewardToken;\\n    address public devAddr;\\n\\n    uint256 public MIN_TOKENS_TO_REINVEST;\\n    uint256 public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint256 public ADMIN_FEE_BIPS;\\n    uint256 public REINVEST_REWARD_BIPS;\\n    uint256 public DEV_FEE_BIPS;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    uint256 internal constant MAX_UINT = type(uint256).max;\\n\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdraw(address indexed account, uint256 amount);\\n    event Reinvest(uint256 newTotalDeposits, uint256 newTotalSupply);\\n    event Recovered(address token, uint256 amount);\\n    event UpdateAdminFee(uint256 oldValue, uint256 newValue);\\n    event UpdateDevFee(uint256 oldValue, uint256 newValue);\\n    event UpdateReinvestReward(uint256 oldValue, uint256 newValue);\\n    event UpdateMinTokensToReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(StrategySettings memory _strategySettings) {\\n        depositToken = IERC20(_strategySettings.depositToken);\\n        rewardToken = IERC20(_strategySettings.rewardToken);\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256) {\\n        uint256 unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return (unclaimedRewards * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens available to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount) public view returns (uint256) {\\n        if (totalSupply * totalDeposits() == 0) {\\n            return amount;\\n        }\\n        return (amount * totalSupply) / totalDeposits();\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount) public view returns (uint256) {\\n        if (totalSupply * totalDeposits() == 0) {\\n            return 0;\\n        }\\n        return (amount * totalDeposits()) / totalSupply;\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @dev Deprecated; Kept for compatibility\\n     * @param newValue fee in BIPS; required to be 0\\n     */\\n    function updateAdminFee(uint256 newValue) public onlyOwner {\\n        require(newValue == 0);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint256 newValue) public onlyOwner {\\n        require(newValue + REINVEST_REWARD_BIPS <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint256 newValue) public onlyOwner {\\n        require(newValue + DEV_FEE_BIPS <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        payable(msg.sender).transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd81622143ac9fbf9feb936cb9615ea9000fbb1a788935371d32185995c188037\",\"license\":\"MIT\"},\"contracts/interfaces/IBoosterFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IBoosterFeeCollector {\\n    function setBoostFee(address _strategy, uint256 _boostFeeBips) external;\\n\\n    function setPaused(bool _paused) external;\\n\\n    function calculateBoostFee(address _strategy, uint256 _amount) external view returns (uint256);\\n\\n    function compound() external;\\n\\n    function sweepTokens(address tokenAddress, uint256 tokenAmount) external;\\n}\\n\",\"keccak256\":\"0xeaf13b67e84ac2ff52be07b92515fe4f4826c0558a5aac20ee812d0c7090b220\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xdb4adbfe678b51139c50ca81931c58e0ce6aef9bc85195bf5dee3444aa9a2410\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7770575951dbb745d5ba319363b64dd1165d9a6380e685f1e8aff5cf1ca2c608\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    bytes private constant zeroBytes = new bytes(0);\\n    uint256 public constant DEFAULT_SWAP_FEE = 3;\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair\\n    ) internal returns (uint256) {\\n        return DexLibrary.swap(amountIn, fromToken, toToken, pair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair,\\n        uint256 swapFee\\n    ) internal returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint256 amountOut1 = 0;\\n        uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(\\n        IPair pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (bool) {\\n        return\\n            (tokenA == pair.token0() || tokenA == pair.token1()) &&\\n            (tokenB == pair.token0() || tokenB == pair.token1()) &&\\n            tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair\\n    ) internal view returns (uint256) {\\n        return DexLibrary.estimateConversionThroughPair(amountIn, fromToken, toToken, swapPair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair,\\n        uint256 swapFee\\n    ) internal view returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        IPair swapPairToken1\\n    ) internal returns (uint256) {\\n        return\\n            DexLibrary.convertRewardTokensToDepositTokens(\\n                amount,\\n                rewardToken,\\n                depositToken,\\n                swapPairToken0,\\n                DEFAULT_SWAP_FEE,\\n                swapPairToken1,\\n                DEFAULT_SWAP_FEE\\n            );\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        uint256 swapFeeToken0,\\n        IPair swapPairToken1,\\n        uint256 swapFeeToken1\\n    ) internal returns (uint256) {\\n        uint256 amountIn = amount / 2;\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint256 amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0, swapFeeToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint256 amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1, swapFeeToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(\\n        address depositToken,\\n        uint256 maxAmountIn0,\\n        uint256 maxAmountIn1\\n    ) internal returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = IPair(address(depositToken)).getReserves();\\n        uint256 amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        IERC20(IPair(depositToken).token0()).safeTransfer(depositToken, maxAmountIn0);\\n        IERC20(IPair(depositToken).token1()).safeTransfer(depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(\\n        uint256 amountIn,\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) private pure returns (uint256) {\\n        return (amountIn * reserve1) / reserve0;\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn * (1000 - swapFee);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        return numerator / denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x31b27ccfab77d853af5f76d5a061ccec7e0791f087df4c755a84cb9317f25d5f\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    uint256 public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors + 1;\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors - 1;\\n        emit RemoveDepositor(depositor);\\n    }\\n}\\n\",\"keccak256\":\"0x32e276794130901e0464470794d697dfa8dcec1d2d1377a7422303dff8753aa5\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/strategies/VariableRewardsStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../YakStrategyV2.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\n/**\\n * @notice VariableRewardsStrategy\\n */\\nabstract contract VariableRewardsStrategy is YakStrategyV2 {\\n    using SafeERC20 for IERC20;\\n\\n    IWAVAX internal immutable WAVAX;\\n\\n    struct VariableRewardsStrategySettings {\\n        string name;\\n        address platformToken;\\n        RewardSwapPair[] rewardSwapPairs;\\n        address timelock;\\n    }\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    struct RewardSwapPair {\\n        address reward;\\n        address swapPair;\\n        uint256 swapFee;\\n    }\\n\\n    // reward -> swapPair\\n    mapping(address => RewardSwapPair) public rewardSwapPairs;\\n    address[] public supportedRewards;\\n    uint256 public rewardCount;\\n\\n    event AddReward(address rewardToken, address swapPair);\\n    event RemoveReward(address rewardToken);\\n\\n    constructor(VariableRewardsStrategySettings memory _settings, StrategySettings memory _strategySettings)\\n        YakStrategyV2(_strategySettings)\\n    {\\n        name = _settings.name;\\n        WAVAX = IWAVAX(_settings.platformToken);\\n        devAddr = 0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF;\\n\\n        for (uint256 i = 0; i < _settings.rewardSwapPairs.length; i++) {\\n            _addReward(\\n                _settings.rewardSwapPairs[i].reward,\\n                _settings.rewardSwapPairs[i].swapPair,\\n                _settings.rewardSwapPairs[i].swapFee\\n            );\\n        }\\n\\n        updateDepositsEnabled(true);\\n        transferOwnership(_settings.timelock);\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function addReward(address _rewardToken, address _swapPair) public onlyDev {\\n        _addReward(_rewardToken, _swapPair, DexLibrary.DEFAULT_SWAP_FEE);\\n    }\\n\\n    function addReward(\\n        address _rewardToken,\\n        address _swapPair,\\n        uint256 _swapFee\\n    ) public onlyDev {\\n        _addReward(_rewardToken, _swapPair, _swapFee);\\n    }\\n\\n    function _addReward(\\n        address _rewardToken,\\n        address _swapPair,\\n        uint256 _swapFee\\n    ) internal {\\n        if (_rewardToken != address(rewardToken)) {\\n            require(\\n                DexLibrary.checkSwapPairCompatibility(IPair(_swapPair), _rewardToken, address(rewardToken)),\\n                \\\"VariableRewardsStrategy::Swap pair does not contain reward token\\\"\\n            );\\n        }\\n        rewardSwapPairs[_rewardToken] = RewardSwapPair({reward: _rewardToken, swapPair: _swapPair, swapFee: _swapFee});\\n        supportedRewards.push(_rewardToken);\\n        rewardCount = rewardCount + 1;\\n        emit AddReward(_rewardToken, _swapPair);\\n    }\\n\\n    function removeReward(address _rewardToken) public onlyDev {\\n        delete rewardSwapPairs[_rewardToken];\\n        bool found = false;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n                supportedRewards[i] = supportedRewards[supportedRewards.length - 1];\\n            }\\n        }\\n        require(found, \\\"VariableRewardsStrategy::Reward to delete not found!\\\");\\n        supportedRewards.pop();\\n        rewardCount = rewardCount - 1;\\n        emit RemoveReward(_rewardToken);\\n    }\\n\\n    function calculateDepositFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateDepositFee(_amount);\\n    }\\n\\n    function calculateWithdrawFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateWithdrawFee(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param _amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param _amount Amount of tokens to deposit\\n     * @param _deadline The time at which to expire the signature\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _account, uint256 _amount) external override {\\n        _deposit(_account, _amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"VariableRewardsStrategy::Deposits disabled\\\");\\n        uint256 maxPendingRewards = MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n        if (maxPendingRewards > 0) {\\n            uint256 estimatedTotalReward = checkReward();\\n            if (estimatedTotalReward > maxPendingRewards) {\\n                _reinvest(true);\\n            }\\n        }\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), _amount),\\n            \\\"VariableRewardsStrategy::Deposit token transfer failed\\\"\\n        );\\n        uint256 depositFee = _calculateDepositFee(_amount);\\n        _mint(_account, getSharesForDepositTokens(_amount - depositFee));\\n        _stakeDepositTokens(_amount, depositFee);\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     */\\n    function _getDepositFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit fee of underlying farm\\n     * @dev Override if deposit fee is calculated dynamically\\n     */\\n    function _calculateDepositFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 depositFeeBips = _getDepositFeeBips();\\n        return (_amount * depositFeeBips) / _bip();\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(_amount);\\n        require(depositTokenAmount > 0, \\\"VariableRewardsStrategy::Withdraw amount too low\\\");\\n        uint256 withdrawAmount = _withdrawFromStakingContract(depositTokenAmount);\\n        uint256 withdrawFee = _calculateWithdrawFee(depositTokenAmount);\\n        depositToken.safeTransfer(msg.sender, withdrawAmount - withdrawFee);\\n        _burn(msg.sender, _amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _getWithdrawFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee of underlying farm\\n     * @dev Override if withdraw fee is calculated dynamically\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _calculateWithdrawFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips();\\n        return (_amount * withdrawFeeBips) / _bip();\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        _reinvest(false);\\n    }\\n\\n    function _convertPoolRewardsToRewardToken() private returns (uint256) {\\n        uint256 rewardTokenAmount = rewardToken.balanceOf(address(this));\\n        uint256 count = supportedRewards.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            address reward = supportedRewards[i];\\n            if (reward == address(WAVAX)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    WAVAX.deposit{value: balance}();\\n                }\\n                if (address(rewardToken) == address(WAVAX)) {\\n                    rewardTokenAmount += balance;\\n                    continue;\\n                }\\n            }\\n            uint256 amount = IERC20(reward).balanceOf(address(this));\\n            if (amount > 0) {\\n                address swapPair = rewardSwapPairs[reward].swapPair;\\n                if (swapPair > address(0)) {\\n                    rewardTokenAmount += DexLibrary.swap(\\n                        amount,\\n                        reward,\\n                        address(rewardToken),\\n                        IPair(swapPair),\\n                        rewardSwapPairs[reward].swapFee\\n                    );\\n                }\\n            }\\n        }\\n        return rewardTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from the staking contract\\n     */\\n    function _reinvest(bool userDeposit) private {\\n        _getRewards();\\n        uint256 amount = _convertPoolRewardsToRewardToken();\\n        if (!userDeposit) {\\n            require(amount >= MIN_TOKENS_TO_REINVEST, \\\"VariableRewardsStrategy::Reinvest amount too low\\\");\\n        }\\n\\n        uint256 devFee = (amount * DEV_FEE_BIPS) / BIPS_DIVISOR;\\n        if (devFee > 0) {\\n            rewardToken.safeTransfer(devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = (amount * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        if (reinvestFee > 0) {\\n            rewardToken.safeTransfer(msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount - devFee - reinvestFee);\\n\\n        uint256 depositFee = _calculateDepositFee(depositTokenAmount);\\n        _stakeDepositTokens(depositTokenAmount, depositFee);\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _stakeDepositTokens(uint256 _amount, uint256 _depositFee) private {\\n        require(_amount > 0, \\\"VariableRewardsStrategy::Stake amount too low\\\");\\n        _depositToStakingContract(_amount, _depositFee);\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        Reward[] memory rewards = _pendingRewards();\\n        uint256 estimatedTotalReward = rewardToken.balanceOf(address(this));\\n        if (address(rewardToken) == address(WAVAX)) {\\n            estimatedTotalReward += address(this).balance;\\n        }\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            if (reward == address(rewardToken)) {\\n                estimatedTotalReward += rewards[i].amount;\\n            } else if (reward > address(0)) {\\n                uint256 balance = IERC20(reward).balanceOf(address(this));\\n                uint256 amount = balance + rewards[i].amount;\\n                address swapPair = rewardSwapPairs[rewards[i].reward].swapPair;\\n                if (amount > 0 && swapPair > address(0)) {\\n                    estimatedTotalReward += DexLibrary.estimateConversionThroughPair(\\n                        amount,\\n                        reward,\\n                        address(rewardToken),\\n                        IPair(swapPair),\\n                        rewardSwapPairs[rewards[i].reward].swapFee\\n                    );\\n                }\\n            }\\n        }\\n        return estimatedTotalReward;\\n    }\\n\\n    /**\\n     * @notice Estimate recoverable balance after withdraw fee\\n     * @return deposit tokens after withdraw fee\\n     */\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        uint256 depositBalance = totalDeposits();\\n        uint256 withdrawFee = _calculateWithdrawFee(depositBalance);\\n        return depositBalance - withdrawFee;\\n    }\\n\\n    function rescueDeployedFunds(\\n        uint256 _minReturnAmountAccepted,\\n        bool /*_disableDeposits*/\\n    ) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw();\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter - balanceBefore >= _minReturnAmountAccepted,\\n            \\\"VariableRewardsStrategy::Emergency withdraw minimum return amount not reached\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n\\n    function _bip() internal view virtual returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal virtual returns (uint256 toAmount);\\n\\n    function _depositToStakingContract(uint256 _amount, uint256 _depositFee) internal virtual;\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal virtual returns (uint256 withdrawAmount);\\n\\n    function _emergencyWithdraw() internal virtual;\\n\\n    function _getRewards() internal virtual;\\n\\n    function _pendingRewards() internal view virtual returns (Reward[] memory);\\n}\\n\",\"keccak256\":\"0xf2b96ab7c00955580f0d2732c2a191b5d77a23c41483b5a0e6251b8772ce5dd2\",\"license\":\"MIT\"},\"contracts/strategies/VariableRewardsStrategyForSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"./VariableRewardsStrategy.sol\\\";\\n\\n/**\\n * @notice Adapter strategy for VariableRewardsStrategy with SA deposit.\\n */\\nabstract contract VariableRewardsStrategyForSA is VariableRewardsStrategy {\\n    address private immutable swapPairDepositToken;\\n\\n    constructor(\\n        address _swapPairDepositToken,\\n        VariableRewardsStrategySettings memory _settings,\\n        StrategySettings memory _strategySettings\\n    ) VariableRewardsStrategy(_settings, _strategySettings) {\\n        swapPairDepositToken = _swapPairDepositToken;\\n        assignSwapPairSafely(_swapPairDepositToken);\\n    }\\n\\n    function assignSwapPairSafely(address _swapPairDepositToken) internal virtual {\\n        if (address(rewardToken) != address(depositToken)) {\\n            require(\\n                DexLibrary.checkSwapPairCompatibility(\\n                    IPair(_swapPairDepositToken),\\n                    address(depositToken),\\n                    address(rewardToken)\\n                ),\\n                \\\"VariableRewardsStrategyForSA::swapPairDepositToken does not match deposit and reward token\\\"\\n            );\\n        }\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount)\\n        internal\\n        virtual\\n        override\\n        returns (uint256 toAmount)\\n    {\\n        if (address(rewardToken) == address(depositToken)) {\\n            return fromAmount;\\n        }\\n        return DexLibrary.swap(fromAmount, address(rewardToken), address(depositToken), IPair(swapPairDepositToken));\\n    }\\n}\\n\",\"keccak256\":\"0x33d40f18299c62c462f8448e33bcc07202f18c125808bffa598eab6e77f687a3\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/echidna/EchidnaStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../../VariableRewardsStrategyForSA.sol\\\";\\nimport \\\"../../../interfaces/IBoosterFeeCollector.sol\\\";\\n\\nimport \\\"../platypus/lib/PlatypusLibrary.sol\\\";\\n\\nimport \\\"./interfaces/IEchidnaBooster.sol\\\";\\nimport \\\"./interfaces/IEchidnaRewardPool.sol\\\";\\n\\ncontract EchidnaStrategy is VariableRewardsStrategyForSA {\\n    using SafeERC20 for IERC20;\\n\\n    struct EchidnaStrategySettings {\\n        address swapPairDepositToken;\\n        address stakingContract;\\n        address platypusPool;\\n        uint256 pid;\\n        address boosterFeeCollector;\\n    }\\n\\n    IERC20 private constant PTP = IERC20(0x22d4002028f537599bE9f666d1c4Fa138522f9c8);\\n\\n    uint256 public immutable PID;\\n\\n    IEchidnaBooster public immutable echidnaBooster;\\n    IPlatypusPool public immutable platypusPool;\\n    IPlatypusAsset public immutable platypusAsset;\\n    IBoosterFeeCollector public boosterFeeCollector;\\n\\n    constructor(\\n        EchidnaStrategySettings memory _echidnaStrategySettings,\\n        VariableRewardsStrategySettings memory _variableRewardsStrategySettings,\\n        StrategySettings memory _strategySettings\\n    )\\n        VariableRewardsStrategyForSA(\\n            _echidnaStrategySettings.swapPairDepositToken,\\n            _variableRewardsStrategySettings,\\n            _strategySettings\\n        )\\n    {\\n        PID = _echidnaStrategySettings.pid;\\n        platypusPool = IPlatypusPool(_echidnaStrategySettings.platypusPool);\\n        echidnaBooster = IEchidnaBooster(_echidnaStrategySettings.stakingContract);\\n        platypusAsset = IPlatypusAsset(\\n            IPlatypusPool(_echidnaStrategySettings.platypusPool).assetOf(_strategySettings.depositToken)\\n        );\\n        boosterFeeCollector = IBoosterFeeCollector(_echidnaStrategySettings.boosterFeeCollector);\\n    }\\n\\n    function updateBoosterFeeCollector(address _collector) public onlyOwner {\\n        boosterFeeCollector = IBoosterFeeCollector(_collector);\\n    }\\n\\n    function _depositToStakingContract(uint256 _amount, uint256) internal override {\\n        uint256 depositFee = _calculateDepositFee(_amount);\\n        uint256 liquidity = PlatypusLibrary.depositTokenToAsset(address(platypusAsset), _amount, depositFee);\\n        depositToken.approve(address(platypusPool), _amount);\\n        platypusPool.deposit(address(depositToken), _amount, address(this), type(uint256).max);\\n        depositToken.approve(address(platypusPool), 0);\\n        IERC20(address(platypusAsset)).approve(address(echidnaBooster), liquidity);\\n        echidnaBooster.deposit(PID, liquidity, false, type(uint256).max);\\n        IERC20(address(platypusAsset)).approve(address(echidnaBooster), 0);\\n    }\\n\\n    function _calculateDepositFee(uint256 amount) internal view override returns (uint256) {\\n        return PlatypusLibrary.calculateDepositFee(address(platypusPool), address(platypusAsset), amount);\\n    }\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal override returns (uint256 _withdrawAmount) {\\n        uint256 lpBalance = _echidnaRewardPool().balanceOf(address(this));\\n        uint256 liquidity = (_amount * lpBalance) / totalDeposits();\\n        liquidity = liquidity > lpBalance ? lpBalance : liquidity;\\n        echidnaBooster.withdraw(PID, liquidity, false, false, 0, type(uint256).max);\\n\\n        (uint256 expectedAmount, , ) = platypusPool.quotePotentialWithdraw(address(depositToken), liquidity);\\n        IERC20(address(platypusAsset)).approve(address(platypusPool), liquidity);\\n        _withdrawAmount = platypusPool.withdraw(\\n            address(depositToken),\\n            liquidity,\\n            expectedAmount,\\n            address(this),\\n            type(uint256).max\\n        );\\n        IERC20(address(platypusAsset)).approve(address(platypusPool), 0);\\n    }\\n\\n    function _emergencyWithdraw() internal override {\\n        depositToken.approve(address(echidnaBooster), 0);\\n        uint256 lpBalance = _echidnaRewardPool().balanceOf(address(this));\\n        echidnaBooster.withdraw(PID, lpBalance, false, false, 0, type(uint256).max);\\n    }\\n\\n    function _pendingRewards() internal view override returns (Reward[] memory) {\\n        IEchidnaRewardPool echidnaRewardPool = _echidnaRewardPool();\\n        uint256 rewardCount = echidnaRewardPool.extraRewardsLength() + 1;\\n        Reward[] memory pendingRewards = new Reward[](rewardCount);\\n        (uint256 pendingPTP, uint256 boostFee) = _pendingPTP();\\n        pendingRewards[0] = Reward({reward: address(PTP), amount: pendingPTP - boostFee});\\n        for (uint256 i = 1; i < rewardCount; i++) {\\n            IEchidnaRewardPool extraRewardPool = IEchidnaRewardPool(echidnaRewardPool.extraRewards(i - 1));\\n            pendingRewards[i] = Reward({\\n                reward: extraRewardPool.rewardToken(),\\n                amount: extraRewardPool.earned(address(this))\\n            });\\n        }\\n        return pendingRewards;\\n    }\\n\\n    function _getRewards() internal override {\\n        (, uint256 boostFee) = _pendingPTP();\\n        _echidnaRewardPool().getReward(address(this), true);\\n        PTP.safeTransfer(address(boosterFeeCollector), boostFee);\\n    }\\n\\n    function _pendingPTP() internal view returns (uint256 _ptpAmount, uint256 _boostFee) {\\n        _ptpAmount = _echidnaRewardPool().earned(address(this));\\n        _boostFee = boosterFeeCollector.calculateBoostFee(address(this), _ptpAmount);\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        uint256 assetBalance = _echidnaRewardPool().balanceOf(address(this));\\n        if (assetBalance == 0) return 0;\\n        (uint256 depositTokenBalance, uint256 fee, bool enoughCash) = platypusPool.quotePotentialWithdraw(\\n            address(depositToken),\\n            assetBalance\\n        );\\n        require(enoughCash, \\\"EchidnaStrategy::This shouldn't happen\\\");\\n        return depositTokenBalance + fee;\\n    }\\n\\n    function _echidnaRewardPool() internal view returns (IEchidnaRewardPool) {\\n        (, , , address rewardPool, , ) = IEchidnaBooster(address(echidnaBooster)).pools(PID);\\n        return IEchidnaRewardPool(rewardPool);\\n    }\\n}\\n\",\"keccak256\":\"0xe041ea508fed8dde7b0b596fce0a2e3f2ec3d7ca9c1802b185e5075da5dfb8f6\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/echidna/interfaces/IEchidnaBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IEchidnaBooster {\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _depositToPlatypus,\\n        uint256 _deadline\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _claim,\\n        bool unwrap,\\n        uint256 minOut,\\n        uint256 deadline\\n    ) external;\\n\\n    function withdrawAll(\\n        uint256 _pid,\\n        bool _claim,\\n        bool _unwrap,\\n        uint256 _slippage\\n    ) external;\\n\\n    function pools(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address _pool,\\n            address _token,\\n            address _lpToken,\\n            address _rewardPool,\\n            bool _shutdown,\\n            address _legacyRewardPool\\n        );\\n\\n    function masterPlatypus() external view returns (address);\\n\\n    function claimRewards(uint256[] calldata _pids) external;\\n}\\n\",\"keccak256\":\"0x38c7c9a0b17b967dc5a7703d9711a05ff71d0d0d63dd69d6718e26493060aea9\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/echidna/interfaces/IEchidnaRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IEchidnaRewardPool {\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    function stake(address _account, uint256 _amount) external returns (bool);\\n\\n    function unStake(\\n        address _account,\\n        uint256 _amount,\\n        bool _claim\\n    ) external returns (bool);\\n\\n    function earned(address _account) external view returns (uint256);\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256 index) external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4abd4fd452b723db46611f9784da85bb3ed59f11dde9ff8e3f5768ab3fc1df0b\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusAsset {\\n    function cash() external view returns (uint256);\\n\\n    function liability() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbbf22f57ab3ede7d0ba9e0b4167fc8be9f1268ab15ccd26cd3cc1e7a9cf9da5d\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusPool {\\n    function assetOf(address token) external view returns (address);\\n\\n    function deposit(\\n        address to,\\n        uint256 amount,\\n        address token,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function getHaircutRate() external view returns (uint256);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function getC1() external view returns (uint256);\\n\\n    function getXThreshold() external view returns (uint256);\\n\\n    function getSlippageParamK() external view returns (uint256);\\n\\n    function getSlippageParamN() external view returns (uint256);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x5405c6d461a84e54d1844d3b7ccd92b189ca1720a250894047d831f7afd6479a\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/lib/DSMath.sol\":{\"content\":\"/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10**18;\\n    uint256 public constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    function reciprocal(uint256 x) internal pure returns (uint256) {\\n        return wdiv(WAD, x);\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = ((x * y) + (RAY / 2)) / RAY;\\n    }\\n}\\n\",\"keccak256\":\"0x3992388a4d916d259545c6a39b22a8ccac1e503e843c4b2e10726c1dceb0d9c6\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/lib/PlatypusLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./DSMath.sol\\\";\\nimport \\\"../interfaces/IPlatypusPool.sol\\\";\\nimport \\\"../interfaces/IPlatypusAsset.sol\\\";\\n\\nlibrary PlatypusLibrary {\\n    using DSMath for uint256;\\n\\n    uint256 internal constant WAD = 10**18;\\n    uint256 internal constant RAY = 10**27;\\n\\n    function calculateDepositFee(\\n        address pool,\\n        address asset,\\n        uint256 amount\\n    ) internal view returns (uint256 fee) {\\n        return\\n            _depositFee(\\n                IPlatypusPool(pool).getSlippageParamK(),\\n                IPlatypusPool(pool).getSlippageParamN(),\\n                IPlatypusPool(pool).getC1(),\\n                IPlatypusPool(pool).getXThreshold(),\\n                IPlatypusAsset(asset).cash(),\\n                IPlatypusAsset(asset).liability(),\\n                amount\\n            );\\n    }\\n\\n    function _depositFee(\\n        uint256 k,\\n        uint256 n,\\n        uint256 c1,\\n        uint256 xThreshold,\\n        uint256 cash,\\n        uint256 liability,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        // cover case where the asset has no liquidity yet\\n        if (liability == 0) {\\n            return 0;\\n        }\\n\\n        uint256 covBefore = cash.wdiv(liability);\\n        if (covBefore <= WAD) {\\n            return 0;\\n        }\\n\\n        uint256 covAfter = (cash + amount).wdiv(liability + amount);\\n        uint256 slippageBefore = _slippageFunc(k, n, c1, xThreshold, covBefore);\\n        uint256 slippageAfter = _slippageFunc(k, n, c1, xThreshold, covAfter);\\n\\n        // (Li + Di) * g(cov_after) - Li * g(cov_before)\\n        return ((liability + amount).wmul(slippageAfter)) - (liability.wmul(slippageBefore));\\n    }\\n\\n    function _slippageFunc(\\n        uint256 k,\\n        uint256 n,\\n        uint256 c1,\\n        uint256 xThreshold,\\n        uint256 x\\n    ) internal pure returns (uint256) {\\n        if (x < xThreshold) {\\n            return c1 - x;\\n        } else {\\n            return k.wdiv((((x * RAY) / WAD).rpow(n) * WAD) / RAY); // k / (x ** n)\\n        }\\n    }\\n\\n    function depositTokenToAsset(\\n        address asset,\\n        uint256 amount,\\n        uint256 depositFee\\n    ) internal view returns (uint256 liquidity) {\\n        if (IPlatypusAsset(asset).liability() == 0) {\\n            liquidity = amount - depositFee;\\n        } else {\\n            liquidity =\\n                ((amount - depositFee) * IPlatypusAsset(asset).totalSupply()) /\\n                IPlatypusAsset(asset).liability();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x796d5feb4c2c9de735fac6745e0357c392c5ac24e64340f08951965128b2ca35\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c06040526009610180819052685969656c642059616b60b81b6101a09081526200002f916000919062000b81565b506040805180820190915260038082526216549560ea1b60209092019182526200005c9160019162000b81565b503480156200006a57600080fd5b5060405162006e6138038062006e618339810160408190526200008d9162000f47565b82518282818180600033600680546001600160a01b0319166001600160a01b0383169081179091556040519192509060009060008051602062006e41833981519152908290a35080516001600160a01b0390811660805260208201511660a0526040810151620000fd906200034c565b60608101516200010d90620003dc565b60808101516200011d9062000487565b5081518051620001369160009160209091019062000b81565b5060208201516001600160a01b031660c052600980546001600160a01b031916732d580f9cf2fb2d09bc411532988f2afda4e7beff17905560005b8260400151518110156200021357620001fe836040015182815181106200019c576200019c6200100f565b60200260200101516000015184604001518381518110620001c157620001c16200100f565b60200260200101516020015185604001518481518110620001e657620001e66200100f565b6020026020010151604001516200053260201b60201c565b806200020a816200103b565b91505062000171565b50620002206001620006de565b6060820151620002309062000788565b60408051600080825260208201527fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234910160405180910390a150506001600160a01b03831660e052620002838362000885565b505050606083015161010052604080840180516001600160a01b039081166101405260208601518116610120529051835192516371f9621160e01b8152928216600484015216906371f9621190602401602060405180830381865afa158015620002f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000317919062001057565b6001600160a01b039081166101605260809390930151601380546001600160a01b031916919094161790925550620010d39050565b6006546001600160a01b031633146200039b5760405162461bcd60e51b8152602060048201819052602482015260008051602062006e2183398151915260448201526064015b60405180910390fd5b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b03163314620004275760405162461bcd60e51b8152602060048201819052602482015260008051602062006e21833981519152604482015260640162000392565b612710600e54826200043a91906200107c565b11156200044657600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6006546001600160a01b03163314620004d25760405162461bcd60e51b8152602060048201819052602482015260008051602062006e21833981519152604482015260640162000392565b612710600f5482620004e591906200107c565b1115620004f157600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b60a0516001600160a01b0316836001600160a01b031614620005de5762000568828460a0516200095c60201b620027421760201c565b620005de576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e606482015260840162000392565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c689093018054909216909217905560125462000693916200107c565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b6006546001600160a01b03163314620007295760405162461bcd60e51b8152602060048201819052602482015260008051602062006e21833981519152604482015260640162000392565b600c5481151560ff9091161515036200074157600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859060200160405180910390a150565b6006546001600160a01b03163314620007d35760405162461bcd60e51b8152602060048201819052602482015260008051602062006e21833981519152604482015260640162000392565b6001600160a01b0381166200083a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000392565b6006546040516001600160a01b0380841692169060008051602062006e4183398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6080516001600160a01b031660a0516001600160a01b0316146200095957620008bf8160805160a0516200095c60201b620027421760201c565b620009595760405162461bcd60e51b815260206004820152605a60248201527f5661726961626c65526577617264735374726174656779466f7253413a3a737760448201527f6170506169724465706f736974546f6b656e20646f6573206e6f74206d61746360648201527f68206465706f73697420616e642072657761726420746f6b656e000000000000608482015260a40162000392565b50565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200099d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c3919062001057565b6001600160a01b0316836001600160a01b0316148062000a585750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a1d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a43919062001057565b6001600160a01b0316836001600160a01b0316145b801562000b5a5750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ac5919062001057565b6001600160a01b0316826001600160a01b0316148062000b5a5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b1f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b45919062001057565b6001600160a01b0316826001600160a01b0316145b801562000b795750816001600160a01b0316836001600160a01b031614155b949350505050565b82805462000b8f9062001097565b90600052602060002090601f01602090048101928262000bb3576000855562000bfe565b82601f1062000bce57805160ff191683800117855562000bfe565b8280016001018555821562000bfe579182015b8281111562000bfe57825182559160200191906001019062000be1565b5062000c0c92915062000c10565b5090565b5b8082111562000c0c576000815560010162000c11565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000c625762000c6262000c27565b60405290565b604051608081016001600160401b038111828210171562000c625762000c6262000c27565b60405160a081016001600160401b038111828210171562000c625762000c6262000c27565b604051601f8201601f191681016001600160401b038111828210171562000cdd5762000cdd62000c27565b604052919050565b80516001600160a01b038116811462000cfd57600080fd5b919050565b600082601f83011262000d1457600080fd5b815160206001600160401b0382111562000d325762000d3262000c27565b62000d42818360051b0162000cb2565b8281526060928302850182019282820191908785111562000d6257600080fd5b8387015b8581101562000dc05781818a03121562000d805760008081fd5b62000d8a62000c3d565b62000d958262000ce5565b815262000da486830162000ce5565b8187015260408281015190820152845292840192810162000d66565b5090979650505050505050565b60006080828403121562000de057600080fd5b62000dea62000c68565b82519091506001600160401b038082111562000e0557600080fd5b818401915084601f83011262000e1a57600080fd5b81518181111562000e2f5762000e2f62000c27565b602062000e45601f8301601f1916820162000cb2565b828152878284870101111562000e5a57600080fd5b60005b8381101562000e7a57858101830151828201840152820162000e5d565b8381111562000e8c5760008385840101525b50855262000e9c86820162000ce5565b9085015250604084015191508082111562000eb657600080fd5b5062000ec58482850162000d02565b60408301525062000ed96060830162000ce5565b606082015292915050565b600060a0828403121562000ef757600080fd5b62000f0162000c8d565b905062000f0e8262000ce5565b815262000f1e6020830162000ce5565b602082015260408201516040820152606082015160608201526080820151608082015292915050565b600080600083850361016081121562000f5f57600080fd5b60a081121562000f6e57600080fd5b5062000f7962000c8d565b62000f848562000ce5565b815262000f946020860162000ce5565b602082015262000fa76040860162000ce5565b60408201526060850151606082015262000fc46080860162000ce5565b608082015260a08501519093506001600160401b0381111562000fe657600080fd5b62000ff48682870162000dcd565b925050620010068560c0860162000ee4565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162001050576200105062001025565b5060010190565b6000602082840312156200106a57600080fd5b620010758262000ce5565b9392505050565b6000821982111562001092576200109262001025565b500190565b600181811c90821680620010ac57607f821691505b602082108103620010cd57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516101405161016051615b60620012c16000396000818161061301528181612bcb01528181612e5501528181612fef01528181614a8e01528181614d420152614ebc01526000818161077c0152818161133601528181612baa01528181612d9e01528181612e2301528181612f3901528181612fbd01528181614acb01528181614bda0152614c5f0152600081816108a901528181612cf2015281816135c301528181613651015281816137be01528181614d1301528181614e140152614e8d01526000818161064301528181612ca501528181613590015281816137710152614dd801526000614991015260008181611f4d015281816146c2015281816146f101526147660152600081816109eb01528181611ede01528181611f7701528181611fe10152818161215a01528181613394015281816133d201528181613dfd01528181613e5801528181614616015281816147900152818161487001528181614918015261494f0152600081816108d801528181610c7e01528181610daf0152818161130001528181611c5201528181611ce701528181612d6b01528181612ef50152818161324301528181613680015281816148ee0152818161497001528181614afd01528181614b9d0152614c8e0152615b606000f3fe608060405234801561001057600080fd5b50600436106104215760003560e01c80638980f11f11610235578063bd079f5511610135578063dd62ed3e116100c8578063eab89a5a11610097578063f2fde38b1161007c578063f2fde38b146109d3578063f7c618c1146109e6578063fdb5a03e14610a0d57600080fd5b8063eab89a5a146109b8578063ed24911d146109cb57600080fd5b8063dd62ed3e14610946578063dd8ce4d61461097f578063e21ac82514610992578063e75ab045146109a557600080fd5b8063cff1b6ef11610104578063cff1b6ef146108fa578063d0ed26ae1461090d578063d505accf14610920578063da09c72c1461093357600080fd5b8063bd079f551461089b578063c1d8a4c5146108a4578063c4b24a46146108cb578063c89039c5146108d357600080fd5b80639e4e7318116101c8578063a9059cbb11610197578063b52a321f1161017c578063b52a321f14610873578063b6b55f2514610880578063b9e57b801461089357600080fd5b8063a9059cbb1461084d578063ac0d31ff1461086057600080fd5b80639e4e73181461079e578063a4d5e67c146107c5578063a5534e71146107d8578063a8ae2b7c1461083a57600080fd5b80639291d563116102045780639291d5631461074957806395d89b411461075c57806399729ec1146107645780639a222a891461077757600080fd5b80638980f11f146107095780638aff733d1461071c5780638b73e606146107255780638da5cb5b1461073857600080fd5b8063483c2ef0116103405780636c8b4b52116102d357806379085425116102a25780637d882097116102875780637d882097146106ce5780637ecebe00146106d657806381837230146106f657600080fd5b806379085425146106b25780637ae26773146106bb57600080fd5b80636c8b4b521461066557806370a0823114610678578063715018a6146106a1578063789139bc146106a957600080fd5b80634ebb79161161030f5780634ebb7916146105fb578063588220001461060e5780635ea682ea146106355780635eaec0e41461063e57600080fd5b8063483c2ef01461059f5780634a970be7146105c25780634bebd1e7146105d55780634e77ace5146105e857600080fd5b806323b872dd116103b857806330adf81f1161038757806330adf81f14610542578063313ce567146105695780633bdc6e721461058357806340b47e1a1461058c57600080fd5b806323b872dd146104f4578063247d284b146105075780632e1a7d4d1461051a5780632f4f21e21461052f57600080fd5b80630fccc400116103f45780630fccc4001461048657806311056035146104b157806318160ddd146104c457806320606b70146104cd57600080fd5b806306fdde03146104265780630767711114610444578063095ea7b31461045b5780630f23475d1461047e575b600080fd5b61042e610a15565b60405161043b919061554f565b60405180910390f35b61044d600d5481565b60405190815260200161043b565b61046e610469366004615577565b610aa3565b604051901515815260200161043b565b61044d610aba565b601354610499906001600160a01b031681565b6040516001600160a01b03909116815260200161043b565b61044d6104bf3660046155a3565b610ae5565b61044d60025481565b61044d7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b61046e6105023660046155bc565b610af0565b61044d6105153660046155a3565b610bb9565b61052d6105283660046155a3565b610bc4565b005b61052d61053d366004615577565b610ceb565b61044d7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610571601281565b60405160ff909116815260200161043b565b61044d60075481565b61052d61059a3660046155fd565b610cf9565b61046e6105ad366004615636565b60086020526000908152604090205460ff1681565b61052d6105d0366004615669565b610d56565b61052d6105e3366004615636565b610e24565b61052d6105f63660046156be565b610f41565b61052d6106093660046155a3565b610fe8565b6104997f000000000000000000000000000000000000000000000000000000000000000081565b61044d600f5481565b61044d7f000000000000000000000000000000000000000000000000000000000000000081565b61052d610673366004615636565b6110a2565b61044d610686366004615636565b6001600160a01b031660009081526004602052604090205490565b61052d61110c565b61044d600b5481565b61044d60125481565b61052d6106c93660046155fd565b61119e565b61044d611262565b61044d6106e4366004615636565b60056020526000908152604090205481565b61052d6107043660046155a3565b61142f565b61052d610717366004615577565b6114b8565b61044d600e5481565b61052d610733366004615636565b6115ce565b6006546001600160a01b0316610499565b61052d610757366004615636565b61178a565b61042e611844565b61052d6107723660046155a3565b611851565b6104997f000000000000000000000000000000000000000000000000000000000000000081565b61044d7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b61052d6107d3366004615636565b6118f6565b6108146107e6366004615636565b6010602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b0394851681529390921660208401529082015260600161043b565b61052d6108483660046155a3565b611b40565b61046e61085b366004615577565b611be5565b61052d61086e3660046156db565b611bf2565b600c5461046e9060ff1681565b61052d61088e3660046155a3565b611e64565b61044d611e71565b61044d600a5481565b6104997f000000000000000000000000000000000000000000000000000000000000000081565b61044d611eb0565b6104997f000000000000000000000000000000000000000000000000000000000000000081565b61052d6109083660046155a3565b6121f0565b61052d61091b3660046155bc565b612284565b61052d61092e366004615700565b6122e5565b600954610499906001600160a01b031681565b61044d6109543660046155fd565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61044d61098d3660046155a3565b6123f8565b61052d6109a03660046155a3565b612439565b6104996109b33660046155a3565b6124c2565b61044d6109c63660046155a3565b6124ec565b61044d612527565b61052d6109e1366004615636565b6125c7565b6104997f000000000000000000000000000000000000000000000000000000000000000081565b61052d6126e7565b60008054610a229061576e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4e9061576e565b8015610a9b5780601f10610a7057610100808354040283529160200191610a9b565b820191906000526020600020905b815481529060010190602001808311610a7e57829003601f168201915b505050505081565b6000610ab0338484612957565b5060015b92915050565b600080610ac5611262565b90506000610ad282612a65565b9050610ade81836157be565b9250505090565b6000610ab482612a65565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610b2a57506000198114155b15610ba0576000610b3b85836157be565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610bab868686612a7f565b6001925050505b9392505050565b6000610ab482612ba3565b6000610bcf826124ec565b905060008111610c4c5760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5769746864726160448201527f7720616d6f756e7420746f6f206c6f770000000000000000000000000000000060648201526084015b60405180910390fd5b6000610c5782612bf0565b90506000610c6483612a65565b9050610ca533610c7483856157be565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190613067565b610caf33856130ce565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250505050565b610cf58282613162565b5050565b6009546001600160a01b03163314610d4a5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610c43565b610cf582826003613392565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610dfb57600080fd5b505af1158015610e0f573d6000803e3d6000fd5b50505050610e1d3386613162565b5050505050565b6006546001600160a01b03163314610e6c5760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6001600160a01b03811660009081526008602052604090205460ff1615610ed55760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610c43565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610f07916157d5565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b03163314610f895760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b600c5481151560ff909116151503610fa057600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b031633146110305760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6000811161103d57600080fd5b604051339082156108fc029083906000818181858888f1935050505015801561106a573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610fdd565b6006546001600160a01b031633146110ea5760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146111545760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031633146111e65760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125991906157ed565b610cf557600080fd5b60008061126d613568565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d7919061580a565b9050806000036112e957600091505090565b60405163907448ed60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063907448ed90604401606060405180830381865afa15801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a39190615823565b9250925092508061141c5760405162461bcd60e51b815260206004820152602660248201527f45636869646e6153747261746567793a3a546869732073686f756c646e27742060448201527f68617070656e00000000000000000000000000000000000000000000000000006064820152608401610c43565b61142682846157d5565b94505050505090565b6006546001600160a01b031633146114775760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b031633146115005760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6000811161150d57600080fd5b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e91906157ed565b61158757600080fd5b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b031633146116165760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b60006007541161168e5760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610c43565b6001600160a01b03811660009081526008602052604090205460ff1615156001146117215760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610c43565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611750906001906157be565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6009546001600160a01b031633146117db5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610c43565b600954604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600980546001600160a01b0319166001600160a01b0392909216919091179055565b60018054610a229061576e565b6006546001600160a01b031633146118995760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b612710600e54826118aa91906157d5565b11156118b557600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6009546001600160a01b031633146119475760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610c43565b6001600160a01b038116600090815260106020526040812080546001600160a01b031990811682556001820180549091169055600201819055805b601154811015611a4e576011818154811061199f5761199f61585c565b6000918252602090912001546001600160a01b0390811690841603611a3c5760118054600193506119d19084906157be565b815481106119e1576119e161585c565b600091825260209091200154601180546001600160a01b039092169183908110611a0d57611a0d61585c565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80611a4681615872565b915050611982565b5080611ac25760405162461bcd60e51b815260206004820152603460248201527f5661726961626c655265776172647353747261746567793a3a5265776172642060448201527f746f2064656c657465206e6f7420666f756e64210000000000000000000000006064820152608401610c43565b6011805480611ad357611ad361588b565b600082815260209020810160001990810180546001600160a01b0319169055019055601254611b04906001906157be565b6012556040516001600160a01b03831681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc906020016115c2565b6006546001600160a01b03163314611b885760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b612710600f5482611b9991906157d5565b1115611ba457600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b6000610ab0338484612a7f565b6006546001600160a01b03163314611c3a5760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc5919061580a565b9050611ccf61363a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5a919061580a565b905083611d6783836157be565b1015611e015760405162461bcd60e51b815260206004820152604d60248201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60448201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60648201527f74206e6f74207265616368656400000000000000000000000000000000000000608482015260a401610c43565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611e2a611262565b6002546040805192835260208301919091520160405180910390a1600c5460ff161515600103611e5e57611e5e6000610f41565b50505050565b611e6e3382613162565b50565b600080611e7c611eb0565b9050600a548110611ea857612710600e5482611e9891906158a1565b611ea291906158d6565b91505090565b600091505090565b600080611ebb61381e565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f49919061580a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603611fb157611fae47826157d5565b90505b60005b82518110156121e9576000838281518110611fd157611fd161585c565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036120485783828151811061202a5761202a61585c565b6020026020010151602001518361204191906157d5565b92506121d6565b6001600160a01b038116156121d6576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561209e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c2919061580a565b905060008584815181106120d8576120d861585c565b602002602001015160200151826120ef91906157d5565b90506000601060008887815181106121095761210961585c565b602090810291909101810151516001600160a01b0390811683529082019290925260400160002060010154169050811580159061214e57506001600160a01b03811615155b156121d2576121c582857f000000000000000000000000000000000000000000000000000000000000000084601060008d8c815181106121905761219061585c565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060020154613b06565b6121cf90876157d5565b95505b5050505b50806121e181615872565b915050611fb4565b5092915050565b6006546001600160a01b031633146122385760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b801561224357600080fd5b600d5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600d55565b6009546001600160a01b031633146122d55760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610c43565b6122e0838383613392565b505050565b428410156123355760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610c43565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a91908661238283615872565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506123e38882868686613bd6565b6123ee888888612957565b5050505050505050565b6000612402611262565b60025461240f91906158a1565b60000361241a575090565b612422611262565b60025461242f90846158a1565b610ab491906158d6565b6006546001600160a01b031633146124815760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b600b5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600b55565b601181815481106124d257600080fd5b6000918252602090912001546001600160a01b0316905081565b60006124f6611262565b60025461250391906158a1565b60000361251257506000919050565b60025461251d611262565b61242f90846158a1565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161255c91906158ea565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b0316331461260f5760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6001600160a01b03811661268b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c43565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146127365760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610c43565b6127406000613d36565b565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a69190615985565b6001600160a01b0316836001600160a01b031614806128375750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128229190615985565b6001600160a01b0316836001600160a01b0316145b80156129315750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561287c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a09190615985565b6001600160a01b0316826001600160a01b031614806129315750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291c9190615985565b6001600160a01b0316826001600160a01b0316145b801561294f5750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b0383166129ad5760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610c43565b6001600160a01b038216612a035760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610c43565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080612710612a7582856158a1565b610bb291906158d6565b6001600160a01b038216612afb5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610c43565b6001600160a01b038316600090815260046020526040902054612b1f9082906157be565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612b4f9082906157d5565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612a589085815260200190565b6000610ab47f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084613f03565b600080612bfb613568565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015612c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c65919061580a565b90506000612c71611262565b612c7b83866158a1565b612c8591906158d6565b9050818111612c945780612c96565b815b604051630ab626ab60e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526024810182905260006044820181905260648201819052608482015260001960a48201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ab626ab09060c401600060405180830381600087803b158015612d3e57600080fd5b505af1158015612d52573d6000803e3d6000fd5b505060405163907448ed60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600093507f000000000000000000000000000000000000000000000000000000000000000016915063907448ed90604401606060405180830381865afa158015612de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0a9190615823565b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec491906157ed565b506040517f09a5fca30000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490526044820183905230606483015260001960848301527f000000000000000000000000000000000000000000000000000000000000000016906309a5fca39060a4016020604051808303816000875af1158015612f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa6919061580a565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301529195507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561303a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305e91906157ed565b50505050919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526122e090849061415a565b6001600160a01b0382166000908152600460205260409020546130f29082906157be565b6001600160a01b0383166000908152600460205260409020556002546131199082906157be565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600c5460ff1615156001146131df5760405162461bcd60e51b815260206004820152602a60248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f732064697361626c6564000000000000000000000000000000000000000000006064820152608401610c43565b600b5480156132085760006131f2611eb0565b905081811115613206576132066001613d36565b505b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015613294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b891906157ed565b61332a5760405162461bcd60e51b815260206004820152603660248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f20746f6b656e207472616e73666572206661696c6564000000000000000000006064820152608401610c43565b600061333583612ba3565b905061334d8461334861098d84876157be565b61423f565b6133578382614315565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610cdd91815260200190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461346a576133f682847f0000000000000000000000000000000000000000000000000000000000000000612742565b61346a576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401610c43565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c689093018054909216909217905560125461351d916157d5565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b6040517fac4afa380000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac4afa389060240160c060405180830381865afa15801561360a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362e91906159a2565b50909695505050505050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156136c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ed91906157ed565b5060006136f8613568565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561373e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613762919061580a565b604051630ab626ab60e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526024810182905260006044820181905260648201819052608482015260001960a48201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ab626ab09060c401600060405180830381600087803b15801561380a57600080fd5b505af1158015610e1d573d6000803e3d6000fd5b6060600061382a613568565b90506000816001600160a01b031663d55a23f46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561386c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613890919061580a565b61389b9060016157d5565b905060008167ffffffffffffffff8111156138b8576138b8615a29565b6040519080825280602002602001820160405280156138fd57816020015b60408051808201909152600080825260208201528152602001906001900390816138d65790505b50905060008061390b614395565b604080518082019091527322d4002028f537599be9f666d1c4fa138522f9c8815291935091506020810161393f83856157be565b815250836000815181106139555761395561585c565b602090810291909101015260015b84811015613afb5760006001600160a01b0387166340c354466139876001856157be565b6040518263ffffffff1660e01b81526004016139a591815260200190565b602060405180830381865afa1580156139c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e69190615985565b90506040518060400160405280826001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a559190615985565b6001600160a01b0390811682526040516246613160e11b815230600482015260209092019190841690628cc26290602401602060405180830381865afa158015613aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac7919061580a565b815250858381518110613adc57613adc61585c565b6020026020010181905250508080613af390615872565b915050613963565b509195945050505050565b600080613b13868661449b565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b7b9190615a5d565b5091509150876001600160a01b0316836001600160a01b031614613b9b57905b613bc789836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16886144cc565b93505050505b95945050505050565b6000613be0612527565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015613c86573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590613cbc5750866001600160a01b0316816001600160a01b0316145b613d2d5760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610c43565b50505050505050565b613d3e614526565b6000613d486145f4565b905081613dc757600a54811015613dc75760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360448201527f7420616d6f756e7420746f6f206c6f77000000000000000000000000000000006064820152608401610c43565b6000612710600f5483613dda91906158a1565b613de491906158d6565b90508015613e2657600954613e26906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613067565b6000612710600e5484613e3991906158a1565b613e4391906158d6565b90508015613e7f57613e7f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383613067565b6000613e9e82613e8f85876157be565b613e9991906157be565b6148ea565b90506000613eab82612ba3565b9050613eb78282614315565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234613ee0611262565b6002546040805192835260208301919091520160405180910390a1505050505050565b600061294f846001600160a01b03166355af008a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f6a919061580a565b856001600160a01b0316637727c6556040518163ffffffff1660e01b8152600401602060405180830381865afa158015613fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fcc919061580a565b866001600160a01b031663a76f54d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561400a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402e919061580a565b876001600160a01b0316637a1c36d16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561406c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614090919061580a565b876001600160a01b031663961be3916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140f2919061580a565b886001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015614130573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614154919061580a565b886149b5565b60006141af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614a6b9092919063ffffffff16565b8051909150156122e057808060200190518101906141cd91906157ed565b6122e05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c43565b6000811161428f5760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610c43565b8060025461429d91906157d5565b6002556001600160a01b0382166000908152600460205260409020546142c49082906157d5565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906131569085815260200190565b6000821161438b5760405162461bcd60e51b815260206004820152602d60248201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160448201527f6d6f756e7420746f6f206c6f77000000000000000000000000000000000000006064820152608401610c43565b610cf58282614a7a565b6000806143a0613568565b6040516246613160e11b81523060048201526001600160a01b039190911690628cc26290602401602060405180830381865afa1580156143e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614408919061580a565b6013546040517ff2daef2c000000000000000000000000000000000000000000000000000000008152306004820152602481018390529193506001600160a01b03169063f2daef2c90604401602060405180830381865afa158015614471573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614495919061580a565b90509091565b600080826001600160a01b0316846001600160a01b0316106144be5782846144c1565b83835b915091509250929050565b6000806144db836103e86157be565b6144e590876158a1565b905060006144f385836158a1565b9050600082614504886103e86158a1565b61450e91906157d5565b905061451a81836158d6565b98975050505050505050565b6000614530614395565b91505061453b613568565b6040517f7050ccd9000000000000000000000000000000000000000000000000000000008152306004820152600160248201526001600160a01b039190911690637050ccd9906044016020604051808303816000875af11580156145a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145c791906157ed565b50601354611e6e907322d4002028f537599be9f666d1c4fa138522f9c8906001600160a01b031683613067565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561465d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614681919061580a565b60115490915060005b818110156148e2576000601182815481106146a7576146a761585c565b6000918252602090912001546001600160a01b0390811691507f00000000000000000000000000000000000000000000000000000000000000001681036147d257478015614764577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561474a57600080fd5b505af115801561475e573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036147d0576147c781866157d5565b945050506148d0565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015614819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061483d919061580a565b905080156148cd576001600160a01b038083166000908152601060205260409020600101541680156148cb576148be82847f00000000000000000000000000000000000000000000000000000000000000008460106000896001600160a01b03166001600160a01b0316815260200190815260200160002060020154614f2b565b6148c890876157d5565b95505b505b50505b806148da81615872565b91505061468a565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603614949575090565b610ab4827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006150c8565b6000826000036149c757506000614a60565b60006149d385856150d8565b9050670de0b6b3a764000081116149ee576000915050614a60565b6000614a0d6149fd85876157d5565b614a0786896157d5565b906150d8565b90506000614a1e8b8b8b8b87615102565b90506000614a2f8c8c8c8c87615102565b9050614a3b8783615170565b614a4f82614a49898b6157d5565b90615170565b614a5991906157be565b9450505050505b979650505050505050565b606061294f8484600085615190565b6000614a8583612ba3565b90506000614ab47f000000000000000000000000000000000000000000000000000000000000000085846152cd565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015614b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b6c91906157ed565b506040517f90d250740000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905230604483015260001960648301527f000000000000000000000000000000000000000000000000000000000000000016906390d25074906084016020604051808303816000875af1158015614c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c47919061580a565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015614cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cfb91906157ed565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015614d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614daf91906157ed565b506040517ff1c583330000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290526000604482015260001960648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f1c5833390608401600060405180830381600087803b158015614e6057600080fd5b505af1158015614e74573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301527f000000000000000000000000000000000000000000000000000000000000000016925063095ea7b391506044016020604051808303816000875af1158015614f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1d91906157ed565b600080614f38868661449b565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015614f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fa09190615a5d565b5091509150876001600160a01b0316836001600160a01b031614614fc057905b600080614fef8b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff168a6144cc565b9050896001600160a01b0316856001600160a01b03161461500c57905b6150206001600160a01b038b16898d613067565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0389169063022c0d9f906150789085908590309060248101615aa2565b600060405180830381600087803b15801561509257600080fd5b505af11580156150a6573d6000803e3d6000fd5b505050508181116150b757816150b9565b805b9b9a5050505050505050505050565b6000613bcd858585856003614f2b565b6000816150e66002826158d6565b6150f8670de0b6b3a7640000866158a1565b612a7591906157d5565b60008282101561511d5761511682856157be565b9050613bcd565b6151166b033b2e3c9fd0803ce8000000670de0b6b3a7640000615155888261514585896158a1565b61514f91906158d6565b9061542b565b61515f91906158a1565b61516991906158d6565b87906150d8565b6000670de0b6b3a76400006151866002826158d6565b6150f884866158a1565b6060824710156152085760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c43565b6001600160a01b0385163b61525f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c43565b600080866001600160a01b0316858760405161527b9190615ada565b60006040518083038185875af1925050503d80600081146152b8576040519150601f19603f3d011682016040523d82523d6000602084013e6152bd565b606091505b5091509150614a608282866154a4565b6000836001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561530d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615331919061580a565b6000036153495761534282846157be565b9050610bb2565b836001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015615387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153ab919061580a565b846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156153e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061540d919061580a565b61541784866157be565b61542191906158a1565b61294f91906158d6565b6000615438600283615af6565b600003615451576b033b2e3c9fd0803ce8000000615453565b825b90506154606002836158d6565b91505b8115610ab45761547383846154dd565b9250615480600283615af6565b156154925761548f81846154dd565b90505b61549d6002836158d6565b9150615463565b606083156154b3575081610bb2565b8251156154c35782518084602001fd5b8160405162461bcd60e51b8152600401610c43919061554f565b60006b033b2e3c9fd0803ce80000006151866002826158d6565b60005b838110156155125781810151838201526020016154fa565b83811115611e5e5750506000910152565b6000815180845261553b8160208601602086016154f7565b601f01601f19169290920160200192915050565b602081526000610bb26020830184615523565b6001600160a01b0381168114611e6e57600080fd5b6000806040838503121561558a57600080fd5b823561559581615562565b946020939093013593505050565b6000602082840312156155b557600080fd5b5035919050565b6000806000606084860312156155d157600080fd5b83356155dc81615562565b925060208401356155ec81615562565b929592945050506040919091013590565b6000806040838503121561561057600080fd5b823561561b81615562565b9150602083013561562b81615562565b809150509250929050565b60006020828403121561564857600080fd5b8135610bb281615562565b803560ff8116811461566457600080fd5b919050565b600080600080600060a0868803121561568157600080fd5b853594506020860135935061569860408701615653565b94979396509394606081013594506080013592915050565b8015158114611e6e57600080fd5b6000602082840312156156d057600080fd5b8135610bb2816156b0565b600080604083850312156156ee57600080fd5b82359150602083013561562b816156b0565b600080600080600080600060e0888a03121561571b57600080fd5b873561572681615562565b9650602088013561573681615562565b9550604088013594506060880135935061575260808901615653565b925060a0880135915060c0880135905092959891949750929550565b600181811c9082168061578257607f821691505b6020821081036157a257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156157d0576157d06157a8565b500390565b600082198211156157e8576157e86157a8565b500190565b6000602082840312156157ff57600080fd5b8151610bb2816156b0565b60006020828403121561581c57600080fd5b5051919050565b60008060006060848603121561583857600080fd5b83519250602084015191506040840151615851816156b0565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b600060018201615884576158846157a8565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156158bb576158bb6157a8565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826158e5576158e56158c0565b500490565b600080835481600182811c91508083168061590657607f831692505b6020808410820361592557634e487b7160e01b86526022600452602486fd5b818015615939576001811461594a57615977565b60ff19861689528489019650615977565b60008a81526020902060005b8681101561596f5781548b820152908501908301615956565b505084890196505b509498975050505050505050565b60006020828403121561599757600080fd5b8151610bb281615562565b60008060008060008060c087890312156159bb57600080fd5b86516159c681615562565b60208801519096506159d781615562565b60408801519095506159e881615562565b60608801519094506159f981615562565b6080880151909350615a0a816156b0565b60a0880151909250615a1b81615562565b809150509295509295509295565b634e487b7160e01b600052604160045260246000fd5b80516dffffffffffffffffffffffffffff8116811461566457600080fd5b600080600060608486031215615a7257600080fd5b615a7b84615a3f565b9250615a8960208501615a3f565b9150604084015163ffffffff8116811461585157600080fd5b8481528360208201526001600160a01b0383166040820152608060608201526000615ad06080830184615523565b9695505050505050565b60008251615aec8184602087016154f7565b9190910192915050565b600082615b0557615b056158c0565b50069056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220debcd89de168b6a2a27a9b17305451933277a614d0a7e5bc6cd852b66806b19064736f6c634300080d00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104215760003560e01c80638980f11f11610235578063bd079f5511610135578063dd62ed3e116100c8578063eab89a5a11610097578063f2fde38b1161007c578063f2fde38b146109d3578063f7c618c1146109e6578063fdb5a03e14610a0d57600080fd5b8063eab89a5a146109b8578063ed24911d146109cb57600080fd5b8063dd62ed3e14610946578063dd8ce4d61461097f578063e21ac82514610992578063e75ab045146109a557600080fd5b8063cff1b6ef11610104578063cff1b6ef146108fa578063d0ed26ae1461090d578063d505accf14610920578063da09c72c1461093357600080fd5b8063bd079f551461089b578063c1d8a4c5146108a4578063c4b24a46146108cb578063c89039c5146108d357600080fd5b80639e4e7318116101c8578063a9059cbb11610197578063b52a321f1161017c578063b52a321f14610873578063b6b55f2514610880578063b9e57b801461089357600080fd5b8063a9059cbb1461084d578063ac0d31ff1461086057600080fd5b80639e4e73181461079e578063a4d5e67c146107c5578063a5534e71146107d8578063a8ae2b7c1461083a57600080fd5b80639291d563116102045780639291d5631461074957806395d89b411461075c57806399729ec1146107645780639a222a891461077757600080fd5b80638980f11f146107095780638aff733d1461071c5780638b73e606146107255780638da5cb5b1461073857600080fd5b8063483c2ef0116103405780636c8b4b52116102d357806379085425116102a25780637d882097116102875780637d882097146106ce5780637ecebe00146106d657806381837230146106f657600080fd5b806379085425146106b25780637ae26773146106bb57600080fd5b80636c8b4b521461066557806370a0823114610678578063715018a6146106a1578063789139bc146106a957600080fd5b80634ebb79161161030f5780634ebb7916146105fb578063588220001461060e5780635ea682ea146106355780635eaec0e41461063e57600080fd5b8063483c2ef01461059f5780634a970be7146105c25780634bebd1e7146105d55780634e77ace5146105e857600080fd5b806323b872dd116103b857806330adf81f1161038757806330adf81f14610542578063313ce567146105695780633bdc6e721461058357806340b47e1a1461058c57600080fd5b806323b872dd146104f4578063247d284b146105075780632e1a7d4d1461051a5780632f4f21e21461052f57600080fd5b80630fccc400116103f45780630fccc4001461048657806311056035146104b157806318160ddd146104c457806320606b70146104cd57600080fd5b806306fdde03146104265780630767711114610444578063095ea7b31461045b5780630f23475d1461047e575b600080fd5b61042e610a15565b60405161043b919061554f565b60405180910390f35b61044d600d5481565b60405190815260200161043b565b61046e610469366004615577565b610aa3565b604051901515815260200161043b565b61044d610aba565b601354610499906001600160a01b031681565b6040516001600160a01b03909116815260200161043b565b61044d6104bf3660046155a3565b610ae5565b61044d60025481565b61044d7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b61046e6105023660046155bc565b610af0565b61044d6105153660046155a3565b610bb9565b61052d6105283660046155a3565b610bc4565b005b61052d61053d366004615577565b610ceb565b61044d7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610571601281565b60405160ff909116815260200161043b565b61044d60075481565b61052d61059a3660046155fd565b610cf9565b61046e6105ad366004615636565b60086020526000908152604090205460ff1681565b61052d6105d0366004615669565b610d56565b61052d6105e3366004615636565b610e24565b61052d6105f63660046156be565b610f41565b61052d6106093660046155a3565b610fe8565b6104997f000000000000000000000000000000000000000000000000000000000000000081565b61044d600f5481565b61044d7f000000000000000000000000000000000000000000000000000000000000000081565b61052d610673366004615636565b6110a2565b61044d610686366004615636565b6001600160a01b031660009081526004602052604090205490565b61052d61110c565b61044d600b5481565b61044d60125481565b61052d6106c93660046155fd565b61119e565b61044d611262565b61044d6106e4366004615636565b60056020526000908152604090205481565b61052d6107043660046155a3565b61142f565b61052d610717366004615577565b6114b8565b61044d600e5481565b61052d610733366004615636565b6115ce565b6006546001600160a01b0316610499565b61052d610757366004615636565b61178a565b61042e611844565b61052d6107723660046155a3565b611851565b6104997f000000000000000000000000000000000000000000000000000000000000000081565b61044d7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b61052d6107d3366004615636565b6118f6565b6108146107e6366004615636565b6010602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b0394851681529390921660208401529082015260600161043b565b61052d6108483660046155a3565b611b40565b61046e61085b366004615577565b611be5565b61052d61086e3660046156db565b611bf2565b600c5461046e9060ff1681565b61052d61088e3660046155a3565b611e64565b61044d611e71565b61044d600a5481565b6104997f000000000000000000000000000000000000000000000000000000000000000081565b61044d611eb0565b6104997f000000000000000000000000000000000000000000000000000000000000000081565b61052d6109083660046155a3565b6121f0565b61052d61091b3660046155bc565b612284565b61052d61092e366004615700565b6122e5565b600954610499906001600160a01b031681565b61044d6109543660046155fd565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61044d61098d3660046155a3565b6123f8565b61052d6109a03660046155a3565b612439565b6104996109b33660046155a3565b6124c2565b61044d6109c63660046155a3565b6124ec565b61044d612527565b61052d6109e1366004615636565b6125c7565b6104997f000000000000000000000000000000000000000000000000000000000000000081565b61052d6126e7565b60008054610a229061576e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4e9061576e565b8015610a9b5780601f10610a7057610100808354040283529160200191610a9b565b820191906000526020600020905b815481529060010190602001808311610a7e57829003601f168201915b505050505081565b6000610ab0338484612957565b5060015b92915050565b600080610ac5611262565b90506000610ad282612a65565b9050610ade81836157be565b9250505090565b6000610ab482612a65565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610b2a57506000198114155b15610ba0576000610b3b85836157be565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610bab868686612a7f565b6001925050505b9392505050565b6000610ab482612ba3565b6000610bcf826124ec565b905060008111610c4c5760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5769746864726160448201527f7720616d6f756e7420746f6f206c6f770000000000000000000000000000000060648201526084015b60405180910390fd5b6000610c5782612bf0565b90506000610c6483612a65565b9050610ca533610c7483856157be565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190613067565b610caf33856130ce565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250505050565b610cf58282613162565b5050565b6009546001600160a01b03163314610d4a5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610c43565b610cf582826003613392565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610dfb57600080fd5b505af1158015610e0f573d6000803e3d6000fd5b50505050610e1d3386613162565b5050505050565b6006546001600160a01b03163314610e6c5760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6001600160a01b03811660009081526008602052604090205460ff1615610ed55760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610c43565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610f07916157d5565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b03163314610f895760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b600c5481151560ff909116151503610fa057600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b031633146110305760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6000811161103d57600080fd5b604051339082156108fc029083906000818181858888f1935050505015801561106a573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610fdd565b6006546001600160a01b031633146110ea5760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146111545760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031633146111e65760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611235573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125991906157ed565b610cf557600080fd5b60008061126d613568565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d7919061580a565b9050806000036112e957600091505090565b60405163907448ed60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201839052600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063907448ed90604401606060405180830381865afa15801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a39190615823565b9250925092508061141c5760405162461bcd60e51b815260206004820152602660248201527f45636869646e6153747261746567793a3a546869732073686f756c646e27742060448201527f68617070656e00000000000000000000000000000000000000000000000000006064820152608401610c43565b61142682846157d5565b94505050505090565b6006546001600160a01b031633146114775760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b031633146115005760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6000811161150d57600080fd5b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af115801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e91906157ed565b61158757600080fd5b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b031633146116165760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b60006007541161168e5760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610c43565b6001600160a01b03811660009081526008602052604090205460ff1615156001146117215760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610c43565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611750906001906157be565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6009546001600160a01b031633146117db5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610c43565b600954604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600980546001600160a01b0319166001600160a01b0392909216919091179055565b60018054610a229061576e565b6006546001600160a01b031633146118995760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b612710600e54826118aa91906157d5565b11156118b557600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6009546001600160a01b031633146119475760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610c43565b6001600160a01b038116600090815260106020526040812080546001600160a01b031990811682556001820180549091169055600201819055805b601154811015611a4e576011818154811061199f5761199f61585c565b6000918252602090912001546001600160a01b0390811690841603611a3c5760118054600193506119d19084906157be565b815481106119e1576119e161585c565b600091825260209091200154601180546001600160a01b039092169183908110611a0d57611a0d61585c565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80611a4681615872565b915050611982565b5080611ac25760405162461bcd60e51b815260206004820152603460248201527f5661726961626c655265776172647353747261746567793a3a5265776172642060448201527f746f2064656c657465206e6f7420666f756e64210000000000000000000000006064820152608401610c43565b6011805480611ad357611ad361588b565b600082815260209020810160001990810180546001600160a01b0319169055019055601254611b04906001906157be565b6012556040516001600160a01b03831681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc906020016115c2565b6006546001600160a01b03163314611b885760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b612710600f5482611b9991906157d5565b1115611ba457600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b6000610ab0338484612a7f565b6006546001600160a01b03163314611c3a5760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc5919061580a565b9050611ccf61363a565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5a919061580a565b905083611d6783836157be565b1015611e015760405162461bcd60e51b815260206004820152604d60248201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60448201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60648201527f74206e6f74207265616368656400000000000000000000000000000000000000608482015260a401610c43565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611e2a611262565b6002546040805192835260208301919091520160405180910390a1600c5460ff161515600103611e5e57611e5e6000610f41565b50505050565b611e6e3382613162565b50565b600080611e7c611eb0565b9050600a548110611ea857612710600e5482611e9891906158a1565b611ea291906158d6565b91505090565b600091505090565b600080611ebb61381e565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f49919061580a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603611fb157611fae47826157d5565b90505b60005b82518110156121e9576000838281518110611fd157611fd161585c565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036120485783828151811061202a5761202a61585c565b6020026020010151602001518361204191906157d5565b92506121d6565b6001600160a01b038116156121d6576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561209e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c2919061580a565b905060008584815181106120d8576120d861585c565b602002602001015160200151826120ef91906157d5565b90506000601060008887815181106121095761210961585c565b602090810291909101810151516001600160a01b0390811683529082019290925260400160002060010154169050811580159061214e57506001600160a01b03811615155b156121d2576121c582857f000000000000000000000000000000000000000000000000000000000000000084601060008d8c815181106121905761219061585c565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060020154613b06565b6121cf90876157d5565b95505b5050505b50806121e181615872565b915050611fb4565b5092915050565b6006546001600160a01b031633146122385760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b801561224357600080fd5b600d5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600d55565b6009546001600160a01b031633146122d55760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610c43565b6122e0838383613392565b505050565b428410156123355760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610c43565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a91908661238283615872565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506123e38882868686613bd6565b6123ee888888612957565b5050505050505050565b6000612402611262565b60025461240f91906158a1565b60000361241a575090565b612422611262565b60025461242f90846158a1565b610ab491906158d6565b6006546001600160a01b031633146124815760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b600b5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600b55565b601181815481106124d257600080fd5b6000918252602090912001546001600160a01b0316905081565b60006124f6611262565b60025461250391906158a1565b60000361251257506000919050565b60025461251d611262565b61242f90846158a1565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161255c91906158ea565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b0316331461260f5760405162461bcd60e51b81526020600482018190526024820152600080516020615b0b8339815191526044820152606401610c43565b6001600160a01b03811661268b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c43565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146127365760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610c43565b6127406000613d36565b565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a69190615985565b6001600160a01b0316836001600160a01b031614806128375750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128229190615985565b6001600160a01b0316836001600160a01b0316145b80156129315750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561287c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a09190615985565b6001600160a01b0316826001600160a01b031614806129315750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291c9190615985565b6001600160a01b0316826001600160a01b0316145b801561294f5750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b0383166129ad5760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610c43565b6001600160a01b038216612a035760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610c43565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080612710612a7582856158a1565b610bb291906158d6565b6001600160a01b038216612afb5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610c43565b6001600160a01b038316600090815260046020526040902054612b1f9082906157be565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612b4f9082906157d5565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612a589085815260200190565b6000610ab47f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084613f03565b600080612bfb613568565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015612c41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c65919061580a565b90506000612c71611262565b612c7b83866158a1565b612c8591906158d6565b9050818111612c945780612c96565b815b604051630ab626ab60e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526024810182905260006044820181905260648201819052608482015260001960a48201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ab626ab09060c401600060405180830381600087803b158015612d3e57600080fd5b505af1158015612d52573d6000803e3d6000fd5b505060405163907448ed60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201859052600093507f000000000000000000000000000000000000000000000000000000000000000016915063907448ed90604401606060405180830381865afa158015612de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0a9190615823565b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612ea0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec491906157ed565b506040517f09a5fca30000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490526044820183905230606483015260001960848301527f000000000000000000000000000000000000000000000000000000000000000016906309a5fca39060a4016020604051808303816000875af1158015612f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa6919061580a565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301529195507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801561303a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305e91906157ed565b50505050919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526122e090849061415a565b6001600160a01b0382166000908152600460205260409020546130f29082906157be565b6001600160a01b0383166000908152600460205260409020556002546131199082906157be565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600c5460ff1615156001146131df5760405162461bcd60e51b815260206004820152602a60248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f732064697361626c6564000000000000000000000000000000000000000000006064820152608401610c43565b600b5480156132085760006131f2611eb0565b905081811115613206576132066001613d36565b505b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015613294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b891906157ed565b61332a5760405162461bcd60e51b815260206004820152603660248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f20746f6b656e207472616e73666572206661696c6564000000000000000000006064820152608401610c43565b600061333583612ba3565b905061334d8461334861098d84876157be565b61423f565b6133578382614315565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610cdd91815260200190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161461346a576133f682847f0000000000000000000000000000000000000000000000000000000000000000612742565b61346a576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401610c43565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c689093018054909216909217905560125461351d916157d5565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b6040517fac4afa380000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac4afa389060240160c060405180830381865afa15801561360a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061362e91906159a2565b50909695505050505050565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156136c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ed91906157ed565b5060006136f8613568565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561373e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613762919061580a565b604051630ab626ab60e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526024810182905260006044820181905260648201819052608482015260001960a48201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ab626ab09060c401600060405180830381600087803b15801561380a57600080fd5b505af1158015610e1d573d6000803e3d6000fd5b6060600061382a613568565b90506000816001600160a01b031663d55a23f46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561386c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613890919061580a565b61389b9060016157d5565b905060008167ffffffffffffffff8111156138b8576138b8615a29565b6040519080825280602002602001820160405280156138fd57816020015b60408051808201909152600080825260208201528152602001906001900390816138d65790505b50905060008061390b614395565b604080518082019091527322d4002028f537599be9f666d1c4fa138522f9c8815291935091506020810161393f83856157be565b815250836000815181106139555761395561585c565b602090810291909101015260015b84811015613afb5760006001600160a01b0387166340c354466139876001856157be565b6040518263ffffffff1660e01b81526004016139a591815260200190565b602060405180830381865afa1580156139c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139e69190615985565b90506040518060400160405280826001600160a01b031663f7c618c16040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a559190615985565b6001600160a01b0390811682526040516246613160e11b815230600482015260209092019190841690628cc26290602401602060405180830381865afa158015613aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac7919061580a565b815250858381518110613adc57613adc61585c565b6020026020010181905250508080613af390615872565b915050613963565b509195945050505050565b600080613b13868661449b565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b7b9190615a5d565b5091509150876001600160a01b0316836001600160a01b031614613b9b57905b613bc789836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16886144cc565b93505050505b95945050505050565b6000613be0612527565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015613c86573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590613cbc5750866001600160a01b0316816001600160a01b0316145b613d2d5760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610c43565b50505050505050565b613d3e614526565b6000613d486145f4565b905081613dc757600a54811015613dc75760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360448201527f7420616d6f756e7420746f6f206c6f77000000000000000000000000000000006064820152608401610c43565b6000612710600f5483613dda91906158a1565b613de491906158d6565b90508015613e2657600954613e26906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613067565b6000612710600e5484613e3991906158a1565b613e4391906158d6565b90508015613e7f57613e7f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383613067565b6000613e9e82613e8f85876157be565b613e9991906157be565b6148ea565b90506000613eab82612ba3565b9050613eb78282614315565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234613ee0611262565b6002546040805192835260208301919091520160405180910390a1505050505050565b600061294f846001600160a01b03166355af008a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f6a919061580a565b856001600160a01b0316637727c6556040518163ffffffff1660e01b8152600401602060405180830381865afa158015613fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fcc919061580a565b866001600160a01b031663a76f54d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561400a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402e919061580a565b876001600160a01b0316637a1c36d16040518163ffffffff1660e01b8152600401602060405180830381865afa15801561406c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614090919061580a565b876001600160a01b031663961be3916040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140f2919061580a565b886001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015614130573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614154919061580a565b886149b5565b60006141af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614a6b9092919063ffffffff16565b8051909150156122e057808060200190518101906141cd91906157ed565b6122e05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c43565b6000811161428f5760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610c43565b8060025461429d91906157d5565b6002556001600160a01b0382166000908152600460205260409020546142c49082906157d5565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906131569085815260200190565b6000821161438b5760405162461bcd60e51b815260206004820152602d60248201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160448201527f6d6f756e7420746f6f206c6f77000000000000000000000000000000000000006064820152608401610c43565b610cf58282614a7a565b6000806143a0613568565b6040516246613160e11b81523060048201526001600160a01b039190911690628cc26290602401602060405180830381865afa1580156143e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614408919061580a565b6013546040517ff2daef2c000000000000000000000000000000000000000000000000000000008152306004820152602481018390529193506001600160a01b03169063f2daef2c90604401602060405180830381865afa158015614471573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614495919061580a565b90509091565b600080826001600160a01b0316846001600160a01b0316106144be5782846144c1565b83835b915091509250929050565b6000806144db836103e86157be565b6144e590876158a1565b905060006144f385836158a1565b9050600082614504886103e86158a1565b61450e91906157d5565b905061451a81836158d6565b98975050505050505050565b6000614530614395565b91505061453b613568565b6040517f7050ccd9000000000000000000000000000000000000000000000000000000008152306004820152600160248201526001600160a01b039190911690637050ccd9906044016020604051808303816000875af11580156145a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145c791906157ed565b50601354611e6e907322d4002028f537599be9f666d1c4fa138522f9c8906001600160a01b031683613067565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561465d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614681919061580a565b60115490915060005b818110156148e2576000601182815481106146a7576146a761585c565b6000918252602090912001546001600160a01b0390811691507f00000000000000000000000000000000000000000000000000000000000000001681036147d257478015614764577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561474a57600080fd5b505af115801561475e573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036147d0576147c781866157d5565b945050506148d0565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015614819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061483d919061580a565b905080156148cd576001600160a01b038083166000908152601060205260409020600101541680156148cb576148be82847f00000000000000000000000000000000000000000000000000000000000000008460106000896001600160a01b03166001600160a01b0316815260200190815260200160002060020154614f2b565b6148c890876157d5565b95505b505b50505b806148da81615872565b91505061468a565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603614949575090565b610ab4827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006150c8565b6000826000036149c757506000614a60565b60006149d385856150d8565b9050670de0b6b3a764000081116149ee576000915050614a60565b6000614a0d6149fd85876157d5565b614a0786896157d5565b906150d8565b90506000614a1e8b8b8b8b87615102565b90506000614a2f8c8c8c8c87615102565b9050614a3b8783615170565b614a4f82614a49898b6157d5565b90615170565b614a5991906157be565b9450505050505b979650505050505050565b606061294f8484600085615190565b6000614a8583612ba3565b90506000614ab47f000000000000000000000000000000000000000000000000000000000000000085846152cd565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015614b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b6c91906157ed565b506040517f90d250740000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905230604483015260001960648301527f000000000000000000000000000000000000000000000000000000000000000016906390d25074906084016020604051808303816000875af1158015614c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c47919061580a565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015614cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614cfb91906157ed565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015614d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614daf91906157ed565b506040517ff1c583330000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152602481018290526000604482015260001960648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f1c5833390608401600060405180830381600087803b158015614e6057600080fd5b505af1158015614e74573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301527f000000000000000000000000000000000000000000000000000000000000000016925063095ea7b391506044016020604051808303816000875af1158015614f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1d91906157ed565b600080614f38868661449b565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015614f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614fa09190615a5d565b5091509150876001600160a01b0316836001600160a01b031614614fc057905b600080614fef8b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff168a6144cc565b9050896001600160a01b0316856001600160a01b03161461500c57905b6150206001600160a01b038b16898d613067565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0389169063022c0d9f906150789085908590309060248101615aa2565b600060405180830381600087803b15801561509257600080fd5b505af11580156150a6573d6000803e3d6000fd5b505050508181116150b757816150b9565b805b9b9a5050505050505050505050565b6000613bcd858585856003614f2b565b6000816150e66002826158d6565b6150f8670de0b6b3a7640000866158a1565b612a7591906157d5565b60008282101561511d5761511682856157be565b9050613bcd565b6151166b033b2e3c9fd0803ce8000000670de0b6b3a7640000615155888261514585896158a1565b61514f91906158d6565b9061542b565b61515f91906158a1565b61516991906158d6565b87906150d8565b6000670de0b6b3a76400006151866002826158d6565b6150f884866158a1565b6060824710156152085760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c43565b6001600160a01b0385163b61525f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c43565b600080866001600160a01b0316858760405161527b9190615ada565b60006040518083038185875af1925050503d80600081146152b8576040519150601f19603f3d011682016040523d82523d6000602084013e6152bd565b606091505b5091509150614a608282866154a4565b6000836001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561530d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615331919061580a565b6000036153495761534282846157be565b9050610bb2565b836001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015615387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153ab919061580a565b846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156153e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061540d919061580a565b61541784866157be565b61542191906158a1565b61294f91906158d6565b6000615438600283615af6565b600003615451576b033b2e3c9fd0803ce8000000615453565b825b90506154606002836158d6565b91505b8115610ab45761547383846154dd565b9250615480600283615af6565b156154925761548f81846154dd565b90505b61549d6002836158d6565b9150615463565b606083156154b3575081610bb2565b8251156154c35782518084602001fd5b8160405162461bcd60e51b8152600401610c43919061554f565b60006b033b2e3c9fd0803ce80000006151866002826158d6565b60005b838110156155125781810151838201526020016154fa565b83811115611e5e5750506000910152565b6000815180845261553b8160208601602086016154f7565b601f01601f19169290920160200192915050565b602081526000610bb26020830184615523565b6001600160a01b0381168114611e6e57600080fd5b6000806040838503121561558a57600080fd5b823561559581615562565b946020939093013593505050565b6000602082840312156155b557600080fd5b5035919050565b6000806000606084860312156155d157600080fd5b83356155dc81615562565b925060208401356155ec81615562565b929592945050506040919091013590565b6000806040838503121561561057600080fd5b823561561b81615562565b9150602083013561562b81615562565b809150509250929050565b60006020828403121561564857600080fd5b8135610bb281615562565b803560ff8116811461566457600080fd5b919050565b600080600080600060a0868803121561568157600080fd5b853594506020860135935061569860408701615653565b94979396509394606081013594506080013592915050565b8015158114611e6e57600080fd5b6000602082840312156156d057600080fd5b8135610bb2816156b0565b600080604083850312156156ee57600080fd5b82359150602083013561562b816156b0565b600080600080600080600060e0888a03121561571b57600080fd5b873561572681615562565b9650602088013561573681615562565b9550604088013594506060880135935061575260808901615653565b925060a0880135915060c0880135905092959891949750929550565b600181811c9082168061578257607f821691505b6020821081036157a257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156157d0576157d06157a8565b500390565b600082198211156157e8576157e86157a8565b500190565b6000602082840312156157ff57600080fd5b8151610bb2816156b0565b60006020828403121561581c57600080fd5b5051919050565b60008060006060848603121561583857600080fd5b83519250602084015191506040840151615851816156b0565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b600060018201615884576158846157a8565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156158bb576158bb6157a8565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826158e5576158e56158c0565b500490565b600080835481600182811c91508083168061590657607f831692505b6020808410820361592557634e487b7160e01b86526022600452602486fd5b818015615939576001811461594a57615977565b60ff19861689528489019650615977565b60008a81526020902060005b8681101561596f5781548b820152908501908301615956565b505084890196505b509498975050505050505050565b60006020828403121561599757600080fd5b8151610bb281615562565b60008060008060008060c087890312156159bb57600080fd5b86516159c681615562565b60208801519096506159d781615562565b60408801519095506159e881615562565b60608801519094506159f981615562565b6080880151909350615a0a816156b0565b60a0880151909250615a1b81615562565b809150509295509295509295565b634e487b7160e01b600052604160045260246000fd5b80516dffffffffffffffffffffffffffff8116811461566457600080fd5b600080600060608486031215615a7257600080fd5b615a7b84615a3f565b9250615a8960208501615a3f565b9150604084015163ffffffff8116811461585157600080fd5b8481528360208201526001600160a01b0383166040820152608060608201526000615ad06080830184615523565b9695505050505050565b60008251615aec8184602087016154f7565b9190910192915050565b600082615b0557615b056158c0565b50069056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220debcd89de168b6a2a27a9b17305451933277a614d0a7e5bc6cd852b66806b19064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of tokens to deposit",
          "_deadline": "The time at which to expire the signature",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens after withdraw fee"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Deprecated; Kept for compatibility",
        "params": {
          "newValue": "fee in BIPS; required to be 0"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens available to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance after withdraw fee"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 552,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 555,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 560,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 566,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 570,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 586,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8047,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8156,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8160,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1962,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "devAddr",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1964,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1966,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1968,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 1970,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1972,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1974,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 11911,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "rewardSwapPairs",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(RewardSwapPair)11906_storage)"
      },
      {
        "astId": 11914,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "supportedRewards",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11916,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "rewardCount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 30265,
        "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
        "label": "boosterFeeCollector",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IBoosterFeeCollector)5212"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBoosterFeeCollector)5212": {
        "encoding": "inplace",
        "label": "contract IBoosterFeeCollector",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(RewardSwapPair)11906_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VariableRewardsStrategy.RewardSwapPair)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSwapPair)11906_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RewardSwapPair)11906_storage": {
        "encoding": "inplace",
        "label": "struct VariableRewardsStrategy.RewardSwapPair",
        "members": [
          {
            "astId": 11901,
            "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
            "label": "reward",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11903,
            "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
            "label": "swapPair",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11905,
            "contract": "contracts/strategies/avalanche/echidna/EchidnaStrategy.sol:EchidnaStrategy",
            "label": "swapFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}