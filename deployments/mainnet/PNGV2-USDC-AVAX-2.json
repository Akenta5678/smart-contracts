{
  "address": "0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolRewardToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolReward",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            }
          ],
          "internalType": "struct MasterChefVariableRewardsStrategyForLP.SwapPairs",
          "name": "_swapPairs",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapPair",
              "type": "address"
            }
          ],
          "internalType": "struct MasterChefVariableRewardsStrategy.ExtraReward[]",
          "name": "_extraRewards",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakStrategyV2.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "miniChef",
      "outputs": [
        {
          "internalType": "contract IMiniChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disableDeposits",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSwapPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3ec3a8b16fb7cf430d7d5bedc77f09d48c755df89c89a4130f526086fdd9e9c",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656",
    "transactionIndex": 5,
    "gasUsed": "4495151",
    "logsBloom": "0x
    "blockHash": "0x70cbc18158b9a168f13924b691c6e41b911af9a5175ac1acc051d2937a6f60ae",
    "transactionHash": "0xa3ec3a8b16fb7cf430d7d5bedc77f09d48c755df89c89a4130f526086fdd9e9c",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 14973371,
        "transactionHash": "0xa3ec3a8b16fb7cf430d7d5bedc77f09d48c755df89c89a4130f526086fdd9e9c",
        "address": "0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x70cbc18158b9a168f13924b691c6e41b911af9a5175ac1acc051d2937a6f60ae"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 14973371,
        "transactionHash": "0xa3ec3a8b16fb7cf430d7d5bedc77f09d48c755df89c89a4130f526086fdd9e9c",
        "address": "0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc10000",
        "logIndex": 6,
        "blockHash": "0x70cbc18158b9a168f13924b691c6e41b911af9a5175ac1acc051d2937a6f60ae"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 14973371,
        "transactionHash": "0xa3ec3a8b16fb7cf430d7d5bedc77f09d48c755df89c89a4130f526086fdd9e9c",
        "address": "0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 7,
        "blockHash": "0x70cbc18158b9a168f13924b691c6e41b911af9a5175ac1acc051d2937a6f60ae"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 14973371,
        "transactionHash": "0xa3ec3a8b16fb7cf430d7d5bedc77f09d48c755df89c89a4130f526086fdd9e9c",
        "address": "0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 8,
        "blockHash": "0x70cbc18158b9a168f13924b691c6e41b911af9a5175ac1acc051d2937a6f60ae"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 14973371,
        "transactionHash": "0xa3ec3a8b16fb7cf430d7d5bedc77f09d48c755df89c89a4130f526086fdd9e9c",
        "address": "0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 9,
        "blockHash": "0x70cbc18158b9a168f13924b691c6e41b911af9a5175ac1acc051d2937a6f60ae"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 14973371,
        "transactionHash": "0xa3ec3a8b16fb7cf430d7d5bedc77f09d48c755df89c89a4130f526086fdd9e9c",
        "address": "0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000302404cb8f34713a8b8dbf9b4989a41252332068"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x70cbc18158b9a168f13924b691c6e41b911af9a5175ac1acc051d2937a6f60ae"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 14973371,
        "transactionHash": "0xa3ec3a8b16fb7cf430d7d5bedc77f09d48c755df89c89a4130f526086fdd9e9c",
        "address": "0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 11,
        "blockHash": "0x70cbc18158b9a168f13924b691c6e41b911af9a5175ac1acc051d2937a6f60ae"
      }
    ],
    "blockNumber": 14973371,
    "cumulativeGasUsed": "4904827",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Pangolin USDC-AVAX",
    "0x0e0100Ab771E9288e0Aa97e11557E6654C3a9665",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    "0x60781C2586D68229fde47564546784ab3fACA982",
    {
      "poolReward": "0xd7538cabbf8605bde1f4901b47b8d42c61de0367",
      "token0": "0x0000000000000000000000000000000000000000",
      "token1": "0x0e0100Ab771E9288e0Aa97e11557E6654C3a9665"
    },
    [],
    "0x1f806f7C8dED893fd3caE279191ad7Aa3798E928",
    "55",
    "0x302404cb8F34713A8B8DBF9b4989A41252332068",
    {
      "minTokensToReinvest": "10000000000000000",
      "adminFeeBips": 0,
      "devFeeBips": 700,
      "reinvestRewardBips": 100
    }
  ],
  "solcInputHash": "0f19e27e896d99055da1b6028351a953",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolRewardToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct MasterChefVariableRewardsStrategyForLP.SwapPairs\",\"name\":\"_swapPairs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"internalType\":\"struct MasterChefVariableRewardsStrategy.ExtraReward[]\",\"name\":\"_extraRewards\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct YakStrategyV2.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miniChef\",\"outputs\":[{\"internalType\":\"contract IMiniChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disableDeposits\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSwapPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\"}},\"depositFor(address,uint256)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\",\"amount\":\"deposit tokens\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens after withdraw fee\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueDeployedFunds(uint256,bool)\":{\"params\":{\"disableDeposits\":\"bool\",\"minReturnAmountAccepted\":\"min deposit tokens to receive\"}},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Deprecated; Kept for compatibility\",\"params\":{\"newValue\":\"fee in BIPS; required to be 0\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit on behalf of another account\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance after withdraw fee\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"rescueDeployedFunds(uint256,bool)\":{\"notice\":\"Rescue all available deployed deposit tokens back to Strategy\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Redeem receipt tokens for deposit tokens\"}},\"notice\":\"notice: this strategy is not handling extra reward and rewarders. we are waiting for the Pangolin team to provide additional information on the rewarders\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol\":\"PangolinV2VariableRewardsStrategyForLP\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => mapping(address => uint256)) internal allowances;\\n    mapping(address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(\\n        address signer,\\n        bytes32 encodeData,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), encodeData));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x6a1eba50e580678ef7b6b96dc90629e51f828e129060135fb7aeaba91a326d5f\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint256;\\n\\n    struct StrategySettings {\\n        uint256 minTokensToReinvest;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint256 public MIN_TOKENS_TO_REINVEST;\\n    uint256 public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint256 public ADMIN_FEE_BIPS;\\n    uint256 public REINVEST_REWARD_BIPS;\\n    uint256 public DEV_FEE_BIPS;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    uint256 internal constant MAX_UINT = type(uint256).max;\\n\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdraw(address indexed account, uint256 amount);\\n    event Reinvest(uint256 newTotalDeposits, uint256 newTotalSupply);\\n    event Recovered(address token, uint256 amount);\\n    event UpdateAdminFee(uint256 oldValue, uint256 newValue);\\n    event UpdateDevFee(uint256 oldValue, uint256 newValue);\\n    event UpdateReinvestReward(uint256 oldValue, uint256 newValue);\\n    event UpdateMinTokensToReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(StrategySettings memory _strategySettings) {\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256) {\\n        uint256 unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount) public view returns (uint256) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits());\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount) public view returns (uint256) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits()).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @dev Deprecated; Kept for compatibility\\n     * @param newValue fee in BIPS; required to be 0\\n     */\\n    function updateAdminFee(uint256 newValue) public onlyOwner {\\n        require(newValue == 0);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint256 newValue) public onlyOwner {\\n        require(newValue.add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint256 newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        payable(msg.sender).transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2e20de5ac3ae62c4cc655c5ce4d785c3aed08eb8b2454d5d2b5d007842ab35bb\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xdb4adbfe678b51139c50ca81931c58e0ce6aef9bc85195bf5dee3444aa9a2410\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7770575951dbb745d5ba319363b64dd1165d9a6380e685f1e8aff5cf1ca2c608\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair\\n    ) internal returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint256 amountOut1 = 0;\\n        uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(\\n        IPair pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (bool) {\\n        return\\n            (tokenA == pair.token0() || tokenA == pair.token1()) &&\\n            (tokenB == pair.token0() || tokenB == pair.token1()) &&\\n            tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair\\n    ) internal view returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        IPair swapPairToken1\\n    ) internal returns (uint256) {\\n        uint256 amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint256 amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint256 amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(\\n        address depositToken,\\n        uint256 maxAmountIn0,\\n        uint256 maxAmountIn1\\n    ) internal returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = IPair(address(depositToken)).getReserves();\\n        uint256 amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        IERC20(IPair(depositToken).token0()).safeTransfer(depositToken, maxAmountIn0);\\n        IERC20(IPair(depositToken).token1()).safeTransfer(depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(\\n        uint256 amountIn,\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) private pure returns (uint256) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n}\\n\",\"keccak256\":\"0x7d3e51e6f2c95f4ee832db2e24d40328e23c5757ecac4a3b71233bd16d01d20c\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\\n\",\"keccak256\":\"0xc1d5010fa46f3699ba89c0988895d0236c96d4f88490228698bdbd55a15dccf7\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity 0.8.13;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc346884413e71a1422efe5e44741b2692cbabf006f562dbdf38186790f49b1c5\",\"license\":\"MIT\"},\"contracts/strategies/MasterChefVariableRewardsStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../YakStrategyV2.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\n\\n/**\\n * @notice Adapter strategy for MasterChef.\\n */\\nabstract contract MasterChefVariableRewardsStrategy is YakStrategyV2 {\\n    using SafeMath for uint256;\\n\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    struct ExtraReward {\\n        address reward;\\n        address swapPair;\\n    }\\n\\n    uint256 public immutable PID;\\n    address private stakingContract;\\n\\n    // reward -> swapPair\\n    mapping(address => address) public rewardSwapPairs;\\n    uint256 public rewardCount = 1;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        address _ecosystemToken,\\n        address _poolRewardToken,\\n        address _swapPairPoolReward,\\n        ExtraReward[] memory _extraRewards,\\n        address _stakingContract,\\n        address _timelock,\\n        uint256 _pid,\\n        StrategySettings memory _strategySettings\\n    ) YakStrategyV2(_strategySettings) {\\n        name = _name;\\n        depositToken = IERC20(_depositToken);\\n        rewardToken = IERC20(_ecosystemToken);\\n        PID = _pid;\\n        devAddr = 0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF;\\n        stakingContract = _stakingContract;\\n        rewardSwapPairs[_poolRewardToken] = _swapPairPoolReward;\\n\\n        for (uint256 i = 0; i < _extraRewards.length; i++) {\\n            _addReward(_extraRewards[i].reward, _extraRewards[i].swapPair);\\n        }\\n\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function addReward(address _rewardToken, address _swapPair) public onlyDev {\\n        _addReward(_rewardToken, _swapPair);\\n    }\\n\\n    function _addReward(address _rewardToken, address _swapPair) internal {\\n        if (_rewardToken != address(rewardToken)) {\\n            if (_rewardToken == IPair(_swapPair).token0()) {\\n                require(\\n                    IPair(_swapPair).token1() == address(rewardToken),\\n                    \\\"Swap pair swapPairPoolReward does not contain reward token\\\"\\n                );\\n            } else {\\n                require(\\n                    IPair(_swapPair).token0() == address(rewardToken) && IPair(_swapPair).token1() == _rewardToken,\\n                    \\\"Swap pair swapPairPoolReward does not contain reward token\\\"\\n                );\\n            }\\n        }\\n        rewardSwapPairs[_rewardToken] = _swapPair;\\n        rewardCount = rewardCount.add(1);\\n    }\\n\\n    function removeReward(address rewardToken) public onlyDev {\\n        delete rewardSwapPairs[rewardToken];\\n        rewardCount = rewardCount.sub(1);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 amount) external override {\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function depositFor(address account, uint256 amount) external override {\\n        _deposit(account, amount);\\n    }\\n\\n    function _deposit(address account, uint256 amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"MasterChefStrategyV1::_deposit\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            (Reward[] memory rewards, uint256 estimatedTotalReward) = _checkReward();\\n            if (estimatedTotalReward > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n                _reinvest(rewards);\\n            }\\n        }\\n        require(depositToken.transferFrom(msg.sender, address(this), amount), \\\"MasterChefStrategyV1::transfer failed\\\");\\n        uint256 depositFeeBips = _getDepositFeeBips(PID);\\n        uint256 depositFee = amount.mul(depositFeeBips).div(_bip());\\n        _mint(account, getSharesForDepositTokens(amount.sub(depositFee)));\\n        _stakeDepositTokens(amount);\\n        emit Deposit(account, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(amount);\\n        require(depositTokenAmount > 0, \\\"MasterChefStrategyV1::withdraw\\\");\\n        _withdrawDepositTokens(depositTokenAmount);\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips(PID);\\n        uint256 withdrawFee = depositTokenAmount.mul(withdrawFeeBips).div(_bip());\\n        _safeTransfer(address(depositToken), msg.sender, depositTokenAmount.sub(withdrawFee));\\n        _burn(msg.sender, amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    function _withdrawDepositTokens(uint256 amount) private {\\n        _withdrawMasterchef(PID, amount);\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        (Reward[] memory rewards, uint256 estimatedTotalReward) = _checkReward();\\n        require(estimatedTotalReward >= MIN_TOKENS_TO_REINVEST, \\\"MasterChefStrategyV1::reinvest\\\");\\n        _reinvest(rewards);\\n    }\\n\\n    function _convertRewardIntoWAVAX(Reward[] memory rewards) private returns (uint256) {\\n        uint256 avaxAmount = rewardToken.balanceOf(address(this));\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            address swapPair = rewardSwapPairs[reward];\\n            uint256 amount = rewards[i].amount;\\n            if (amount > 0) {\\n                if (reward == address(rewardToken)) {\\n                    uint256 balance = address(this).balance;\\n                    if (balance > 0) {\\n                        WAVAX.deposit{value: balance}();\\n                        avaxAmount = avaxAmount.add(amount);\\n                    }\\n                } else {\\n                    if (swapPair > address(0)) {\\n                        avaxAmount = avaxAmount.add(\\n                            DexLibrary.swap(amount, reward, address(rewardToken), IPair(swapPair))\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n        return avaxAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from `MasterChef`\\n     */\\n    function _reinvest(Reward[] memory rewards) private {\\n        _getRewards(PID);\\n        uint256 amount = _convertRewardIntoWAVAX(rewards);\\n\\n        uint256 devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            _safeTransfer(address(rewardToken), devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            _safeTransfer(address(rewardToken), msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount.sub(devFee).sub(reinvestFee));\\n\\n        _stakeDepositTokens(depositTokenAmount);\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _stakeDepositTokens(uint256 amount) private {\\n        require(amount > 0, \\\"MasterChefStrategyV1::_stakeDepositTokens\\\");\\n        _depositMasterchef(PID, amount);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymosu ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        require(IERC20(token).transfer(to, value), \\\"MasterChefStrategyV1::TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function _checkReward() internal view returns (Reward[] memory, uint256) {\\n        Reward[] memory rewards = _pendingRewards(PID);\\n        uint256 estimatedTotalReward = rewardToken.balanceOf(address(this));\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            address swapPair = rewardSwapPairs[rewards[i].reward];\\n            uint256 balance = IERC20(reward).balanceOf(address(this));\\n            if (reward != address(rewardToken)) {\\n                uint256 amount = balance.add(rewards[i].amount);\\n                if (amount > 0 && swapPair > address(0)) {\\n                    estimatedTotalReward = estimatedTotalReward.add(\\n                        DexLibrary.estimateConversionThroughPair(amount, reward, address(rewardToken), IPair(swapPair))\\n                    );\\n                    rewards[i].amount = amount;\\n                }\\n            } else {\\n                estimatedTotalReward = estimatedTotalReward.add(rewards[i].amount);\\n            }\\n        }\\n        return (rewards, estimatedTotalReward);\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        (, uint256 estimatedTotalReward) = _checkReward();\\n        return estimatedTotalReward;\\n    }\\n\\n    /**\\n     * @notice Estimate recoverable balance after withdraw fee\\n     * @return deposit tokens after withdraw fee\\n     */\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        uint256 depositBalance = totalDeposits();\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips(PID);\\n        uint256 withdrawFee = depositBalance.mul(withdrawFeeBips).div(_bip());\\n        return depositBalance.sub(withdrawFee);\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        uint256 depositBalance = _getDepositBalance(PID);\\n        return depositBalance;\\n    }\\n\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw(PID);\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter.sub(balanceBefore) >= minReturnAmountAccepted,\\n            \\\"MasterChefStrategyV1::rescueDeployedFunds\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true && disableDeposits == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount) internal virtual returns (uint256 toAmount);\\n\\n    function _depositMasterchef(uint256 pid, uint256 amount) internal virtual;\\n\\n    function _withdrawMasterchef(uint256 pid, uint256 amount) internal virtual;\\n\\n    function _emergencyWithdraw(uint256 pid) internal virtual;\\n\\n    function _getRewards(uint256 pid) internal virtual;\\n\\n    function _pendingRewards(uint256 pid) internal view virtual returns (Reward[] memory);\\n\\n    function _getDepositBalance(uint256 pid) internal view virtual returns (uint256 amount);\\n\\n    function _getDepositFeeBips(uint256 pid) internal view virtual returns (uint256);\\n\\n    function _getWithdrawFeeBips(uint256 pid) internal view virtual returns (uint256);\\n\\n    function _bip() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xbb647edd9418bc65b6f06e941a846bda646a5dc96049ef0b5789a24ed0e56fd0\",\"license\":\"MIT\"},\"contracts/strategies/MasterChefVariableRewardsStrategyForLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"./MasterChefVariableRewardsStrategy.sol\\\";\\n\\n/**\\n * @notice Adapter strategy for MasterChef with LP deposit.\\n */\\nabstract contract MasterChefVariableRewardsStrategyForLP is MasterChefVariableRewardsStrategy {\\n    using SafeMath for uint256;\\n\\n    struct SwapPairs {\\n        address poolReward;\\n        address token0;\\n        address token1;\\n    }\\n\\n    address private swapPairToken0;\\n    address private swapPairToken1;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        address _ecosystemToken,\\n        address _poolRewardToken,\\n        SwapPairs memory _swapPairs,\\n        ExtraReward[] memory _extraRewards,\\n        address _stakingContract,\\n        address _timelock,\\n        uint256 _pid,\\n        StrategySettings memory _strategySettings\\n    )\\n        MasterChefVariableRewardsStrategy(\\n            _name,\\n            _depositToken,\\n            _ecosystemToken,\\n            _poolRewardToken,\\n            _swapPairs.poolReward,\\n            _extraRewards,\\n            _stakingContract,\\n            _timelock,\\n            _pid,\\n            _strategySettings\\n        )\\n    {\\n        assignSwapPairSafely(_swapPairs, _ecosystemToken, _poolRewardToken);\\n    }\\n\\n    /**\\n     * @notice Initialization helper for Pair deposit tokens\\n     * @dev Checks that selected Pairs are valid for trading reward tokens\\n     * @dev Assigns values to IPair(swapPairToken0) and IPair(swapPairToken1)\\n     */\\n    function assignSwapPairSafely(\\n        SwapPairs memory _swapPairs,\\n        address _ecosystemToken,\\n        address _poolRewardToken\\n    ) private {\\n        if (\\n            _ecosystemToken != IPair(address(depositToken)).token0() &&\\n            _ecosystemToken != IPair(address(depositToken)).token1()\\n        ) {\\n            // deployment checks for non-pool2\\n            require(_swapPairs.token0 > address(0), \\\"Swap pair 0 is necessary but not supplied\\\");\\n            require(_swapPairs.token1 > address(0), \\\"Swap pair 1 is necessary but not supplied\\\");\\n            swapPairToken0 = _swapPairs.token0;\\n            swapPairToken1 = _swapPairs.token1;\\n            require(\\n                IPair(swapPairToken0).token0() == _ecosystemToken || IPair(swapPairToken0).token1() == _ecosystemToken,\\n                \\\"Swap pair supplied does not have the reward token as one of it's pair\\\"\\n            );\\n            require(\\n                IPair(swapPairToken0).token0() == IPair(address(depositToken)).token0() ||\\n                    IPair(swapPairToken0).token1() == IPair(address(depositToken)).token0(),\\n                \\\"Swap pair 0 supplied does not match the pair in question\\\"\\n            );\\n            require(\\n                IPair(swapPairToken1).token0() == IPair(address(depositToken)).token1() ||\\n                    IPair(swapPairToken1).token1() == IPair(address(depositToken)).token1(),\\n                \\\"Swap pair 1 supplied does not match the pair in question\\\"\\n            );\\n        } else if (_ecosystemToken == IPair(address(depositToken)).token0()) {\\n            swapPairToken1 = address(depositToken);\\n        } else if (_ecosystemToken == IPair(address(depositToken)).token1()) {\\n            swapPairToken0 = address(depositToken);\\n        }\\n        if (_poolRewardToken == IPair(_swapPairs.poolReward).token0()) {\\n            require(\\n                IPair(_swapPairs.poolReward).token1() == _ecosystemToken,\\n                \\\"Swap pair swapPairPoolReward does not contain reward token\\\"\\n            );\\n        } else {\\n            require(\\n                IPair(_swapPairs.poolReward).token0() == _ecosystemToken &&\\n                    IPair(_swapPairs.poolReward).token1() == _poolRewardToken,\\n                \\\"Swap pair swapPairPoolReward does not contain reward token\\\"\\n            );\\n        }\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount) internal override returns (uint256 toAmount) {\\n        toAmount = DexLibrary.convertRewardTokensToDepositTokens(\\n            fromAmount,\\n            address(rewardToken),\\n            address(depositToken),\\n            IPair(swapPairToken0),\\n            IPair(swapPairToken1)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9315b8ed8033c240ce9e15a934bf4f574b739827c8770a399f61876dbf6d8e22\",\"license\":\"MIT\"},\"contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../MasterChefVariableRewardsStrategyForLP.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../../interfaces/IPair.sol\\\";\\nimport \\\"../../lib/DexLibrary.sol\\\";\\n\\nimport \\\"./interfaces/IMiniChefV2.sol\\\";\\nimport \\\"./interfaces/IPangolinRewarder.sol\\\";\\n\\n/**\\n * notice: this strategy is not handling extra reward and rewarders.\\n * we are waiting for the Pangolin team to provide additional information on the rewarders\\n */\\ncontract PangolinV2VariableRewardsStrategyForLP is MasterChefVariableRewardsStrategyForLP {\\n    using SafeMath for uint256;\\n\\n    IMiniChefV2 public miniChef;\\n    address private poolRewardToken;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        address _rewardToken,\\n        address _poolRewardToken,\\n        SwapPairs memory _swapPairs,\\n        ExtraReward[] memory _extraRewards,\\n        address _stakingContract,\\n        uint256 _pid,\\n        address _timelock,\\n        StrategySettings memory _strategySettings\\n    )\\n        MasterChefVariableRewardsStrategyForLP(\\n            _name,\\n            _depositToken,\\n            _rewardToken,\\n            _poolRewardToken,\\n            _swapPairs,\\n            _extraRewards,\\n            _stakingContract,\\n            _timelock,\\n            _pid,\\n            _strategySettings\\n        )\\n    {\\n        poolRewardToken = _poolRewardToken;\\n        miniChef = IMiniChefV2(_stakingContract);\\n    }\\n\\n    function _depositMasterchef(uint256 _pid, uint256 _amount) internal override {\\n        depositToken.approve(address(miniChef), _amount);\\n        miniChef.deposit(_pid, _amount, address(this));\\n    }\\n\\n    function _withdrawMasterchef(uint256 _pid, uint256 _amount) internal override {\\n        miniChef.withdraw(_pid, _amount, address(this));\\n    }\\n\\n    function _emergencyWithdraw(uint256 _pid) internal override {\\n        miniChef.emergencyWithdraw(_pid, address(this));\\n        depositToken.approve(address(miniChef), 0);\\n    }\\n\\n    function _pendingRewards(uint256 _pid) internal view override returns (Reward[] memory) {\\n        uint256 poolRewardAmount = miniChef.pendingReward(_pid, address(this));\\n        IPangolinRewarder rewarder = IPangolinRewarder(miniChef.rewarder(_pid));\\n        Reward[] memory pendingRewards;\\n        if (address(rewarder) > address(0)) {\\n            (address[] memory rewardTokens, uint256[] memory rewardAmounts) = rewarder.pendingTokens(\\n                0,\\n                address(this),\\n                poolRewardAmount\\n            );\\n            pendingRewards = new Reward[](rewardTokens.length.add(1));\\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\\n                pendingRewards[i + 1] = Reward({reward: rewardTokens[i], amount: rewardAmounts[i]});\\n            }\\n        } else {\\n            pendingRewards = new Reward[](1);\\n        }\\n        pendingRewards[0] = Reward({reward: poolRewardToken, amount: poolRewardAmount});\\n        return pendingRewards;\\n    }\\n\\n    function _getRewards(uint256 _pid) internal override {\\n        miniChef.harvest(_pid, address(this));\\n    }\\n\\n    function _getDepositBalance(uint256 pid) internal view override returns (uint256 amount) {\\n        (amount, ) = miniChef.userInfo(pid, address(this));\\n    }\\n\\n    function _getDepositFeeBips(\\n        uint256 /*pid*/\\n    ) internal pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function _getWithdrawFeeBips(\\n        uint256 /*pid*/\\n    ) internal pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function _bip() internal pure override returns (uint256) {\\n        return 10000;\\n    }\\n}\\n\",\"keccak256\":\"0x99beeee443ed3fe0e8d2ccb25c044a9fdb506b87e15adb4455e8b7798502f7e1\",\"license\":\"MIT\"},\"contracts/strategies/pangolin/interfaces/IMiniChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IMiniChefV2 {\\n    function userInfo(uint256 pid, address user) external view returns (uint256 amount, uint256 rewardDebt);\\n\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            uint256 allocPoint,\\n            uint256 lastRewardTime,\\n            uint256 accRewardPerShare\\n        );\\n\\n    function rewarder(uint256 pid) external view returns (address);\\n\\n    function lpToken(uint256 pid) external view returns (address);\\n\\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function deposit(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function withdraw(\\n        uint256 pid,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    function harvest(uint256 pid, address to) external;\\n\\n    function emergencyWithdraw(uint256 pid, address to) external;\\n}\\n\",\"keccak256\":\"0x2fde3cc9469035f9ab952d4985c0f7c2c3175971ab89fe96a9b4acd811de19f0\",\"license\":\"MIT\"},\"contracts/strategies/pangolin/interfaces/IPangolinRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPangolinRewarder {\\n    function pendingTokens(\\n        uint256,\\n        address,\\n        uint256 rewardAmount\\n    ) external view returns (address[] memory rewardTokens, uint256[] memory rewardAmounts);\\n}\\n\",\"keccak256\":\"0x4060eaeef34b36263cf36969aee8400439802ee750dcfea1ce9a9b42391f077d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600960a0819052685969656c642059616b60b81b60c09081526200002c916000919062001686565b506040805180820190915260038082526216549560ea1b6020909201918252620000599160019162001686565b5060016014553480156200006c57600080fd5b50604051620063c3380380620063c38339810160408190526200008f91620019cd565b89898989898989888a898989898989600001518989898989806000620000ba620002ff60201b60201c565b600680546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020620063a3833981519152908290a3508051620001049062000303565b6020810151620001149062000393565b604081015162000124906200044a565b5089516200013a9060009060208d019062001686565b50600980546001600160a01b03808c166001600160a01b031992831617909255600a80548b84169083161790556080849052600b80548216732d580f9cf2fb2d09bc411532988f2afda4e7beff1790556012805487841690831617905588821660009081526013602052604081208054938a16939092169290921790555b8551811015620002295762000214868281518110620001db57620001db62001ac9565b602002602001015160000151878381518110620001fc57620001fc62001ac9565b6020026020010151602001516200050160201b60201c565b80620002208162001af5565b915050620001b8565b506200023660016200080e565b6200024183620008b8565b60408051600080825260208201527fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234910160405180910390a15050505050505050505062000297868989620009b560201b60201c565b5050505050505050505086601860006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083601760006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050505050505050505062001b86565b3390565b6006546001600160a01b03163314620003525760405162461bcd60e51b815260206004820181905260248201526000805160206200638383398151915260448201526064015b60405180910390fd5b600c5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600c55565b6006546001600160a01b03163314620003de5760405162461bcd60e51b8152602060048201819052602482015260008051602062006383833981519152604482015260640162000349565b612710620003fd601054836200167160201b62001df71790919060201c565b11156200040957600080fd5b60115460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1601155565b6006546001600160a01b03163314620004955760405162461bcd60e51b8152602060048201819052602482015260008051602062006383833981519152604482015260640162000349565b612710620004b4601154836200167160201b62001df71790919060201c565b1115620004c057600080fd5b60105460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1601055565b600a546001600160a01b03838116911614620007bb57806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000556573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200057c919062001b11565b6001600160a01b0316826001600160a01b0316036200066a57600a546040805163d21220a760e01b815290516001600160a01b039283169284169163d21220a79160048083019260209291908290030181865afa158015620005e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000608919062001b11565b6001600160a01b031614620006645760405162461bcd60e51b815260206004820152603a602482015260008051602062006343833981519152604482015260008051602062006363833981519152606482015260840162000349565b620007bb565b600a5460408051630dfe168160e01b815290516001600160a01b0392831692841691630dfe16819160048083019260209291908290030181865afa158015620006b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006dd919062001b11565b6001600160a01b0316148015620007695750816001600160a01b0316816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000738573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200075e919062001b11565b6001600160a01b0316145b620007bb5760405162461bcd60e51b815260206004820152603a602482015260008051602062006343833981519152604482015260008051602062006363833981519152606482015260840162000349565b6001600160a01b03828116600090815260136020908152604090912080546001600160a01b03191692841692909217909155601454620008079160019062001671811b62001df717901c565b6014555050565b6006546001600160a01b03163314620008595760405162461bcd60e51b8152602060048201819052602482015260008051602062006383833981519152604482015260640162000349565b600e5481151560ff9091161515036200087157600080fd5b600e805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859060200160405180910390a150565b6006546001600160a01b03163314620009035760405162461bcd60e51b8152602060048201819052602482015260008051602062006383833981519152604482015260640162000349565b6001600160a01b0381166200096a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000349565b6006546040516001600160a01b03808416921690600080516020620063a383398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b600960009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a09573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a2f919062001b11565b6001600160a01b0316826001600160a01b03161415801562000adc5750600960009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000aa0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ac6919062001b11565b6001600160a01b0316826001600160a01b031614155b15620012865760208301516001600160a01b031662000b505760405162461bcd60e51b815260206004820152602960248201527f5377617020706169722030206973206e656365737361727920627574206e6f74604482015268081cdd5c1c1b1a595960ba1b606482015260840162000349565b60408301516001600160a01b031662000bbe5760405162461bcd60e51b815260206004820152602960248201527f5377617020706169722031206973206e656365737361727920627574206e6f74604482015268081cdd5c1c1b1a595960ba1b606482015260840162000349565b602080840151601580546001600160a01b039283166001600160a01b031991821681179092556040808801516016805491861691909316179091558051630dfe168160e01b81529051928616939192630dfe1681926004808401939192918290030181865afa15801562000c36573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c5c919062001b11565b6001600160a01b0316148062000cea57506015546040805163d21220a760e01b815290516001600160a01b0380861693169163d21220a79160048083019260209291908290030181865afa15801562000cb9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cdf919062001b11565b6001600160a01b0316145b62000d6c5760405162461bcd60e51b815260206004820152604560248201527f53776170207061697220737570706c69656420646f6573206e6f74206861766560448201527f207468652072657761726420746f6b656e206173206f6e65206f662069742773606482015264103830b4b960d91b608482015260a40162000349565b600960009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000dc0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000de6919062001b11565b6001600160a01b0316601560009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000e43573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e69919062001b11565b6001600160a01b0316148062000f825750600960009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000ece573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ef4919062001b11565b6001600160a01b0316601560009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000f51573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f77919062001b11565b6001600160a01b0316145b62000ff65760405162461bcd60e51b815260206004820152603860248201527f537761702070616972203020737570706c69656420646f6573206e6f74206d6160448201527f74636820746865207061697220696e207175657374696f6e0000000000000000606482015260840162000349565b600960009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200104a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001070919062001b11565b6001600160a01b0316601660009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015620010cd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010f3919062001b11565b6001600160a01b031614806200120c5750600960009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001158573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200117e919062001b11565b6001600160a01b0316601660009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620011db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001201919062001b11565b6001600160a01b0316145b620012805760405162461bcd60e51b815260206004820152603860248201527f537761702070616972203120737570706c69656420646f6573206e6f74206d6160448201527f74636820746865207061697220696e207175657374696f6e0000000000000000606482015260840162000349565b620013f7565b600960009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015620012da573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001300919062001b11565b6001600160a01b0316826001600160a01b0316036200134157600954601680546001600160a01b0319166001600160a01b03909216919091179055620013f7565b600960009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001395573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013bb919062001b11565b6001600160a01b0316826001600160a01b031603620013f757600954601580546001600160a01b0319166001600160a01b039092169190911790555b82600001516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200143a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001460919062001b11565b6001600160a01b0316816001600160a01b0316036200154d57816001600160a01b031683600001516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620014c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014ec919062001b11565b6001600160a01b031614620015485760405162461bcd60e51b815260206004820152603a602482015260008051602062006343833981519152604482015260008051602062006363833981519152606482015260840162000349565b505050565b816001600160a01b031683600001516001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200159a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015c0919062001b11565b6001600160a01b03161480156200161f5750806001600160a01b031683600001516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620014c6573d6000803e3d6000fd5b620015485760405162461bcd60e51b815260206004820152603a602482015260008051602062006343833981519152604482015260008051602062006363833981519152606482015260840162000349565b60006200167f828462001b2f565b9392505050565b828054620016949062001b4a565b90600052602060002090601f016020900481019282620016b8576000855562001703565b82601f10620016d357805160ff191683800117855562001703565b8280016001018555821562001703579182015b8281111562001703578251825591602001919060010190620016e6565b506200171192915062001715565b5090565b5b8082111562001711576000815560010162001716565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156200176757620017676200172c565b60405290565b604080519081016001600160401b03811182821017156200176757620017676200172c565b604051601f8201601f191681016001600160401b0381118282101715620017bd57620017bd6200172c565b604052919050565b600082601f830112620017d757600080fd5b81516001600160401b03811115620017f357620017f36200172c565b602062001809601f8301601f1916820162001792565b82815285828487010111156200181e57600080fd5b60005b838110156200183e57858101830151828201840152820162001821565b83811115620018505760008385840101525b5095945050505050565b80516001600160a01b03811681146200187257600080fd5b919050565b6000606082840312156200188a57600080fd5b6200189462001742565b9050620018a1826200185a565b8152620018b1602083016200185a565b6020820152620018c4604083016200185a565b604082015292915050565b600082601f830112620018e157600080fd5b815160206001600160401b03821115620018ff57620018ff6200172c565b6200190f818360051b0162001792565b82815260069290921b840181019181810190868411156200192f57600080fd5b8286015b848110156200198557604081890312156200194e5760008081fd5b620019586200176d565b62001963826200185a565b8152620019728583016200185a565b8186015283529183019160400162001933565b509695505050505050565b600060608284031215620019a357600080fd5b620019ad62001742565b905081518152602082015160208201526040820151604082015292915050565b6000806000806000806000806000806101c08b8d031215620019ee57600080fd5b8a516001600160401b038082111562001a0657600080fd5b62001a148e838f01620017c5565b9b5062001a2460208e016200185a565b9a5062001a3460408e016200185a565b995062001a4460608e016200185a565b985062001a558e60808f0162001877565b975060e08d015191508082111562001a6c57600080fd5b5062001a7b8d828e01620018cf565b95505062001a8d6101008c016200185a565b93506101208b0151925062001aa66101408c016200185a565b915062001ab88c6101608d0162001990565b90509295989b9194979a5092959850565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162001b0a5762001b0a62001adf565b5060010190565b60006020828403121562001b2457600080fd5b6200167f826200185a565b6000821982111562001b455762001b4562001adf565b500190565b600181811c9082168062001b5f57607f821691505b60208210810362001b8057634e487b7160e01b600052602260045260246000fd5b50919050565b60805161477762001bcc6000396000818161056e01528181610ffd01528181611705015281816120a20152818161296d01528181612d4e0152612ff901526147776000f3fe608060405234801561001057600080fd5b50600436106103995760003560e01c80638980f11f116101e9578063b9e57b801161010f578063dd62ed3e116100ad578063ed24911d1161007c578063ed24911d14610822578063f2fde38b1461082a578063f7c618c11461083d578063fdb5a03e1461085057600080fd5b8063dd62ed3e146107b0578063dd8ce4d6146107e9578063e21ac825146107fc578063eab89a5a1461080f57600080fd5b8063c89039c5116100e9578063c89039c514610764578063cff1b6ef14610777578063d505accf1461078a578063da09c72c1461079d57600080fd5b8063b9e57b801461074b578063bd079f5514610753578063c4b24a461461075c57600080fd5b80639e4e731811610187578063a9059cbb11610156578063a9059cbb14610705578063ac0d31ff14610718578063b52a321f1461072b578063b6b55f251461073857600080fd5b80639e4e73181461068f578063a4d5e67c146106b6578063a5534e71146106c9578063a8ae2b7c146106f257600080fd5b80638da5cb5b116101c35780638da5cb5b146106505780639291d5631461066157806395d89b411461067457806399729ec11461067c57600080fd5b80638980f11f146106215780638aff733d146106345780638b73e6061461063d57600080fd5b8063483c2ef0116102ce57806370a082311161026c5780637ae267731161023b5780637ae26773146105d35780637d882097146105e65780637ecebe00146105ee578063818372301461060e57600080fd5b806370a0823114610590578063715018a6146105b9578063789139bc146105c157806379085425146105ca57600080fd5b80634e77ace5116102a85780634e77ace51461053a5780634ebb79161461054d5780635ea682ea146105605780635eaec0e41461056957600080fd5b8063483c2ef0146104f15780634a970be7146105145780634bebd1e71461052757600080fd5b80632e1a7d4d1161033b578063313ce56711610315578063313ce567146104905780633bdc6e72146104aa5780634005760a146104b357806340b47e1a146104de57600080fd5b80632e1a7d4d146104415780632f4f21e21461045657806330adf81f1461046957600080fd5b80630f23475d116103775780630f23475d146103f657806318160ddd146103fe57806320606b701461040757806323b872dd1461042e57600080fd5b806306fdde031461039e57806307677111146103bc578063095ea7b3146103d3575b600080fd5b6103a6610858565b6040516103b39190614000565b60405180910390f35b6103c5600f5481565b6040519081526020016103b3565b6103e66103e1366004614028565b6108e6565b60405190151581526020016103b3565b6103c56108fc565b6103c560025481565b6103c57f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6103e661043c366004614054565b610937565b61045461044f366004614095565b610a1b565b005b610454610464366004614028565b610afd565b6103c57f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610498601281565b60405160ff90911681526020016103b3565b6103c560075481565b6017546104c6906001600160a01b031681565b6040516001600160a01b0390911681526020016103b3565b6104546104ec3660046140ae565b610b0b565b6103e66104ff3660046140e7565b60086020526000908152604090205460ff1681565b61045461052236600461411a565b610b6f565b6104546105353660046140e7565b610c21565b61045461054836600461416f565b610d3e565b61045461055b366004614095565b610de5565b6103c560115481565b6103c57f000000000000000000000000000000000000000000000000000000000000000081565b6103c561059e3660046140e7565b6001600160a01b031660009081526004602052604090205490565b610454610e9f565b6103c5600d5481565b6103c560145481565b6104546105e13660046140ae565b610f31565b6103c5610ff5565b6103c56105fc3660046140e7565b60056020526000908152604090205481565b61045461061c366004614095565b611027565b61045461062f366004614028565b6110b0565b6103c560105481565b61045461064b3660046140e7565b6111c5565b6006546001600160a01b03166104c6565b61045461066f3660046140e7565b611380565b6103a6611443565b61045461068a366004614095565b611450565b6103c57fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6104546106c43660046140e7565b6114fc565b6104c66106d73660046140e7565b6013602052600090815260409020546001600160a01b031681565b610454610700366004614095565b611590565b6103e6610713366004614028565b61163c565b61045461072636600461418c565b611649565b600e546103e69060ff1681565b610454610746366004614095565b611889565b6103c5611896565b6103c5600c5481565b6103c56118d5565b6009546104c6906001600160a01b031681565b610454610785366004614095565b6118e0565b6104546107983660046141b1565b611974565b600b546104c6906001600160a01b031681565b6103c56107be3660046140ae565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6103c56107f7366004614095565b611a87565b61045461080a366004614095565b611ac1565b6103c561081d366004614095565b611b4a565b6103c5611b7e565b6104546108383660046140e7565b611c1e565b600a546104c6906001600160a01b031681565b610454611d3e565b600080546108659061421f565b80601f01602080910402602001604051908101604052809291908181526020018280546108919061421f565b80156108de5780601f106108b3576101008083540402835291602001916108de565b820191906000526020600020905b8154815290600101906020018083116108c157829003601f168201915b505050505081565b60006108f3338484611e03565b50600192915050565b600080610907610ff5565b90506000806109236127105b61091d8585611f11565b90611f1d565b905061092f8382611f29565b935050505090565b6001600160a01b03831660008181526003602090815260408083203380855292528220549192909190821480159061097157506000198114155b15610a0257600061099d856040518060600160405280602f81526020016146be602f9139849190611f35565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610a0d868686611f61565b6001925050505b9392505050565b6000610a2682611b4a565b905060008111610a7d5760405162461bcd60e51b815260206004820152601e60248201527f4d617374657243686566537472617465677956313a3a7769746864726177000060448201526064015b60405180910390fd5b610a868161209d565b600080610a94612710610913565b600954909150610ab7906001600160a01b031633610ab28685611f29565b6120c7565b610ac133856121b1565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250505050565b610b078282612287565b5050565b600b546001600160a01b03163314610b655760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610a74565b610b07828261247b565b6009546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b039091169063d505accf9060e401600060405180830381600087803b158015610bf857600080fd5b505af1158015610c0c573d6000803e3d6000fd5b50505050610c1a3386612287565b5050505050565b6006546001600160a01b03163314610c695760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6001600160a01b03811660009081526008602052604090205460ff1615610cd25760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610a74565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610d0491611df7565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b03163314610d865760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b600e5481151560ff909116151503610d9d57600080fd5b600e805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b03163314610e2d5760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b60008111610e3a57600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610e67573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610dda565b6006546001600160a01b03163314610ee75760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b03163314610f795760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190614259565b610b0757600080fd5b6000806110217f00000000000000000000000000000000000000000000000000000000000000006127da565b92915050565b6006546001600160a01b0316331461106f5760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b600c5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600c55565b6006546001600160a01b031633146110f85760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6000811161110557600080fd5b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015611152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111769190614259565b61117f57600080fd5b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b6006546001600160a01b0316331461120d5760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6000600754116112855760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610a74565b6001600160a01b03811660009081526008602052604090205460ff1615156001146113185760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610a74565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611346906001611f29565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b600b546001600160a01b031633146113da5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610a74565b600b54604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600180546108659061421f565b6006546001600160a01b031633146114985760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6127106114b060105483611df790919063ffffffff16565b11156114bb57600080fd5b60115460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1601155565b600b546001600160a01b031633146115565760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610a74565b6001600160a01b038116600090815260136020526040902080546001600160a01b031916905560145461158a906001611f29565b60145550565b6006546001600160a01b031633146115d85760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6127106115f060115483611df790919063ffffffff16565b11156115fb57600080fd5b60105460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1601055565b60006108f3338484611f61565b6006546001600160a01b031633146116915760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156116da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fe9190614276565b90506117297f000000000000000000000000000000000000000000000000000000000000000061286d565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117969190614276565b9050836117a38284611f29565b10156118175760405162461bcd60e51b815260206004820152602960248201527f4d617374657243686566537472617465677956313a3a7265736375654465706c60448201527f6f79656446756e647300000000000000000000000000000000000000000000006064820152608401610a74565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611840610ff5565b6002546040805192835260208301919091520160405180910390a1600e5460ff161515600114801561187457506001831515145b15611883576118836000610d3e565b50505050565b6118933382612287565b50565b6000806118a16118d5565b9050600c5481106118cd576118c761271061091d60105484611f1190919063ffffffff16565b91505090565b600091505090565b600080610a14612963565b6006546001600160a01b031633146119285760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b801561193357600080fd5b600f5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600f55565b428410156119c45760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610a74565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a919086611a11836142a5565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050611a728882868686612be9565b611a7d888888611e03565b5050505050505050565b6000611a9d611a94610ff5565b60025490611f11565b600003611aa8575090565b611021611ab3610ff5565b60025461091d908590611f11565b6006546001600160a01b03163314611b095760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b600d5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600d55565b6000611b57611a94610ff5565b600003611b6657506000919050565b61102160025461091d611b77610ff5565b8590611f11565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611bb391906142be565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b03163314611c665760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6001600160a01b038116611ce25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a74565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b323314611d8d5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610a74565b600080611d98612963565b91509150600c54811015611dee5760405162461bcd60e51b815260206004820152601e60248201527f4d617374657243686566537472617465677956313a3a7265696e7665737400006044820152606401610a74565b610b0782612d49565b6000610a148284614359565b6001600160a01b038316611e595760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610a74565b6001600160a01b038216611eaf5760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610a74565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610a148284614371565b6000610a148284614390565b6000610a1482846143b2565b60008184841115611f595760405162461bcd60e51b8152600401610a749190614000565b505050900390565b6001600160a01b038216611fdd5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610a74565b61201a816040518060600160405280602e8152602001614714602e91396001600160a01b0386166000908152600460205260409020549190611f35565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546120499082611df7565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611f049085815260200190565b6118937f000000000000000000000000000000000000000000000000000000000000000082612e71565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015612116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213a9190614259565b6121ac5760405162461bcd60e51b815260206004820152602a60248201527f4d617374657243686566537472617465677956313a3a5452414e534645525f4660448201527f524f4d5f4641494c4544000000000000000000000000000000000000000000006064820152608401610a74565b505050565b6121ee816040518060600160405280602781526020016146ed602791396001600160a01b0385166000908152600460205260409020549190611f35565b60046000846001600160a01b03166001600160a01b031681526020019081526020016000208190555061223e81604051806060016040528060278152602001614677602791396002549190611f35565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600e5460ff1615156001146122de5760405162461bcd60e51b815260206004820152601e60248201527f4d617374657243686566537472617465677956313a3a5f6465706f73697400006044820152606401610a74565b600d541561230b576000806122f1612963565b91509150600d548111156123085761230882612d49565b50505b6009546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561237b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239f9190614259565b6124115760405162461bcd60e51b815260206004820152602560248201527f4d617374657243686566537472617465677956313a3a7472616e73666572206660448201527f61696c65640000000000000000000000000000000000000000000000000000006064820152608401610a74565b60008061241f612710610913565b9050612437846124326107f78685611f29565b612efa565b61244083612f7e565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610aef91815260200190565b600a546001600160a01b0383811691161461279757806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f291906143c9565b6001600160a01b0316826001600160a01b03160361261457600a54604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516001600160a01b039283169284169163d21220a79160048083019260209291908290030181865afa15801561256f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259391906143c9565b6001600160a01b03161461260f5760405162461bcd60e51b815260206004820152603a60248201527f537761702070616972207377617050616972506f6f6c52657761726420646f6560448201527f73206e6f7420636f6e7461696e2072657761726420746f6b656e0000000000006064820152608401610a74565b612797565b600a54604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160a01b0392831692841691630dfe16819160048083019260209291908290030181865afa158015612679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269d91906143c9565b6001600160a01b03161480156127255750816001600160a01b0316816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271a91906143c9565b6001600160a01b0316145b6127975760405162461bcd60e51b815260206004820152603a60248201527f537761702070616972207377617050616972506f6f6c52657761726420646f6560448201527f73206e6f7420636f6e7461696e2072657761726420746f6b656e0000000000006064820152608401610a74565b6001600160a01b03828116600090815260136020526040902080546001600160a01b0319169183169190911790556014546127d3906001611df7565b6014555050565b6017546040517f93f1a40b000000000000000000000000000000000000000000000000000000008152600481018390523060248201526000916001600160a01b0316906393f1a40b906044016040805180830381865afa158015612842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286691906143e6565b5092915050565b6017546040517f2f940c70000000000000000000000000000000000000000000000000000000008152600481018390523060248201526001600160a01b0390911690632f940c7090604401600060405180830381600087803b1580156128d257600080fd5b505af11580156128e6573d6000803e3d6000fd5b505060095460175460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529116925063095ea7b391506044016020604051808303816000875af115801561293f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b079190614259565b60606000806129917f000000000000000000000000000000000000000000000000000000000000000061301e565b600a546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156129df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a039190614276565b905060005b8251811015612bdf576000838281518110612a2557612a2561440a565b6020026020010151600001519050600060136000868581518110612a4b57612a4b61440a565b602090810291909101810151516001600160a01b03908116835290820192909252604090810160009081205491516370a0823160e01b81523060048201529183169350918416906370a0823190602401602060405180830381865afa158015612ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612adc9190614276565b600a549091506001600160a01b03848116911614612b96576000612b26878681518110612b0b57612b0b61440a565b60200260200101516020015183611df790919063ffffffff16565b9050600081118015612b4057506001600160a01b03831615155b15612b9057600a54612b6a90612b6390839087906001600160a01b03168761337d565b8790611df7565b955080878681518110612b7f57612b7f61440a565b602002602001015160200181815250505b50612bc9565b612bc6868581518110612bab57612bab61440a565b60200260200101516020015186611df790919063ffffffff16565b94505b5050508080612bd7906142a5565b915050612a08565b5090939092509050565b6000612bf3611b7e565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612c99573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612ccf5750866001600160a01b0316816001600160a01b0316145b612d405760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610a74565b50505050505050565b612d727f000000000000000000000000000000000000000000000000000000000000000061343b565b6000612d7d826134b4565b90506000612d9c61271061091d60115485611f1190919063ffffffff16565b90508015612dc157600a54600b54612dc1916001600160a01b039081169116836120c7565b6000612dde61271061091d60105486611f1190919063ffffffff16565b90508015612dfd57600a54612dfd906001600160a01b031633836120c7565b6000612e1b612e1683612e108787611f29565b90611f29565b61368d565b9050612e2681612f7e565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234612e4f610ff5565b6002546040805192835260208301919091520160405180910390a15050505050565b6017546040517f0ad58d2f00000000000000000000000000000000000000000000000000000000815260048101849052602481018390523060448201526001600160a01b0390911690630ad58d2f906064015b600060405180830381600087803b158015612ede57600080fd5b505af1158015612ef2573d6000803e3d6000fd5b505050505050565b600254612f079082611df7565b6002556001600160a01b038216600090815260046020526040902054612f2d9082611df7565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061227b9085815260200190565b60008111612ff45760405162461bcd60e51b815260206004820152602960248201527f4d617374657243686566537472617465677956313a3a5f7374616b654465706f60448201527f736974546f6b656e7300000000000000000000000000000000000000000000006064820152608401610a74565b6118937f0000000000000000000000000000000000000000000000000000000000000000826136bc565b6017546040517f98969e82000000000000000000000000000000000000000000000000000000008152600481018390523060248201526060916000916001600160a01b03909116906398969e8290604401602060405180830381865afa15801561308c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b09190614276565b6017546040517fc346253d000000000000000000000000000000000000000000000000000000008152600481018690529192506000916001600160a01b039091169063c346253d90602401602060405180830381865afa158015613118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313c91906143c9565b905060606001600160a01b038216156132f9576040517fd63b3c49000000000000000000000000000000000000000000000000000000008152600060048201819052306024830152604482018590529081906001600160a01b0385169063d63b3c4990606401600060405180830381865afa1580156131bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131e791908101906144f6565b815191935091506131f9906001611df7565b67ffffffffffffffff81111561321157613211614420565b60405190808252806020026020018201604052801561325657816020015b604080518082019091526000808252602082015281526020019060019003908161322f5790505b50925060005b82518110156132f15760405180604001604052808483815181106132825761328261440a565b60200260200101516001600160a01b031681526020018383815181106132aa576132aa61440a565b6020026020010151815250848260016132c39190614359565b815181106132d3576132d361440a565b602002602001018190525080806132e9906142a5565b91505061325c565b505050613338565b60408051600180825281830190925290816020015b604080518082019091526000808252602082015281526020019060019003908161330e5790505090505b604080518082019091526018546001600160a01b03168152602081018490528151829060009061336a5761336a61440a565b6020908102919091010152949350505050565b60008061338a858561378d565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156133ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f291906145d2565b5091509150866001600160a01b0316836001600160a01b03161461341257905b61342f88836001600160701b0316836001600160701b03166137be565b98975050505050505050565b6017546040517f18fccc76000000000000000000000000000000000000000000000000000000008152600481018390523060248201526001600160a01b03909116906318fccc7690604401600060405180830381600087803b1580156134a057600080fd5b505af1158015610c1a573d6000803e3d6000fd5b600a546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015613501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135259190614276565b905060005b83518110156128665760008482815181106135475761354761440a565b602090810291909101810151516001600160a01b0380821660009081526013909352604083205488519294501691908790859081106135885761358861440a565b6020026020010151602001519050600081111561367757600a546001600160a01b03908116908416036136405747801561363a5773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561360b57600080fd5b505af115801561361f573d6000803e3d6000fd5b50505050506136378287611df790919063ffffffff16565b95505b50613677565b6001600160a01b0382161561367757600a546136749061366d90839086906001600160a01b03168661380c565b8690611df7565b94505b5050508080613685906142a5565b91505061352a565b600a546009546015546016546000936110219386936001600160a01b0392831693918316929081169116613999565b60095460175460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015613711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137359190614259565b506017546040517f8dbdbe6d00000000000000000000000000000000000000000000000000000000815260048101849052602481018390523060448201526001600160a01b0390911690638dbdbe6d90606401612ec4565b600080826001600160a01b0316846001600160a01b0316106137b05782846137b3565b83835b915091509250929050565b6000806137cd856103e5611f11565b905060006137db8285611f11565b905060006137f5836137ef886103e8611f11565b90611df7565b90506138018282611f1d565b979650505050505050565b600080613819858561378d565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561385d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388191906145d2565b5091509150866001600160a01b0316836001600160a01b0316146138a157905b6000806138c18a856001600160701b0316856001600160701b03166137be565b9050886001600160a01b0316856001600160a01b0316146138de57905b6138f26001600160a01b038a16888c613b4b565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f9061394a9085908590309060248101614622565b600060405180830381600087803b15801561396457600080fd5b505af1158015613978573d6000803e3d6000fd5b50505050818111613989578161398b565b805b9a9950505050505050505050565b6000806139a7876002611f1d565b905060008111613a1f5760405162461bcd60e51b815260206004820152602f60248201527f4465784c6962726172793a3a5f636f6e76657274526577617264546f6b656e7360448201527f546f4465706f736974546f6b656e7300000000000000000000000000000000006064820152608401610a74565b6000856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8391906143c9565b9050816001600160a01b0388811690831614613aa857613aa58389848961380c565b90505b6000876001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0c91906143c9565b9050836001600160a01b038a811690831614613b3157613b2e858b848a61380c565b90505b613b3c898483613bb2565b9b9a5050505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526121ac908490613da7565b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1991906145d2565b50915091506000613c3d86846001600160701b0316846001600160701b0316613e8c565b905084811115613c6a57849050613c6785836001600160701b0316856001600160701b0316613e8c565b95505b613ce18787896001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd191906143c9565b6001600160a01b03169190613b4b565b613d248782896001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613cad573d6000803e3d6000fd5b6040517f6a6278420000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03881690636a627842906024016020604051808303816000875af1158015613d83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138019190614276565b6000613dfc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ea49092919063ffffffff16565b8051909150156121ac5780806020019051810190613e1a9190614259565b6121ac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a74565b6000613e9c8361091d8685611f11565b949350505050565b6060613e9c8484600085856001600160a01b0385163b613f065760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a74565b600080866001600160a01b03168587604051613f22919061465a565b60006040518083038185875af1925050503d8060008114613f5f576040519150601f19603f3d011682016040523d82523d6000602084013e613f64565b606091505b509150915061380182828660608315613f7e575081610a14565b825115613f8e5782518084602001fd5b8160405162461bcd60e51b8152600401610a749190614000565b60005b83811015613fc3578181015183820152602001613fab565b838111156118835750506000910152565b60008151808452613fec816020860160208601613fa8565b601f01601f19169290920160200192915050565b602081526000610a146020830184613fd4565b6001600160a01b038116811461189357600080fd5b6000806040838503121561403b57600080fd5b823561404681614013565b946020939093013593505050565b60008060006060848603121561406957600080fd5b833561407481614013565b9250602084013561408481614013565b929592945050506040919091013590565b6000602082840312156140a757600080fd5b5035919050565b600080604083850312156140c157600080fd5b82356140cc81614013565b915060208301356140dc81614013565b809150509250929050565b6000602082840312156140f957600080fd5b8135610a1481614013565b803560ff8116811461411557600080fd5b919050565b600080600080600060a0868803121561413257600080fd5b853594506020860135935061414960408701614104565b94979396509394606081013594506080013592915050565b801515811461189357600080fd5b60006020828403121561418157600080fd5b8135610a1481614161565b6000806040838503121561419f57600080fd5b8235915060208301356140dc81614161565b600080600080600080600060e0888a0312156141cc57600080fd5b87356141d781614013565b965060208801356141e781614013565b9550604088013594506060880135935061420360808901614104565b925060a0880135915060c0880135905092959891949750929550565b600181811c9082168061423357607f821691505b60208210810361425357634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561426b57600080fd5b8151610a1481614161565b60006020828403121561428857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016142b7576142b761428f565b5060010190565b600080835481600182811c9150808316806142da57607f831692505b602080841082036142f957634e487b7160e01b86526022600452602486fd5b81801561430d576001811461431e5761434b565b60ff1986168952848901965061434b565b60008a81526020902060005b868110156143435781548b82015290850190830161432a565b505084890196505b509498975050505050505050565b6000821982111561436c5761436c61428f565b500190565b600081600019048311821515161561438b5761438b61428f565b500290565b6000826143ad57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156143c4576143c461428f565b500390565b6000602082840312156143db57600080fd5b8151610a1481614013565b600080604083850312156143f957600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561445f5761445f614420565b604052919050565b600067ffffffffffffffff82111561448157614481614420565b5060051b60200190565b600082601f83011261449c57600080fd5b815160206144b16144ac83614467565b614436565b82815260059290921b840181019181810190868411156144d057600080fd5b8286015b848110156144eb57805183529183019183016144d4565b509695505050505050565b6000806040838503121561450957600080fd5b825167ffffffffffffffff8082111561452157600080fd5b818501915085601f83011261453557600080fd5b815160206145456144ac83614467565b82815260059290921b8401810191818101908984111561456457600080fd5b948201945b8386101561458b57855161457c81614013565b82529482019490820190614569565b918801519196509093505050808211156145a457600080fd5b506145b18582860161448b565b9150509250929050565b80516001600160701b038116811461411557600080fd5b6000806000606084860312156145e757600080fd5b6145f0846145bb565b92506145fe602085016145bb565b9150604084015163ffffffff8116811461461757600080fd5b809150509250925092565b8481528360208201526001600160a01b03831660408201526080606082015260006146506080830184613fd4565b9695505050505050565b6000825161466c818460208701613fa8565b919091019291505056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220682fb8cb40cef4715ae0948c495bc933e6278348fdb32df3d9755be34d47b54364736f6c634300080d0033537761702070616972207377617050616972506f6f6c52657761726420646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e0000000000004f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103995760003560e01c80638980f11f116101e9578063b9e57b801161010f578063dd62ed3e116100ad578063ed24911d1161007c578063ed24911d14610822578063f2fde38b1461082a578063f7c618c11461083d578063fdb5a03e1461085057600080fd5b8063dd62ed3e146107b0578063dd8ce4d6146107e9578063e21ac825146107fc578063eab89a5a1461080f57600080fd5b8063c89039c5116100e9578063c89039c514610764578063cff1b6ef14610777578063d505accf1461078a578063da09c72c1461079d57600080fd5b8063b9e57b801461074b578063bd079f5514610753578063c4b24a461461075c57600080fd5b80639e4e731811610187578063a9059cbb11610156578063a9059cbb14610705578063ac0d31ff14610718578063b52a321f1461072b578063b6b55f251461073857600080fd5b80639e4e73181461068f578063a4d5e67c146106b6578063a5534e71146106c9578063a8ae2b7c146106f257600080fd5b80638da5cb5b116101c35780638da5cb5b146106505780639291d5631461066157806395d89b411461067457806399729ec11461067c57600080fd5b80638980f11f146106215780638aff733d146106345780638b73e6061461063d57600080fd5b8063483c2ef0116102ce57806370a082311161026c5780637ae267731161023b5780637ae26773146105d35780637d882097146105e65780637ecebe00146105ee578063818372301461060e57600080fd5b806370a0823114610590578063715018a6146105b9578063789139bc146105c157806379085425146105ca57600080fd5b80634e77ace5116102a85780634e77ace51461053a5780634ebb79161461054d5780635ea682ea146105605780635eaec0e41461056957600080fd5b8063483c2ef0146104f15780634a970be7146105145780634bebd1e71461052757600080fd5b80632e1a7d4d1161033b578063313ce56711610315578063313ce567146104905780633bdc6e72146104aa5780634005760a146104b357806340b47e1a146104de57600080fd5b80632e1a7d4d146104415780632f4f21e21461045657806330adf81f1461046957600080fd5b80630f23475d116103775780630f23475d146103f657806318160ddd146103fe57806320606b701461040757806323b872dd1461042e57600080fd5b806306fdde031461039e57806307677111146103bc578063095ea7b3146103d3575b600080fd5b6103a6610858565b6040516103b39190614000565b60405180910390f35b6103c5600f5481565b6040519081526020016103b3565b6103e66103e1366004614028565b6108e6565b60405190151581526020016103b3565b6103c56108fc565b6103c560025481565b6103c57f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6103e661043c366004614054565b610937565b61045461044f366004614095565b610a1b565b005b610454610464366004614028565b610afd565b6103c57f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b610498601281565b60405160ff90911681526020016103b3565b6103c560075481565b6017546104c6906001600160a01b031681565b6040516001600160a01b0390911681526020016103b3565b6104546104ec3660046140ae565b610b0b565b6103e66104ff3660046140e7565b60086020526000908152604090205460ff1681565b61045461052236600461411a565b610b6f565b6104546105353660046140e7565b610c21565b61045461054836600461416f565b610d3e565b61045461055b366004614095565b610de5565b6103c560115481565b6103c57f000000000000000000000000000000000000000000000000000000000000000081565b6103c561059e3660046140e7565b6001600160a01b031660009081526004602052604090205490565b610454610e9f565b6103c5600d5481565b6103c560145481565b6104546105e13660046140ae565b610f31565b6103c5610ff5565b6103c56105fc3660046140e7565b60056020526000908152604090205481565b61045461061c366004614095565b611027565b61045461062f366004614028565b6110b0565b6103c560105481565b61045461064b3660046140e7565b6111c5565b6006546001600160a01b03166104c6565b61045461066f3660046140e7565b611380565b6103a6611443565b61045461068a366004614095565b611450565b6103c57fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6104546106c43660046140e7565b6114fc565b6104c66106d73660046140e7565b6013602052600090815260409020546001600160a01b031681565b610454610700366004614095565b611590565b6103e6610713366004614028565b61163c565b61045461072636600461418c565b611649565b600e546103e69060ff1681565b610454610746366004614095565b611889565b6103c5611896565b6103c5600c5481565b6103c56118d5565b6009546104c6906001600160a01b031681565b610454610785366004614095565b6118e0565b6104546107983660046141b1565b611974565b600b546104c6906001600160a01b031681565b6103c56107be3660046140ae565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6103c56107f7366004614095565b611a87565b61045461080a366004614095565b611ac1565b6103c561081d366004614095565b611b4a565b6103c5611b7e565b6104546108383660046140e7565b611c1e565b600a546104c6906001600160a01b031681565b610454611d3e565b600080546108659061421f565b80601f01602080910402602001604051908101604052809291908181526020018280546108919061421f565b80156108de5780601f106108b3576101008083540402835291602001916108de565b820191906000526020600020905b8154815290600101906020018083116108c157829003601f168201915b505050505081565b60006108f3338484611e03565b50600192915050565b600080610907610ff5565b90506000806109236127105b61091d8585611f11565b90611f1d565b905061092f8382611f29565b935050505090565b6001600160a01b03831660008181526003602090815260408083203380855292528220549192909190821480159061097157506000198114155b15610a0257600061099d856040518060600160405280602f81526020016146be602f9139849190611f35565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610a0d868686611f61565b6001925050505b9392505050565b6000610a2682611b4a565b905060008111610a7d5760405162461bcd60e51b815260206004820152601e60248201527f4d617374657243686566537472617465677956313a3a7769746864726177000060448201526064015b60405180910390fd5b610a868161209d565b600080610a94612710610913565b600954909150610ab7906001600160a01b031633610ab28685611f29565b6120c7565b610ac133856121b1565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250505050565b610b078282612287565b5050565b600b546001600160a01b03163314610b655760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610a74565b610b07828261247b565b6009546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b039091169063d505accf9060e401600060405180830381600087803b158015610bf857600080fd5b505af1158015610c0c573d6000803e3d6000fd5b50505050610c1a3386612287565b5050505050565b6006546001600160a01b03163314610c695760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6001600160a01b03811660009081526008602052604090205460ff1615610cd25760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610a74565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610d0491611df7565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b03163314610d865760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b600e5481151560ff909116151503610d9d57600080fd5b600e805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b03163314610e2d5760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b60008111610e3a57600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610e67573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610dda565b6006546001600160a01b03163314610ee75760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b03163314610f795760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190614259565b610b0757600080fd5b6000806110217f00000000000000000000000000000000000000000000000000000000000000006127da565b92915050565b6006546001600160a01b0316331461106f5760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b600c5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600c55565b6006546001600160a01b031633146110f85760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6000811161110557600080fd5b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015611152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111769190614259565b61117f57600080fd5b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b6006546001600160a01b0316331461120d5760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6000600754116112855760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610a74565b6001600160a01b03811660009081526008602052604090205460ff1615156001146113185760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610a74565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611346906001611f29565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b600b546001600160a01b031633146113da5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610a74565b600b54604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600180546108659061421f565b6006546001600160a01b031633146114985760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6127106114b060105483611df790919063ffffffff16565b11156114bb57600080fd5b60115460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1601155565b600b546001600160a01b031633146115565760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610a74565b6001600160a01b038116600090815260136020526040902080546001600160a01b031916905560145461158a906001611f29565b60145550565b6006546001600160a01b031633146115d85760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6127106115f060115483611df790919063ffffffff16565b11156115fb57600080fd5b60105460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1601055565b60006108f3338484611f61565b6006546001600160a01b031633146116915760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156116da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fe9190614276565b90506117297f000000000000000000000000000000000000000000000000000000000000000061286d565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117969190614276565b9050836117a38284611f29565b10156118175760405162461bcd60e51b815260206004820152602960248201527f4d617374657243686566537472617465677956313a3a7265736375654465706c60448201527f6f79656446756e647300000000000000000000000000000000000000000000006064820152608401610a74565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611840610ff5565b6002546040805192835260208301919091520160405180910390a1600e5460ff161515600114801561187457506001831515145b15611883576118836000610d3e565b50505050565b6118933382612287565b50565b6000806118a16118d5565b9050600c5481106118cd576118c761271061091d60105484611f1190919063ffffffff16565b91505090565b600091505090565b600080610a14612963565b6006546001600160a01b031633146119285760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b801561193357600080fd5b600f5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600f55565b428410156119c45760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610a74565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a919086611a11836142a5565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050611a728882868686612be9565b611a7d888888611e03565b5050505050505050565b6000611a9d611a94610ff5565b60025490611f11565b600003611aa8575090565b611021611ab3610ff5565b60025461091d908590611f11565b6006546001600160a01b03163314611b095760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b600d5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600d55565b6000611b57611a94610ff5565b600003611b6657506000919050565b61102160025461091d611b77610ff5565b8590611f11565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611bb391906142be565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b03163314611c665760405162461bcd60e51b8152602060048201819052602482015260008051602061469e8339815191526044820152606401610a74565b6001600160a01b038116611ce25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610a74565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b323314611d8d5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610a74565b600080611d98612963565b91509150600c54811015611dee5760405162461bcd60e51b815260206004820152601e60248201527f4d617374657243686566537472617465677956313a3a7265696e7665737400006044820152606401610a74565b610b0782612d49565b6000610a148284614359565b6001600160a01b038316611e595760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610a74565b6001600160a01b038216611eaf5760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610a74565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610a148284614371565b6000610a148284614390565b6000610a1482846143b2565b60008184841115611f595760405162461bcd60e51b8152600401610a749190614000565b505050900390565b6001600160a01b038216611fdd5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610a74565b61201a816040518060600160405280602e8152602001614714602e91396001600160a01b0386166000908152600460205260409020549190611f35565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546120499082611df7565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611f049085815260200190565b6118937f000000000000000000000000000000000000000000000000000000000000000082612e71565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015612116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213a9190614259565b6121ac5760405162461bcd60e51b815260206004820152602a60248201527f4d617374657243686566537472617465677956313a3a5452414e534645525f4660448201527f524f4d5f4641494c4544000000000000000000000000000000000000000000006064820152608401610a74565b505050565b6121ee816040518060600160405280602781526020016146ed602791396001600160a01b0385166000908152600460205260409020549190611f35565b60046000846001600160a01b03166001600160a01b031681526020019081526020016000208190555061223e81604051806060016040528060278152602001614677602791396002549190611f35565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600e5460ff1615156001146122de5760405162461bcd60e51b815260206004820152601e60248201527f4d617374657243686566537472617465677956313a3a5f6465706f73697400006044820152606401610a74565b600d541561230b576000806122f1612963565b91509150600d548111156123085761230882612d49565b50505b6009546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561237b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239f9190614259565b6124115760405162461bcd60e51b815260206004820152602560248201527f4d617374657243686566537472617465677956313a3a7472616e73666572206660448201527f61696c65640000000000000000000000000000000000000000000000000000006064820152608401610a74565b60008061241f612710610913565b9050612437846124326107f78685611f29565b612efa565b61244083612f7e565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610aef91815260200190565b600a546001600160a01b0383811691161461279757806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f291906143c9565b6001600160a01b0316826001600160a01b03160361261457600a54604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516001600160a01b039283169284169163d21220a79160048083019260209291908290030181865afa15801561256f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259391906143c9565b6001600160a01b03161461260f5760405162461bcd60e51b815260206004820152603a60248201527f537761702070616972207377617050616972506f6f6c52657761726420646f6560448201527f73206e6f7420636f6e7461696e2072657761726420746f6b656e0000000000006064820152608401610a74565b612797565b600a54604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160a01b0392831692841691630dfe16819160048083019260209291908290030181865afa158015612679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269d91906143c9565b6001600160a01b03161480156127255750816001600160a01b0316816001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271a91906143c9565b6001600160a01b0316145b6127975760405162461bcd60e51b815260206004820152603a60248201527f537761702070616972207377617050616972506f6f6c52657761726420646f6560448201527f73206e6f7420636f6e7461696e2072657761726420746f6b656e0000000000006064820152608401610a74565b6001600160a01b03828116600090815260136020526040902080546001600160a01b0319169183169190911790556014546127d3906001611df7565b6014555050565b6017546040517f93f1a40b000000000000000000000000000000000000000000000000000000008152600481018390523060248201526000916001600160a01b0316906393f1a40b906044016040805180830381865afa158015612842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286691906143e6565b5092915050565b6017546040517f2f940c70000000000000000000000000000000000000000000000000000000008152600481018390523060248201526001600160a01b0390911690632f940c7090604401600060405180830381600087803b1580156128d257600080fd5b505af11580156128e6573d6000803e3d6000fd5b505060095460175460405163095ea7b360e01b81526001600160a01b039182166004820152600060248201529116925063095ea7b391506044016020604051808303816000875af115801561293f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b079190614259565b60606000806129917f000000000000000000000000000000000000000000000000000000000000000061301e565b600a546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156129df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a039190614276565b905060005b8251811015612bdf576000838281518110612a2557612a2561440a565b6020026020010151600001519050600060136000868581518110612a4b57612a4b61440a565b602090810291909101810151516001600160a01b03908116835290820192909252604090810160009081205491516370a0823160e01b81523060048201529183169350918416906370a0823190602401602060405180830381865afa158015612ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612adc9190614276565b600a549091506001600160a01b03848116911614612b96576000612b26878681518110612b0b57612b0b61440a565b60200260200101516020015183611df790919063ffffffff16565b9050600081118015612b4057506001600160a01b03831615155b15612b9057600a54612b6a90612b6390839087906001600160a01b03168761337d565b8790611df7565b955080878681518110612b7f57612b7f61440a565b602002602001015160200181815250505b50612bc9565b612bc6868581518110612bab57612bab61440a565b60200260200101516020015186611df790919063ffffffff16565b94505b5050508080612bd7906142a5565b915050612a08565b5090939092509050565b6000612bf3611b7e565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612c99573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612ccf5750866001600160a01b0316816001600160a01b0316145b612d405760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610a74565b50505050505050565b612d727f000000000000000000000000000000000000000000000000000000000000000061343b565b6000612d7d826134b4565b90506000612d9c61271061091d60115485611f1190919063ffffffff16565b90508015612dc157600a54600b54612dc1916001600160a01b039081169116836120c7565b6000612dde61271061091d60105486611f1190919063ffffffff16565b90508015612dfd57600a54612dfd906001600160a01b031633836120c7565b6000612e1b612e1683612e108787611f29565b90611f29565b61368d565b9050612e2681612f7e565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234612e4f610ff5565b6002546040805192835260208301919091520160405180910390a15050505050565b6017546040517f0ad58d2f00000000000000000000000000000000000000000000000000000000815260048101849052602481018390523060448201526001600160a01b0390911690630ad58d2f906064015b600060405180830381600087803b158015612ede57600080fd5b505af1158015612ef2573d6000803e3d6000fd5b505050505050565b600254612f079082611df7565b6002556001600160a01b038216600090815260046020526040902054612f2d9082611df7565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061227b9085815260200190565b60008111612ff45760405162461bcd60e51b815260206004820152602960248201527f4d617374657243686566537472617465677956313a3a5f7374616b654465706f60448201527f736974546f6b656e7300000000000000000000000000000000000000000000006064820152608401610a74565b6118937f0000000000000000000000000000000000000000000000000000000000000000826136bc565b6017546040517f98969e82000000000000000000000000000000000000000000000000000000008152600481018390523060248201526060916000916001600160a01b03909116906398969e8290604401602060405180830381865afa15801561308c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b09190614276565b6017546040517fc346253d000000000000000000000000000000000000000000000000000000008152600481018690529192506000916001600160a01b039091169063c346253d90602401602060405180830381865afa158015613118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313c91906143c9565b905060606001600160a01b038216156132f9576040517fd63b3c49000000000000000000000000000000000000000000000000000000008152600060048201819052306024830152604482018590529081906001600160a01b0385169063d63b3c4990606401600060405180830381865afa1580156131bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526131e791908101906144f6565b815191935091506131f9906001611df7565b67ffffffffffffffff81111561321157613211614420565b60405190808252806020026020018201604052801561325657816020015b604080518082019091526000808252602082015281526020019060019003908161322f5790505b50925060005b82518110156132f15760405180604001604052808483815181106132825761328261440a565b60200260200101516001600160a01b031681526020018383815181106132aa576132aa61440a565b6020026020010151815250848260016132c39190614359565b815181106132d3576132d361440a565b602002602001018190525080806132e9906142a5565b91505061325c565b505050613338565b60408051600180825281830190925290816020015b604080518082019091526000808252602082015281526020019060019003908161330e5790505090505b604080518082019091526018546001600160a01b03168152602081018490528151829060009061336a5761336a61440a565b6020908102919091010152949350505050565b60008061338a858561378d565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156133ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f291906145d2565b5091509150866001600160a01b0316836001600160a01b03161461341257905b61342f88836001600160701b0316836001600160701b03166137be565b98975050505050505050565b6017546040517f18fccc76000000000000000000000000000000000000000000000000000000008152600481018390523060248201526001600160a01b03909116906318fccc7690604401600060405180830381600087803b1580156134a057600080fd5b505af1158015610c1a573d6000803e3d6000fd5b600a546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015613501573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135259190614276565b905060005b83518110156128665760008482815181106135475761354761440a565b602090810291909101810151516001600160a01b0380821660009081526013909352604083205488519294501691908790859081106135885761358861440a565b6020026020010151602001519050600081111561367757600a546001600160a01b03908116908416036136405747801561363a5773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561360b57600080fd5b505af115801561361f573d6000803e3d6000fd5b50505050506136378287611df790919063ffffffff16565b95505b50613677565b6001600160a01b0382161561367757600a546136749061366d90839086906001600160a01b03168661380c565b8690611df7565b94505b5050508080613685906142a5565b91505061352a565b600a546009546015546016546000936110219386936001600160a01b0392831693918316929081169116613999565b60095460175460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b3906044016020604051808303816000875af1158015613711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137359190614259565b506017546040517f8dbdbe6d00000000000000000000000000000000000000000000000000000000815260048101849052602481018390523060448201526001600160a01b0390911690638dbdbe6d90606401612ec4565b600080826001600160a01b0316846001600160a01b0316106137b05782846137b3565b83835b915091509250929050565b6000806137cd856103e5611f11565b905060006137db8285611f11565b905060006137f5836137ef886103e8611f11565b90611df7565b90506138018282611f1d565b979650505050505050565b600080613819858561378d565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561385d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388191906145d2565b5091509150866001600160a01b0316836001600160a01b0316146138a157905b6000806138c18a856001600160701b0316856001600160701b03166137be565b9050886001600160a01b0316856001600160a01b0316146138de57905b6138f26001600160a01b038a16888c613b4b565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f9061394a9085908590309060248101614622565b600060405180830381600087803b15801561396457600080fd5b505af1158015613978573d6000803e3d6000fd5b50505050818111613989578161398b565b805b9a9950505050505050505050565b6000806139a7876002611f1d565b905060008111613a1f5760405162461bcd60e51b815260206004820152602f60248201527f4465784c6962726172793a3a5f636f6e76657274526577617264546f6b656e7360448201527f546f4465706f736974546f6b656e7300000000000000000000000000000000006064820152608401610a74565b6000856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8391906143c9565b9050816001600160a01b0388811690831614613aa857613aa58389848961380c565b90505b6000876001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0c91906143c9565b9050836001600160a01b038a811690831614613b3157613b2e858b848a61380c565b90505b613b3c898483613bb2565b9b9a5050505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526121ac908490613da7565b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1991906145d2565b50915091506000613c3d86846001600160701b0316846001600160701b0316613e8c565b905084811115613c6a57849050613c6785836001600160701b0316856001600160701b0316613e8c565b95505b613ce18787896001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015613cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd191906143c9565b6001600160a01b03169190613b4b565b613d248782896001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613cad573d6000803e3d6000fd5b6040517f6a6278420000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03881690636a627842906024016020604051808303816000875af1158015613d83573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138019190614276565b6000613dfc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ea49092919063ffffffff16565b8051909150156121ac5780806020019051810190613e1a9190614259565b6121ac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a74565b6000613e9c8361091d8685611f11565b949350505050565b6060613e9c8484600085856001600160a01b0385163b613f065760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a74565b600080866001600160a01b03168587604051613f22919061465a565b60006040518083038185875af1925050503d8060008114613f5f576040519150601f19603f3d011682016040523d82523d6000602084013e613f64565b606091505b509150915061380182828660608315613f7e575081610a14565b825115613f8e5782518084602001fd5b8160405162461bcd60e51b8152600401610a749190614000565b60005b83811015613fc3578181015183820152602001613fab565b838111156118835750506000910152565b60008151808452613fec816020860160208601613fa8565b601f01601f19169290920160200192915050565b602081526000610a146020830184613fd4565b6001600160a01b038116811461189357600080fd5b6000806040838503121561403b57600080fd5b823561404681614013565b946020939093013593505050565b60008060006060848603121561406957600080fd5b833561407481614013565b9250602084013561408481614013565b929592945050506040919091013590565b6000602082840312156140a757600080fd5b5035919050565b600080604083850312156140c157600080fd5b82356140cc81614013565b915060208301356140dc81614013565b809150509250929050565b6000602082840312156140f957600080fd5b8135610a1481614013565b803560ff8116811461411557600080fd5b919050565b600080600080600060a0868803121561413257600080fd5b853594506020860135935061414960408701614104565b94979396509394606081013594506080013592915050565b801515811461189357600080fd5b60006020828403121561418157600080fd5b8135610a1481614161565b6000806040838503121561419f57600080fd5b8235915060208301356140dc81614161565b600080600080600080600060e0888a0312156141cc57600080fd5b87356141d781614013565b965060208801356141e781614013565b9550604088013594506060880135935061420360808901614104565b925060a0880135915060c0880135905092959891949750929550565b600181811c9082168061423357607f821691505b60208210810361425357634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561426b57600080fd5b8151610a1481614161565b60006020828403121561428857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016142b7576142b761428f565b5060010190565b600080835481600182811c9150808316806142da57607f831692505b602080841082036142f957634e487b7160e01b86526022600452602486fd5b81801561430d576001811461431e5761434b565b60ff1986168952848901965061434b565b60008a81526020902060005b868110156143435781548b82015290850190830161432a565b505084890196505b509498975050505050505050565b6000821982111561436c5761436c61428f565b500190565b600081600019048311821515161561438b5761438b61428f565b500290565b6000826143ad57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156143c4576143c461428f565b500390565b6000602082840312156143db57600080fd5b8151610a1481614013565b600080604083850312156143f957600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561445f5761445f614420565b604052919050565b600067ffffffffffffffff82111561448157614481614420565b5060051b60200190565b600082601f83011261449c57600080fd5b815160206144b16144ac83614467565b614436565b82815260059290921b840181019181810190868411156144d057600080fd5b8286015b848110156144eb57805183529183019183016144d4565b509695505050505050565b6000806040838503121561450957600080fd5b825167ffffffffffffffff8082111561452157600080fd5b818501915085601f83011261453557600080fd5b815160206145456144ac83614467565b82815260059290921b8401810191818101908984111561456457600080fd5b948201945b8386101561458b57855161457c81614013565b82529482019490820190614569565b918801519196509093505050808211156145a457600080fd5b506145b18582860161448b565b9150509250929050565b80516001600160701b038116811461411557600080fd5b6000806000606084860312156145e757600080fd5b6145f0846145bb565b92506145fe602085016145bb565b9150604084015163ffffffff8116811461461757600080fd5b809150509250925092565b8481528360208201526001600160a01b03831660408201526080606082015260006146506080830184613fd4565b9695505050505050565b6000825161466c818460208701613fa8565b919091019291505056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220682fb8cb40cef4715ae0948c495bc933e6278348fdb32df3d9755be34d47b54364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of tokens to deposit"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens",
          "amount": "deposit tokens"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens after withdraw fee"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueDeployedFunds(uint256,bool)": {
        "params": {
          "disableDeposits": "bool",
          "minReturnAmountAccepted": "min deposit tokens to receive"
        }
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Deprecated; Kept for compatibility",
        "params": {
          "newValue": "fee in BIPS; required to be 0"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "receipt tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit on behalf of another account"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance after withdraw fee"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "rescueDeployedFunds(uint256,bool)": {
        "notice": "Rescue all available deployed deposit tokens back to Strategy"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Redeem receipt tokens for deposit tokens"
      }
    },
    "notice": "notice: this strategy is not handling extra reward and rewarders. we are waiting for the Pangolin team to provide additional information on the rewarders",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 556,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 559,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 564,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 570,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 574,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 590,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7409,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7522,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7526,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1965,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)4869"
      },
      {
        "astId": 1968,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)4869"
      },
      {
        "astId": 1970,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "devAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1972,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1974,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1976,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1978,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1980,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1982,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 9772,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "stakingContract",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 9776,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "rewardSwapPairs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9779,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "rewardCount",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 10857,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "swapPairToken0",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 10859,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "swapPairToken1",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 38029,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "miniChef",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IMiniChefV2)38437"
      },
      {
        "astId": 38031,
        "contract": "contracts/strategies/pangolin/PangolinV2VariableRewardsStrategyForLP.sol:PangolinV2VariableRewardsStrategyForLP",
        "label": "poolRewardToken",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4869": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMiniChefV2)38437": {
        "encoding": "inplace",
        "label": "contract IMiniChefV2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}