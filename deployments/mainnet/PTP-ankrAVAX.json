{
  "address": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapPairToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "voterProxy",
              "type": "address"
            }
          ],
          "internalType": "struct PlatypusStrategy.PlatypusStrategySettings",
          "name": "_platypusStrategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "platformToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "reward",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "swapPair",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "swapFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct VariableRewardsStrategy.RewardSwapPair[]",
              "name": "rewardSwapPairs",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "timelock",
              "type": "address"
            }
          ],
          "internalType": "struct VariableRewardsStrategy.VariableRewardsStrategySettings",
          "name": "_variableRewardsStrategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakStrategyV2.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "AddReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RemoveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PTP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapFee",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ankrAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IPlatypusAsset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPlatypusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "contract IPlatypusVoterProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSwapPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voterProxy",
          "type": "address"
        }
      ],
      "name": "setPlatypusVoterProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPairToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slippageBips",
          "type": "uint256"
        }
      ],
      "name": "updateMaxSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
    "transactionIndex": 0,
    "gasUsed": "5301952",
    "logsBloom": "0x
    "blockHash": "0x3f842905847b7d999e97ede58ff0e4331a3da642c36ddb0e273851e65502ceac",
    "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 25423637,
        "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
        "address": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3f842905847b7d999e97ede58ff0e4331a3da642c36ddb0e273851e65502ceac"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25423637,
        "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
        "address": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000",
        "logIndex": 1,
        "blockHash": "0x3f842905847b7d999e97ede58ff0e4331a3da642c36ddb0e273851e65502ceac"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25423637,
        "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
        "address": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 2,
        "blockHash": "0x3f842905847b7d999e97ede58ff0e4331a3da642c36ddb0e273851e65502ceac"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25423637,
        "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
        "address": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c",
        "logIndex": 3,
        "blockHash": "0x3f842905847b7d999e97ede58ff0e4331a3da642c36ddb0e273851e65502ceac"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25423637,
        "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
        "address": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
        "topics": [
          "0x916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80"
        ],
        "data": "0x00000000000000000000000022d4002028f537599be9f666d1c4fa138522f9c8000000000000000000000000cdfd91eea657cc2701117fe9711c9a4f61feed23",
        "logIndex": 4,
        "blockHash": "0x3f842905847b7d999e97ede58ff0e4331a3da642c36ddb0e273851e65502ceac"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25423637,
        "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
        "address": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
        "topics": [
          "0x916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80"
        ],
        "data": "0x000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c70000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0x3f842905847b7d999e97ede58ff0e4331a3da642c36ddb0e273851e65502ceac"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25423637,
        "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
        "address": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 6,
        "blockHash": "0x3f842905847b7d999e97ede58ff0e4331a3da642c36ddb0e273851e65502ceac"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25423637,
        "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
        "address": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x3f842905847b7d999e97ede58ff0e4331a3da642c36ddb0e273851e65502ceac"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 25423637,
        "transactionHash": "0xb0acb3f6c55f8c1ced53c1c52e17de4cbe369d2da672cb6b9a67eb11ab8b969e",
        "address": "0x63aeF346E5797740D44f2382De5e115853AeAac3",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0x3f842905847b7d999e97ede58ff0e4331a3da642c36ddb0e273851e65502ceac"
      }
    ],
    "blockNumber": 25423637,
    "cumulativeGasUsed": "5301952",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "pool": "0xded29df6b2193b885f45b5f5027ed405291a96c1",
      "swapPairToken": "0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7",
      "pid": "28",
      "maxSlippage": "100",
      "voterProxy": "0xE7ff20a6704bDab44B34cE6e6ef4776898Cc66bf"
    },
    {
      "name": "Yield Yak: Platypus ankrAVAX",
      "platformToken": "0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7",
      "rewardSwapPairs": [
        {
          "reward": "0x22d4002028f537599be9f666d1c4fa138522f9c8",
          "swapPair": "0xcdfd91eea657cc2701117fe9711c9a4f61feed23",
          "swapFee": "3"
        },
        {
          "reward": "0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7",
          "swapPair": "0x0000000000000000000000000000000000000000",
          "swapFee": "0"
        }
      ],
      "timelock": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
    },
    {
      "depositToken": "0xc3344870d52688874b06d844E0C36cc39FC727F6",
      "rewardToken": "0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7",
      "minTokensToReinvest": "100000000000000",
      "adminFeeBips": 0,
      "devFeeBips": 700,
      "reinvestRewardBips": 300
    }
  ],
  "solcInputHash": "db80798b927e86720928bf25544cfcc9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPairToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voterProxy\",\"type\":\"address\"}],\"internalType\":\"struct PlatypusStrategy.PlatypusStrategySettings\",\"name\":\"_platypusStrategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"platformToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"internalType\":\"struct VariableRewardsStrategy.RewardSwapPair[]\",\"name\":\"rewardSwapPairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"timelock\",\"type\":\"address\"}],\"internalType\":\"struct VariableRewardsStrategy.VariableRewardsStrategySettings\",\"name\":\"_variableRewardsStrategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct YakStrategyV2.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PTP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ankrAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IPlatypusAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPlatypusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract IPlatypusVoterProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSwapPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterProxy\",\"type\":\"address\"}],\"name\":\"setPlatypusVoterProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPairToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippageBips\",\"type\":\"uint256\"}],\"name\":\"updateMaxSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\",\"_deadline\":\"The time at which to expire the signature\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens after withdraw fee\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Deprecated; Kept for compatibility\",\"params\":{\"newValue\":\"fee in BIPS; required to be 0\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxSwapSlippage(uint256)\":{\"details\":\"Function name matches interface for FeeCollector\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens available to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance after withdraw fee\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxSwapSlippage(uint256)\":{\"notice\":\"Update max slippage for withdrawal\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol\":\"AnkrAvaxPlatypusStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => mapping(address => uint256)) internal allowances;\\n    mapping(address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance - amount;\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from] - value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        require(value > 0, \\\"_mint::zero shares\\\");\\n        totalSupply = totalSupply + value;\\n        balances[to] = balances[to] + value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from] - value;\\n        totalSupply = totalSupply - value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(\\n        address signer,\\n        bytes32 encodeData,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), encodeData));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x893040cb129e3428494993115424a9e7549ae5935e80b3c406ee672d7199aa70\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeERC20 for IERC20;\\n\\n    struct StrategySettings {\\n        address depositToken;\\n        address rewardToken;\\n        uint256 minTokensToReinvest;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    IERC20 public immutable depositToken;\\n    IERC20 public immutable rewardToken;\\n    address public devAddr;\\n\\n    uint256 public MIN_TOKENS_TO_REINVEST;\\n    uint256 public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint256 public ADMIN_FEE_BIPS;\\n    uint256 public REINVEST_REWARD_BIPS;\\n    uint256 public DEV_FEE_BIPS;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    uint256 internal constant MAX_UINT = type(uint256).max;\\n\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdraw(address indexed account, uint256 amount);\\n    event Reinvest(uint256 newTotalDeposits, uint256 newTotalSupply);\\n    event Recovered(address token, uint256 amount);\\n    event UpdateAdminFee(uint256 oldValue, uint256 newValue);\\n    event UpdateDevFee(uint256 oldValue, uint256 newValue);\\n    event UpdateReinvestReward(uint256 oldValue, uint256 newValue);\\n    event UpdateMinTokensToReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(StrategySettings memory _strategySettings) {\\n        depositToken = IERC20(_strategySettings.depositToken);\\n        rewardToken = IERC20(_strategySettings.rewardToken);\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256) {\\n        uint256 unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return (unclaimedRewards * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens available to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount) public view returns (uint256) {\\n        if (totalSupply == 0 || totalDeposits() == 0) {\\n            return amount;\\n        }\\n        return (amount * totalSupply) / totalDeposits();\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount) public view returns (uint256) {\\n        if (totalSupply == 0 || totalDeposits() == 0) {\\n            return 0;\\n        }\\n        return (amount * totalDeposits()) / totalSupply;\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @dev Deprecated; Kept for compatibility\\n     * @param newValue fee in BIPS; required to be 0\\n     */\\n    function updateAdminFee(uint256 newValue) public onlyOwner {\\n        require(newValue == 0);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint256 newValue) public onlyOwner {\\n        require(newValue + REINVEST_REWARD_BIPS <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint256 newValue) public onlyOwner {\\n        require(newValue + DEV_FEE_BIPS <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        payable(msg.sender).transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x12d445990b8f4abf1619c36afec7a247f33e5a1ed708125d2769a26b4da7bc6f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xdb4adbfe678b51139c50ca81931c58e0ce6aef9bc85195bf5dee3444aa9a2410\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7770575951dbb745d5ba319363b64dd1165d9a6380e685f1e8aff5cf1ca2c608\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeERC20 for IERC20;\\n\\n    bytes private constant zeroBytes = new bytes(0);\\n    uint256 public constant DEFAULT_SWAP_FEE = 3;\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair\\n    ) internal returns (uint256) {\\n        return DexLibrary.swap(amountIn, fromToken, toToken, pair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair,\\n        uint256 swapFee\\n    ) internal returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint256 amountOut1 = 0;\\n        uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(\\n        IPair pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (bool) {\\n        return\\n            (tokenA == pair.token0() || tokenA == pair.token1()) &&\\n            (tokenB == pair.token0() || tokenB == pair.token1()) &&\\n            tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair\\n    ) internal view returns (uint256) {\\n        return DexLibrary.estimateConversionThroughPair(amountIn, fromToken, toToken, swapPair, DEFAULT_SWAP_FEE);\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair,\\n        uint256 swapFee\\n    ) internal view returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1, swapFee);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        IPair swapPairToken1\\n    ) internal returns (uint256) {\\n        return\\n            DexLibrary.convertRewardTokensToDepositTokens(\\n                amount,\\n                rewardToken,\\n                depositToken,\\n                swapPairToken0,\\n                DEFAULT_SWAP_FEE,\\n                swapPairToken1,\\n                DEFAULT_SWAP_FEE\\n            );\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        uint256 swapFeeToken0,\\n        IPair swapPairToken1,\\n        uint256 swapFeeToken1\\n    ) internal returns (uint256) {\\n        uint256 amountIn = amount / 2;\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint256 amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0, swapFeeToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint256 amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1, swapFeeToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(\\n        address depositToken,\\n        uint256 maxAmountIn0,\\n        uint256 maxAmountIn1\\n    ) internal returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = IPair(address(depositToken)).getReserves();\\n        uint256 amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        IERC20(IPair(depositToken).token0()).safeTransfer(depositToken, maxAmountIn0);\\n        IERC20(IPair(depositToken).token1()).safeTransfer(depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(\\n        uint256 amountIn,\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) private pure returns (uint256) {\\n        return (amountIn * reserve1) / reserve0;\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn * (1000 - swapFee);\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        return numerator / denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x31b27ccfab77d853af5f76d5a061ccec7e0791f087df4c755a84cb9317f25d5f\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    uint256 public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors + 1;\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors - 1;\\n        emit RemoveDepositor(depositor);\\n    }\\n}\\n\",\"keccak256\":\"0x32e276794130901e0464470794d697dfa8dcec1d2d1377a7422303dff8753aa5\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/strategies/VariableRewardsStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"../YakStrategyV2.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\n/**\\n * @notice VariableRewardsStrategy\\n */\\nabstract contract VariableRewardsStrategy is YakStrategyV2 {\\n    using SafeERC20 for IERC20;\\n\\n    IWAVAX internal immutable WAVAX;\\n\\n    struct VariableRewardsStrategySettings {\\n        string name;\\n        address platformToken;\\n        RewardSwapPair[] rewardSwapPairs;\\n        address timelock;\\n    }\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    struct RewardSwapPair {\\n        address reward;\\n        address swapPair;\\n        uint256 swapFee;\\n    }\\n\\n    // reward -> swapPair\\n    mapping(address => RewardSwapPair) public rewardSwapPairs;\\n    address[] public supportedRewards;\\n    uint256 public rewardCount;\\n\\n    event AddReward(address rewardToken, address swapPair);\\n    event RemoveReward(address rewardToken);\\n\\n    constructor(VariableRewardsStrategySettings memory _settings, StrategySettings memory _strategySettings)\\n        YakStrategyV2(_strategySettings)\\n    {\\n        name = _settings.name;\\n        WAVAX = IWAVAX(_settings.platformToken);\\n        devAddr = 0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF;\\n\\n        for (uint256 i = 0; i < _settings.rewardSwapPairs.length; i++) {\\n            _addReward(\\n                _settings.rewardSwapPairs[i].reward,\\n                _settings.rewardSwapPairs[i].swapPair,\\n                _settings.rewardSwapPairs[i].swapFee\\n            );\\n        }\\n\\n        updateDepositsEnabled(true);\\n        transferOwnership(_settings.timelock);\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function addReward(address _rewardToken, address _swapPair) public onlyDev {\\n        _addReward(_rewardToken, _swapPair, DexLibrary.DEFAULT_SWAP_FEE);\\n    }\\n\\n    function addReward(\\n        address _rewardToken,\\n        address _swapPair,\\n        uint256 _swapFee\\n    ) public onlyDev {\\n        _addReward(_rewardToken, _swapPair, _swapFee);\\n    }\\n\\n    function _addReward(\\n        address _rewardToken,\\n        address _swapPair,\\n        uint256 _swapFee\\n    ) internal {\\n        if (_rewardToken != address(rewardToken)) {\\n            require(\\n                DexLibrary.checkSwapPairCompatibility(IPair(_swapPair), _rewardToken, address(rewardToken)),\\n                \\\"VariableRewardsStrategy::Swap pair does not contain reward token\\\"\\n            );\\n        }\\n        rewardSwapPairs[_rewardToken] = RewardSwapPair({reward: _rewardToken, swapPair: _swapPair, swapFee: _swapFee});\\n        supportedRewards.push(_rewardToken);\\n        rewardCount = rewardCount + 1;\\n        emit AddReward(_rewardToken, _swapPair);\\n    }\\n\\n    function removeReward(address _rewardToken) public onlyDev {\\n        delete rewardSwapPairs[_rewardToken];\\n        bool found = false;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n                supportedRewards[i] = supportedRewards[supportedRewards.length - 1];\\n            }\\n        }\\n        require(found, \\\"VariableRewardsStrategy::Reward to delete not found!\\\");\\n        supportedRewards.pop();\\n        rewardCount = rewardCount - 1;\\n        emit RemoveReward(_rewardToken);\\n    }\\n\\n    function calculateDepositFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateDepositFee(_amount);\\n    }\\n\\n    function calculateWithdrawFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateWithdrawFee(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param _amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param _amount Amount of tokens to deposit\\n     * @param _deadline The time at which to expire the signature\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _account, uint256 _amount) external override {\\n        _deposit(_account, _amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"VariableRewardsStrategy::Deposits disabled\\\");\\n        uint256 maxPendingRewards = MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n        if (maxPendingRewards > 0) {\\n            uint256 estimatedTotalReward = checkReward();\\n            if (estimatedTotalReward > maxPendingRewards) {\\n                _reinvest(true);\\n            }\\n        }\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), _amount),\\n            \\\"VariableRewardsStrategy::Deposit token transfer failed\\\"\\n        );\\n        uint256 depositFee = _calculateDepositFee(_amount);\\n        _mint(_account, getSharesForDepositTokens(_amount - depositFee));\\n        _stakeDepositTokens(_amount, depositFee);\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     */\\n    function _getDepositFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit fee of underlying farm\\n     * @dev Override if deposit fee is calculated dynamically\\n     */\\n    function _calculateDepositFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 depositFeeBips = _getDepositFeeBips();\\n        return (_amount * depositFeeBips) / _bip();\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(_amount);\\n        require(depositTokenAmount > 0, \\\"VariableRewardsStrategy::Withdraw amount too low\\\");\\n        uint256 withdrawAmount = _withdrawFromStakingContract(depositTokenAmount);\\n        uint256 withdrawFee = _calculateWithdrawFee(depositTokenAmount);\\n        depositToken.safeTransfer(msg.sender, withdrawAmount - withdrawFee);\\n        _burn(msg.sender, _amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _getWithdrawFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee of underlying farm\\n     * @dev Override if withdraw fee is calculated dynamically\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _calculateWithdrawFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips();\\n        return (_amount * withdrawFeeBips) / _bip();\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        _reinvest(false);\\n    }\\n\\n    function _convertPoolRewardsToRewardToken() private returns (uint256) {\\n        uint256 rewardTokenAmount = rewardToken.balanceOf(address(this));\\n        uint256 count = supportedRewards.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            address reward = supportedRewards[i];\\n            if (reward == address(WAVAX)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    WAVAX.deposit{value: balance}();\\n                }\\n                if (address(rewardToken) == address(WAVAX)) {\\n                    rewardTokenAmount += balance;\\n                    continue;\\n                }\\n            }\\n            uint256 amount = IERC20(reward).balanceOf(address(this));\\n            if (amount > 0) {\\n                address swapPair = rewardSwapPairs[reward].swapPair;\\n                if (swapPair > address(0)) {\\n                    rewardTokenAmount += DexLibrary.swap(\\n                        amount,\\n                        reward,\\n                        address(rewardToken),\\n                        IPair(swapPair),\\n                        rewardSwapPairs[reward].swapFee\\n                    );\\n                }\\n            }\\n        }\\n        return rewardTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from the staking contract\\n     */\\n    function _reinvest(bool userDeposit) private {\\n        _getRewards();\\n        uint256 amount = _convertPoolRewardsToRewardToken();\\n        if (!userDeposit) {\\n            require(amount >= MIN_TOKENS_TO_REINVEST, \\\"VariableRewardsStrategy::Reinvest amount too low\\\");\\n        }\\n\\n        uint256 devFee = (amount * DEV_FEE_BIPS) / BIPS_DIVISOR;\\n        if (devFee > 0) {\\n            rewardToken.safeTransfer(devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = (amount * REINVEST_REWARD_BIPS) / BIPS_DIVISOR;\\n        if (reinvestFee > 0) {\\n            rewardToken.safeTransfer(msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount - devFee - reinvestFee);\\n\\n        uint256 depositFee = _calculateDepositFee(depositTokenAmount);\\n        _stakeDepositTokens(depositTokenAmount, depositFee);\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _stakeDepositTokens(uint256 _amount, uint256 _depositFee) private {\\n        require(_amount > 0, \\\"VariableRewardsStrategy::Stake amount too low\\\");\\n        _depositToStakingContract(_amount, _depositFee);\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        Reward[] memory rewards = _pendingRewards();\\n        uint256 estimatedTotalReward = rewardToken.balanceOf(address(this));\\n        if (address(rewardToken) == address(WAVAX)) {\\n            estimatedTotalReward += address(this).balance;\\n        }\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            if (reward == address(rewardToken)) {\\n                estimatedTotalReward += rewards[i].amount;\\n            } else if (reward > address(0)) {\\n                uint256 balance = IERC20(reward).balanceOf(address(this));\\n                uint256 amount = balance + rewards[i].amount;\\n                address swapPair = rewardSwapPairs[rewards[i].reward].swapPair;\\n                if (amount > 0 && swapPair > address(0)) {\\n                    estimatedTotalReward += DexLibrary.estimateConversionThroughPair(\\n                        amount,\\n                        reward,\\n                        address(rewardToken),\\n                        IPair(swapPair),\\n                        rewardSwapPairs[rewards[i].reward].swapFee\\n                    );\\n                }\\n            }\\n        }\\n        return estimatedTotalReward;\\n    }\\n\\n    /**\\n     * @notice Estimate recoverable balance after withdraw fee\\n     * @return deposit tokens after withdraw fee\\n     */\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        uint256 depositBalance = totalDeposits();\\n        uint256 withdrawFee = _calculateWithdrawFee(depositBalance);\\n        return depositBalance - withdrawFee;\\n    }\\n\\n    function rescueDeployedFunds(\\n        uint256 _minReturnAmountAccepted,\\n        bool /*_disableDeposits*/\\n    ) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw();\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter - balanceBefore >= _minReturnAmountAccepted,\\n            \\\"VariableRewardsStrategy::Emergency withdraw minimum return amount not reached\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n\\n    function _bip() internal view virtual returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal virtual returns (uint256 toAmount);\\n\\n    function _depositToStakingContract(uint256 _amount, uint256 _depositFee) internal virtual;\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal virtual returns (uint256 withdrawAmount);\\n\\n    function _emergencyWithdraw() internal virtual;\\n\\n    function _getRewards() internal virtual;\\n\\n    function _pendingRewards() internal view virtual returns (Reward[] memory);\\n}\\n\",\"keccak256\":\"0xf2b96ab7c00955580f0d2732c2a191b5d77a23c41483b5a0e6251b8772ce5dd2\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./PlatypusStrategy.sol\\\";\\n\\ncontract AnkrAvaxPlatypusStrategy is PlatypusStrategy {\\n    address public constant ankrAVAX = 0xc3344870d52688874b06d844E0C36cc39FC727F6;\\n\\n    constructor(\\n        PlatypusStrategySettings memory _platypusStrategySettings,\\n        VariableRewardsStrategySettings memory _variableRewardsStrategySettings,\\n        StrategySettings memory _strategySettings\\n    ) PlatypusStrategy(_platypusStrategySettings, _variableRewardsStrategySettings, _strategySettings) {}\\n\\n    function _pendingRewards() internal view override returns (Reward[] memory) {\\n        Reward[] memory rewards = proxy.pendingRewards(PID);\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            if (rewards[i].reward == ankrAVAX) {\\n                (rewards[i].amount, ) = pool.quotePotentialSwap(ankrAVAX, address(WAVAX), rewards[i].amount);\\n                rewards[i].reward = address(WAVAX);\\n            }\\n        }\\n        return rewards;\\n    }\\n\\n    function _getRewards() internal override {\\n        super._getRewards();\\n        uint256 ankrAVAXBalance = IERC20(ankrAVAX).balanceOf(address(this));\\n        if (ankrAVAXBalance > 0) {\\n            IERC20(ankrAVAX).approve(address(pool), ankrAVAXBalance);\\n            pool.swap(ankrAVAX, address(WAVAX), ankrAVAXBalance, 0, address(this), type(uint256).max);\\n            IERC20(ankrAVAX).approve(address(pool), 0);\\n        }\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal override returns (uint256 toAmount) {\\n        if (address(depositToken) == ankrAVAX) {\\n            WAVAX.approve(address(pool), _fromAmount);\\n            (toAmount, ) = pool.swap(address(WAVAX), ankrAVAX, _fromAmount, 0, address(this), type(uint256).max);\\n            WAVAX.approve(address(pool), 0);\\n        } else {\\n            return super._convertRewardTokenToDepositToken(_fromAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36bacde8685de1073f5c9fd71bccdb0d72fa3bd2911f548eb2a22cf3e2999e\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/PlatypusStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./../../VariableRewardsStrategy.sol\\\";\\n\\nimport \\\"./interfaces/IMasterPlatypus.sol\\\";\\nimport \\\"./interfaces/IPlatypusPool.sol\\\";\\nimport \\\"./interfaces/IPlatypusVoterProxy.sol\\\";\\nimport \\\"./interfaces/IPlatypusAsset.sol\\\";\\nimport \\\"./lib/PlatypusLibrary.sol\\\";\\n\\ncontract PlatypusStrategy is VariableRewardsStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    struct PlatypusStrategySettings {\\n        address pool;\\n        address swapPairToken;\\n        uint256 pid;\\n        uint256 maxSlippage;\\n        address voterProxy;\\n    }\\n\\n    address public constant PTP = 0x22d4002028f537599bE9f666d1c4Fa138522f9c8;\\n\\n    IPlatypusAsset public immutable asset;\\n    IPlatypusPool public immutable pool;\\n    IPlatypusVoterProxy public proxy;\\n\\n    uint256 public immutable PID;\\n    uint256 public maxSlippage;\\n    address public immutable swapPairToken;\\n\\n    constructor(\\n        PlatypusStrategySettings memory _platypusStrategySettings,\\n        VariableRewardsStrategySettings memory _variableRewardsStrategySettings,\\n        StrategySettings memory _strategySettings\\n    ) VariableRewardsStrategy(_variableRewardsStrategySettings, _strategySettings) {\\n        PID = _platypusStrategySettings.pid;\\n\\n        pool = IPlatypusPool(_platypusStrategySettings.pool);\\n        asset = IPlatypusAsset(pool.assetOf(_strategySettings.depositToken));\\n        proxy = IPlatypusVoterProxy(_platypusStrategySettings.voterProxy);\\n        maxSlippage = _platypusStrategySettings.maxSlippage;\\n        swapPairToken = _platypusStrategySettings.swapPairToken;\\n    }\\n\\n    function setPlatypusVoterProxy(address _voterProxy) external onlyOwner {\\n        proxy = IPlatypusVoterProxy(_voterProxy);\\n    }\\n\\n    /**\\n     * @notice Update max slippage for withdrawal\\n     * @dev Function name matches interface for FeeCollector\\n     */\\n    function updateMaxSwapSlippage(uint256 slippageBips) public onlyDev {\\n        maxSlippage = slippageBips;\\n    }\\n\\n    function _calculateDepositFee(uint256 amount) internal view override returns (uint256) {\\n        return PlatypusLibrary.calculateDepositFee(address(pool), address(asset), amount);\\n    }\\n\\n    function _depositToStakingContract(uint256 _amount, uint256 _depositFee) internal override {\\n        depositToken.safeTransfer(address(proxy), _amount);\\n        proxy.deposit(PID, address(0), address(pool), address(depositToken), address(asset), _amount, _depositFee);\\n    }\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal override returns (uint256 withdrawAmount) {\\n        proxy.claimReward(address(0), PID);\\n        return\\n            proxy.withdraw(PID, address(0), address(pool), address(depositToken), address(asset), maxSlippage, _amount);\\n    }\\n\\n    function _pendingRewards() internal view virtual override returns (Reward[] memory) {\\n        return proxy.pendingRewards(PID);\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount)\\n        internal\\n        virtual\\n        override\\n        returns (uint256 toAmount)\\n    {\\n        if (rewardToken == depositToken) return _fromAmount;\\n        toAmount = DexLibrary.swap(_fromAmount, address(rewardToken), address(depositToken), IPair(swapPairToken));\\n    }\\n\\n    function _getRewards() internal virtual override {\\n        proxy.claimReward(address(0), PID);\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        uint256 depositBalance = proxy.poolBalance(address(0), PID);\\n        return depositBalance;\\n    }\\n\\n    function _emergencyWithdraw() internal override {\\n        proxy.emergencyWithdraw(PID, address(0), address(pool), address(depositToken), address(asset));\\n    }\\n}\\n\",\"keccak256\":\"0x506964613ed3e0eee13e104cc7b2cd4ba1300d00a0a107f255900acd3ab3fd3e\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IMasterPlatypus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IMasterPlatypus {\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingPtp,\\n            address[] memory bonusTokenAddresses,\\n            string[] memory bonusTokenSymbols,\\n            uint256[] memory pendingBonusTokens\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address[] memory bonusTokenAddress, string[] memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVePtpBalance) external;\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 _amount,\\n            uint256 _rewardDebt,\\n            uint256 _factor\\n        );\\n\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address _lpToken,\\n            address _rewarder,\\n            uint256 _sumOfFactors,\\n            uint256 _accPtpPerShare,\\n            uint256 _accPtpPerFactorShare\\n        );\\n\\n    function newMasterPlatypus() external view returns (address);\\n\\n    function version() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6c7bc3b4b0fcc200456ab76bc025a4e86fa0c16f1e28304975f2036805a46df3\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusAsset {\\n    function cash() external view returns (uint256);\\n\\n    function liability() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbbf22f57ab3ede7d0ba9e0b4167fc8be9f1268ab15ccd26cd3cc1e7a9cf9da5d\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusPool {\\n    function assetOf(address token) external view returns (address);\\n\\n    function deposit(\\n        address to,\\n        uint256 amount,\\n        address token,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function getHaircutRate() external view returns (uint256);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function getC1() external view returns (uint256);\\n\\n    function getXThreshold() external view returns (uint256);\\n\\n    function getSlippageParamK() external view returns (uint256);\\n\\n    function getSlippageParamN() external view returns (uint256);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount\\n    ) external view returns (uint256, uint256);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n}\\n\",\"keccak256\":\"0x5405c6d461a84e54d1844d3b7ccd92b189ca1720a250894047d831f7afd6479a\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusVoter {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function vePTPBalance() external view returns (uint256);\\n\\n    function wrapAvaxBalance() external returns (uint256);\\n\\n    function depositsEnabled() external view returns (bool);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function depositFromBalance(uint256 _value) external;\\n\\n    function setVoterProxy(address _voterProxy) external;\\n\\n    function claimVePTP() external;\\n}\\n\",\"keccak256\":\"0x7827dd64a8acaed1dfaed78260b8e010b395f90f7e19614557570fae47078bc1\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/interfaces/IPlatypusVoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IPlatypusVoter.sol\\\";\\nimport \\\"./../../../VariableRewardsStrategy.sol\\\";\\n\\ninterface IPlatypusVoterProxy {\\n    function withdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset,\\n        uint256 _maxSlippage,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function emergencyWithdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset\\n    ) external;\\n\\n    function deposit(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _depositFee\\n    ) external;\\n\\n    function pendingRewards(address _stakingContract, uint256 _pid)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    function pendingRewards(uint256 _pid) external view returns (VariableRewardsStrategy.Reward[] memory);\\n\\n    function poolBalance(address _stakingContract, uint256 _pid) external view returns (uint256);\\n\\n    function platypusVoter() external view returns (IPlatypusVoter);\\n\\n    function claimReward(address _stakingContract, uint256 _pid) external;\\n\\n    function approveStrategy(address _stakingContract, address _strategy) external;\\n\\n    function reinvestFeeBips() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x49708fff64b4cb7956394a9e35e8c9c9de812038dfba8a79c550e3b4aa327d12\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/lib/DSMath.sol\":{\"content\":\"/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nlibrary DSMath {\\n    uint256 public constant WAD = 10**18;\\n    uint256 public constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * WAD) + (y / 2)) / y;\\n    }\\n\\n    function reciprocal(uint256 x) internal pure returns (uint256) {\\n        return wdiv(WAD, x);\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = ((x * y) + (RAY / 2)) / RAY;\\n    }\\n}\\n\",\"keccak256\":\"0x3992388a4d916d259545c6a39b22a8ccac1e503e843c4b2e10726c1dceb0d9c6\",\"license\":\"MIT\"},\"contracts/strategies/avalanche/platypus/lib/PlatypusLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./DSMath.sol\\\";\\nimport \\\"../interfaces/IPlatypusPool.sol\\\";\\nimport \\\"../interfaces/IPlatypusAsset.sol\\\";\\n\\nlibrary PlatypusLibrary {\\n    using DSMath for uint256;\\n\\n    uint256 internal constant WAD = 10**18;\\n    uint256 internal constant RAY = 10**27;\\n\\n    function calculateDepositFee(\\n        address pool,\\n        address asset,\\n        uint256 amount\\n    ) internal view returns (uint256 fee) {\\n        return\\n            _depositFee(\\n                IPlatypusPool(pool).getSlippageParamK(),\\n                IPlatypusPool(pool).getSlippageParamN(),\\n                IPlatypusPool(pool).getC1(),\\n                IPlatypusPool(pool).getXThreshold(),\\n                IPlatypusAsset(asset).cash(),\\n                IPlatypusAsset(asset).liability(),\\n                amount\\n            );\\n    }\\n\\n    function _depositFee(\\n        uint256 k,\\n        uint256 n,\\n        uint256 c1,\\n        uint256 xThreshold,\\n        uint256 cash,\\n        uint256 liability,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        // cover case where the asset has no liquidity yet\\n        if (liability == 0) {\\n            return 0;\\n        }\\n\\n        uint256 covBefore = cash.wdiv(liability);\\n        if (covBefore <= WAD) {\\n            return 0;\\n        }\\n\\n        uint256 covAfter = (cash + amount).wdiv(liability + amount);\\n        uint256 slippageBefore = _slippageFunc(k, n, c1, xThreshold, covBefore);\\n        uint256 slippageAfter = _slippageFunc(k, n, c1, xThreshold, covAfter);\\n\\n        // (Li + Di) * g(cov_after) - Li * g(cov_before)\\n        return ((liability + amount).wmul(slippageAfter)) - (liability.wmul(slippageBefore));\\n    }\\n\\n    function _slippageFunc(\\n        uint256 k,\\n        uint256 n,\\n        uint256 c1,\\n        uint256 xThreshold,\\n        uint256 x\\n    ) internal pure returns (uint256) {\\n        if (x < xThreshold) {\\n            return c1 - x;\\n        } else {\\n            return k.wdiv((((x * RAY) / WAD).rpow(n) * WAD) / RAY); // k / (x ** n)\\n        }\\n    }\\n\\n    function depositTokenToAsset(\\n        address asset,\\n        uint256 amount,\\n        uint256 depositFee\\n    ) internal view returns (uint256 liquidity) {\\n        if (IPlatypusAsset(asset).liability() == 0) {\\n            liquidity = amount - depositFee;\\n        } else {\\n            liquidity =\\n                ((amount - depositFee) * IPlatypusAsset(asset).totalSupply()) /\\n                IPlatypusAsset(asset).liability();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x796d5feb4c2c9de735fac6745e0357c392c5ac24e64340f08951965128b2ca35\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040526009610160819052685969656c642059616b60b81b6101809081526200002f916000919062000a95565b506040805180820190915260038082526216549560ea1b60209092019182526200005c9160019162000a95565b503480156200006a57600080fd5b5060405162006806380380620068068339810160408190526200008d9162000e5b565b828282818180600033600680546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020620067e6833981519152908290a35080516001600160a01b0390811660805260208201511660a0526040810151620000fc9062000337565b60608101516200010c90620003c7565b60808101516200011c9062000472565b5081518051620001359160009160209091019062000a95565b5060208201516001600160a01b031660c052600980546001600160a01b031916732d580f9cf2fb2d09bc411532988f2afda4e7beff17905560005b8260400151518110156200021257620001fd836040015182815181106200019b576200019b62000f1a565b60200260200101516000015184604001518381518110620001c057620001c062000f1a565b60200260200101516020015185604001518481518110620001e557620001e562000f1a565b6020026020010151604001516200051d60201b60201c565b80620002098162000f46565b91505062000170565b506200021f6001620006c9565b60608201516200022f9062000773565b60408051600080825260208201527fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234910160405180910390a150506040838101516101205283516001600160a01b03908116610100819052835192516371f9621160e01b8152929091166004830152906371f9621190602401602060405180830381865afa158015620002c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ec919062000f62565b6001600160a01b0390811660e0526080840151601380546001600160a01b0319169183169190911790556060840151601455602090930151909216610140525062000fde9350505050565b6006546001600160a01b03163314620003865760405162461bcd60e51b81526020600482018190526024820152600080516020620067c683398151915260448201526064015b60405180910390fd5b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b03163314620004125760405162461bcd60e51b81526020600482018190526024820152600080516020620067c683398151915260448201526064016200037d565b612710600e548262000425919062000f87565b11156200043157600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6006546001600160a01b03163314620004bd5760405162461bcd60e51b81526020600482018190526024820152600080516020620067c683398151915260448201526064016200037d565b612710600f5482620004d0919062000f87565b1115620004dc57600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b60a0516001600160a01b0316836001600160a01b031614620005c95762000553828460a0516200087060201b620026d21760201c565b620005c9576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e60648201526084016200037d565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68909301805490921690921790556012546200067e9162000f87565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b6006546001600160a01b03163314620007145760405162461bcd60e51b81526020600482018190526024820152600080516020620067c683398151915260448201526064016200037d565b600c5481151560ff9091161515036200072c57600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859060200160405180910390a150565b6006546001600160a01b03163314620007be5760405162461bcd60e51b81526020600482018190526024820152600080516020620067c683398151915260448201526064016200037d565b6001600160a01b038116620008255760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200037d565b6006546040516001600160a01b03808416921690600080516020620067e683398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008b1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008d7919062000f62565b6001600160a01b0316836001600160a01b031614806200096c5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000931573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000957919062000f62565b6001600160a01b0316836001600160a01b0316145b801562000a6e5750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015620009b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009d9919062000f62565b6001600160a01b0316826001600160a01b0316148062000a6e5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a59919062000f62565b6001600160a01b0316826001600160a01b0316145b801562000a8d5750816001600160a01b0316836001600160a01b031614155b949350505050565b82805462000aa39062000fa2565b90600052602060002090601f01602090048101928262000ac7576000855562000b12565b82601f1062000ae257805160ff191683800117855562000b12565b8280016001018555821562000b12579182015b8281111562000b1257825182559160200191906001019062000af5565b5062000b2092915062000b24565b5090565b5b8082111562000b20576000815560010162000b25565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000b765762000b7662000b3b565b60405290565b604051608081016001600160401b038111828210171562000b765762000b7662000b3b565b60405160a081016001600160401b038111828210171562000b765762000b7662000b3b565b604051601f8201601f191681016001600160401b038111828210171562000bf15762000bf162000b3b565b604052919050565b80516001600160a01b038116811462000c1157600080fd5b919050565b600082601f83011262000c2857600080fd5b815160206001600160401b0382111562000c465762000c4662000b3b565b62000c56818360051b0162000bc6565b8281526060928302850182019282820191908785111562000c7657600080fd5b8387015b8581101562000cd45781818a03121562000c945760008081fd5b62000c9e62000b51565b62000ca98262000bf9565b815262000cb886830162000bf9565b8187015260408281015190820152845292840192810162000c7a565b5090979650505050505050565b60006080828403121562000cf457600080fd5b62000cfe62000b7c565b82519091506001600160401b038082111562000d1957600080fd5b818401915084601f83011262000d2e57600080fd5b81518181111562000d435762000d4362000b3b565b602062000d59601f8301601f1916820162000bc6565b828152878284870101111562000d6e57600080fd5b60005b8381101562000d8e57858101830151828201840152820162000d71565b8381111562000da05760008385840101525b50855262000db086820162000bf9565b9085015250604084015191508082111562000dca57600080fd5b5062000dd98482850162000c16565b60408301525062000ded6060830162000bf9565b606082015292915050565b600060a0828403121562000e0b57600080fd5b62000e1562000ba1565b905062000e228262000bf9565b815262000e326020830162000bf9565b602082015260408201516040820152606082015160608201526080820151608082015292915050565b600080600083850361016081121562000e7357600080fd5b60a081121562000e8257600080fd5b5062000e8d62000ba1565b62000e988562000bf9565b815262000ea86020860162000bf9565b6020820152604085015160408201526060850151606082015262000ecf6080860162000bf9565b608082015260a08501519093506001600160401b0381111562000ef157600080fd5b62000eff8682870162000ce1565b92505062000f118560c0860162000df8565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162000f5b5762000f5b62000f30565b5060010190565b60006020828403121562000f7557600080fd5b62000f808262000bf9565b9392505050565b6000821982111562000f9d5762000f9d62000f30565b500190565b600181811c9082168062000fb757607f821691505b60208210810362000fd857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516101005161012051610140516155fe620011c8600039600081816106ea0152614c170152600081816106c3015281816112ea01528181612b9b01528181612c310152818161325d0152818161336f01528181614880015261499501526000818161050a01528181612b3a01528181612c66015281816132920152818161344d01528181613f9b0152818161409f015281816141240152818161451101528181614623015281816146a701526148b501526000818161060801528181612b5b01528181612cb6015281816132e20152614905015260008181611edf01528181613491015281816135820152818161405b01528181614280015281816142af0152818161432401528181614540015281816145c501526146d9015260008181610aa901528181611e7001528181611f0901528181611f73015281816120ec0152818161305e0152818161309c015281816138db01528181613936015281816141d40152818161434e0152818161442e01528181614b9e0152614bd501526000818161098301528181610d3c01528181610e6d01528181611be401528181611c7901528181612c8e01528181612f0d015281816132ba015281816144cd0152818161482c015281816148dd01528181614b740152614bf601526155fe6000f3fe608060405234801561001057600080fd5b506004361061048d5760003560e01c80638aff733d1161026b578063b9e57b8011610150578063dd8ce4d6116100c8578063ec55688911610097578063f2fde38b1161007c578063f2fde38b14610a91578063f7c618c114610aa4578063fdb5a03e14610acb57600080fd5b8063ec55688914610a76578063ed24911d14610a8957600080fd5b8063dd8ce4d614610a2a578063e21ac82514610a3d578063e75ab04514610a50578063eab89a5a14610a6357600080fd5b8063cff1b6ef1161011f578063d505accf11610104578063d505accf146109cb578063da09c72c146109de578063dd62ed3e146109f157600080fd5b8063cff1b6ef146109a5578063d0ed26ae146109b857600080fd5b8063b9e57b8014610965578063bd079f551461096d578063c4b24a4614610976578063c89039c51461097e57600080fd5b80639f0237b1116101e3578063a9059cbb116101b2578063ac0d31ff11610197578063ac0d31ff14610932578063b52a321f14610945578063b6b55f251461095257600080fd5b8063a9059cbb1461090c578063abff19631461091f57600080fd5b80639f0237b114610871578063a4d5e67c14610884578063a5534e7114610897578063a8ae2b7c146108f957600080fd5b80638dc1564a1161023a57806395d89b411161021f57806395d89b411461082f57806399729ec1146108375780639e4e73181461084a57600080fd5b80638dc1564a146108015780639291d5631461081c57600080fd5b80638aff733d146107cb5780638b73e606146107d45780638c04166f146107e75780638da5cb5b146107f057600080fd5b8063483c2ef011610391578063715018a6116103095780637ae26773116102d85780637ecebe00116102bd5780637ecebe001461078557806381837230146107a55780638980f11f146107b857600080fd5b80637ae267731461076a5780637d8820971461077d57600080fd5b8063715018a6146107355780637579a5dd1461073d578063789139bc14610758578063790854251461076157600080fd5b80634ebb7916116103605780635eaec0e4116103455780635eaec0e4146106be578063633afd28146106e557806370a082311461070c57600080fd5b80634ebb7916146106a25780635ea682ea146106b557600080fd5b8063483c2ef0146106465780634a970be7146106695780634bebd1e71461067c5780634e77ace51461068f57600080fd5b806323b872dd1161042457806330adf81f116103f357806338d52e0f116103d857806338d52e0f146106035780633bdc6e721461062a57806340b47e1a1461063357600080fd5b806330adf81f146105c2578063313ce567146105e957600080fd5b806323b872dd14610574578063247d284b146105875780632e1a7d4d1461059a5780632f4f21e2146105af57600080fd5b8063110560351161046057806311056035146104f257806316f0115b1461050557806318160ddd1461054457806320606b701461054d57600080fd5b806306fdde031461049257806307677111146104b0578063095ea7b3146104c75780630f23475d146104ea575b600080fd5b61049a610ad3565b6040516104a79190614f64565b60405180910390f35b6104b9600d5481565b6040519081526020016104a7565b6104da6104d5366004614f8c565b610b61565b60405190151581526020016104a7565b6104b9610b78565b6104b9610500366004614fb8565b610ba3565b61052c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016104a7565b6104b960025481565b6104b97f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6104da610582366004614fd1565b610bae565b6104b9610595366004614fb8565b610c77565b6105ad6105a8366004614fb8565b610c82565b005b6105ad6105bd366004614f8c565b610da9565b6104b97f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6105f1601281565b60405160ff90911681526020016104a7565b61052c7f000000000000000000000000000000000000000000000000000000000000000081565b6104b960075481565b6105ad610641366004615012565b610db7565b6104da61065436600461504b565b60086020526000908152604090205460ff1681565b6105ad610677366004615079565b610e14565b6105ad61068a36600461504b565b610ee2565b6105ad61069d3660046150ce565b610fff565b6105ad6106b0366004614fb8565b6110a6565b6104b9600f5481565b6104b97f000000000000000000000000000000000000000000000000000000000000000081565b61052c7f000000000000000000000000000000000000000000000000000000000000000081565b6104b961071a36600461504b565b6001600160a01b031660009081526004602052604090205490565b6105ad611160565b61052c73c3344870d52688874b06d844e0c36cc39fc727f681565b6104b9600b5481565b6104b960125481565b6105ad610778366004615012565b6111f2565b6104b96112b6565b6104b961079336600461504b565b60056020526000908152604090205481565b6105ad6107b3366004614fb8565b611367565b6105ad6107c6366004614f8c565b6113f0565b6104b9600e5481565b6105ad6107e236600461504b565b6114a0565b6104b960145481565b6006546001600160a01b031661052c565b61052c7322d4002028f537599be9f666d1c4fa138522f9c881565b6105ad61082a36600461504b565b61165c565b61049a611716565b6105ad610845366004614fb8565b611723565b6104b97fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6105ad61087f36600461504b565b6117c8565b6105ad61089236600461504b565b611832565b6108d36108a536600461504b565b6010602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b039485168152939092166020840152908201526060016104a7565b6105ad610907366004614fb8565b611a7c565b6104da61091a366004614f8c565b611b21565b6105ad61092d366004614fb8565b611b2e565b6105ad6109403660046150eb565b611b84565b600c546104da9060ff1681565b6105ad610960366004614fb8565b611df6565b6104b9611e03565b6104b9600a5481565b6104b9611e42565b61052c7f000000000000000000000000000000000000000000000000000000000000000081565b6105ad6109b3366004614fb8565b612182565b6105ad6109c6366004614fd1565b612216565b6105ad6109d9366004615110565b612277565b60095461052c906001600160a01b031681565b6104b96109ff366004615012565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6104b9610a38366004614fb8565b61238a565b6105ad610a4b366004614fb8565b6123ca565b61052c610a5e366004614fb8565b612453565b6104b9610a71366004614fb8565b61247d565b60135461052c906001600160a01b031681565b6104b96124b7565b6105ad610a9f36600461504b565b612557565b61052c7f000000000000000000000000000000000000000000000000000000000000000081565b6105ad612677565b60008054610ae09061517e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0c9061517e565b8015610b595780601f10610b2e57610100808354040283529160200191610b59565b820191906000526020600020905b815481529060010190602001808311610b3c57829003601f168201915b505050505081565b6000610b6e3384846128e7565b5060015b92915050565b600080610b836112b6565b90506000610b90826129f5565b9050610b9c81836151c8565b9250505090565b6000610b72826129f5565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610be857506000198114155b15610c5e576000610bf985836151c8565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610c69868686612a0f565b6001925050505b9392505050565b6000610b7282612b33565b6000610c8d8261247d565b905060008111610d0a5760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5769746864726160448201527f7720616d6f756e7420746f6f206c6f770000000000000000000000000000000060648201526084015b60405180910390fd5b6000610d1582612b80565b90506000610d22836129f5565b9050610d6333610d3283856151c8565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612d18565b610d6d3385612d98565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250505050565b610db38282612e2c565b5050565b6009546001600160a01b03163314610e085760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610d01565b610db38282600361305c565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610eb957600080fd5b505af1158015610ecd573d6000803e3d6000fd5b50505050610edb3386612e2c565b5050505050565b6006546001600160a01b03163314610f2a5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6001600160a01b03811660009081526008602052604090205460ff1615610f935760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610d01565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610fc5916151df565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b031633146110475760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b600c5481151560ff90911615150361105e57600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b031633146110ee5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b600081116110fb57600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611128573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910161109b565b6006546001600160a01b031633146111a85760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b0316331461123a5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad91906151f7565b610db357600080fd5b6013546040517f01e1c48d0000000000000000000000000000000000000000000000000000000081526000600482018190527f000000000000000000000000000000000000000000000000000000000000000060248301529182916001600160a01b03909116906301e1c48d90604401602060405180830381865afa158015611343573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b729190615214565b6006546001600160a01b031633146113af5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b031633146114385760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6000811161144557600080fd5b6114596001600160a01b0383163383612d18565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b031633146114e85760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6000600754116115605760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610d01565b6001600160a01b03811660009081526008602052604090205460ff1615156001146115f35760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610d01565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611622906001906151c8565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6009546001600160a01b031633146116ad5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610d01565b600954604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600980546001600160a01b0319166001600160a01b0392909216919091179055565b60018054610ae09061517e565b6006546001600160a01b0316331461176b5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b612710600e548261177c91906151df565b111561178757600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6006546001600160a01b031633146118105760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b031633146118835760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610d01565b6001600160a01b038116600090815260106020526040812080546001600160a01b031990811682556001820180549091169055600201819055805b60115481101561198a57601181815481106118db576118db61522d565b6000918252602090912001546001600160a01b039081169084160361197857601180546001935061190d9084906151c8565b8154811061191d5761191d61522d565b600091825260209091200154601180546001600160a01b0390921691839081106119495761194961522d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8061198281615243565b9150506118be565b50806119fe5760405162461bcd60e51b815260206004820152603460248201527f5661726961626c655265776172647353747261746567793a3a5265776172642060448201527f746f2064656c657465206e6f7420666f756e64210000000000000000000000006064820152608401610d01565b6011805480611a0f57611a0f61525c565b600082815260209020810160001990810180546001600160a01b0319169055019055601254611a40906001906151c8565b6012556040516001600160a01b03831681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc90602001611494565b6006546001600160a01b03163314611ac45760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b612710600f5482611ad591906151df565b1115611ae057600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b6000610b6e338484612a0f565b6009546001600160a01b03163314611b7f5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610d01565b601455565b6006546001600160a01b03163314611bcc5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c579190615214565b9050611c61613232565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190615214565b905083611cf983836151c8565b1015611d935760405162461bcd60e51b815260206004820152604d60248201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60448201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60648201527f74206e6f74207265616368656400000000000000000000000000000000000000608482015260a401610d01565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611dbc6112b6565b6002546040805192835260208301919091520160405180910390a1600c5460ff161515600103611df057611df06000610fff565b50505050565b611e003382612e2c565b50565b600080611e0e611e42565b9050600a548110611e3a57612710600e5482611e2a9190615272565b611e3491906152a7565b91505090565b600091505090565b600080611e4d613344565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edb9190615214565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603611f4357611f4047826151df565b90505b60005b825181101561217b576000838281518110611f6357611f6361522d565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611fda57838281518110611fbc57611fbc61522d565b60200260200101516020015183611fd391906151df565b9250612168565b6001600160a01b03811615612168576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120549190615214565b9050600085848151811061206a5761206a61522d565b6020026020010151602001518261208191906151df565b905060006010600088878151811061209b5761209b61522d565b602090810291909101810151516001600160a01b039081168352908201929092526040016000206001015416905081158015906120e057506001600160a01b03811615155b156121645761215782857f000000000000000000000000000000000000000000000000000000000000000084601060008d8c815181106121225761212261522d565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600201546135e4565b61216190876151df565b95505b5050505b508061217381615243565b915050611f46565b5092915050565b6006546001600160a01b031633146121ca5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b80156121d557600080fd5b600d5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600d55565b6009546001600160a01b031633146122675760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610d01565b61227283838361305c565b505050565b428410156122c75760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610d01565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a91908661231483615243565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905061237588828686866136b4565b6123808888886128e7565b5050505050505050565b6000600254600014806123a257506123a06112b6565b155b156123ab575090565b6123b36112b6565b6002546123c09084615272565b610b7291906152a7565b6006546001600160a01b031633146124125760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b600b5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600b55565b6011818154811061246357600080fd5b6000918252602090912001546001600160a01b0316905081565b60006002546000148061249557506124936112b6565b155b156124a257506000919050565b6002546124ad6112b6565b6123c09084615272565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b60006040516124ec91906152bb565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b0316331461259f5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6001600160a01b03811661261b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610d01565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146126c65760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610d01565b6126d06000613814565b565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127369190615356565b6001600160a01b0316836001600160a01b031614806127c75750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561278e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b29190615356565b6001600160a01b0316836001600160a01b0316145b80156128c15750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561280c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128309190615356565b6001600160a01b0316826001600160a01b031614806128c15750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ac9190615356565b6001600160a01b0316826001600160a01b0316145b80156128df5750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b03831661293d5760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610d01565b6001600160a01b0382166129935760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610d01565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080612710612a058285615272565b610c7091906152a7565b6001600160a01b038216612a8b5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610d01565b6001600160a01b038316600090815260046020526040902054612aaf9082906151c8565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612adf9082906151df565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906129e89085815260200190565b6000610b727f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846139e1565b6013546040516305d38c7160e21b81526000600482018190527f00000000000000000000000000000000000000000000000000000000000000006024830152916001600160a01b03169063174e31c490604401600060405180830381600087803b158015612bed57600080fd5b505af1158015612c01573d6000803e3d6000fd5b50506013546014546040517fa530882e0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152600060248201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301527f00000000000000000000000000000000000000000000000000000000000000008116608483015260a482019290925260c481018790529116925063a530882e915060e4016020604051808303816000875af1158015611343573d6000803e3d6000fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612272908490613c38565b6001600160a01b038216600090815260046020526040902054612dbc9082906151c8565b6001600160a01b038316600090815260046020526040902055600254612de39082906151c8565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600c5460ff161515600114612ea95760405162461bcd60e51b815260206004820152602a60248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f732064697361626c6564000000000000000000000000000000000000000000006064820152608401610d01565b600b548015612ed2576000612ebc611e42565b905081811115612ed057612ed06001613814565b505b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015612f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8291906151f7565b612ff45760405162461bcd60e51b815260206004820152603660248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f20746f6b656e207472616e73666572206661696c6564000000000000000000006064820152608401610d01565b6000612fff83612b33565b905061301784613012610a3884876151c8565b613d1d565b6130218382613df3565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610d9b91815260200190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614613134576130c082847f00000000000000000000000000000000000000000000000000000000000000006126d2565b613134576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401610d01565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68909301805490921690921790556012546131e7916151df565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b6013546040517f02eb6f7e0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152600060248201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301527f000000000000000000000000000000000000000000000000000000000000000081166084830152909116906302eb6f7e9060a4015b600060405180830381600087803b15801561333057600080fd5b505af1158015611df0573d6000803e3d6000fd5b6013546040517f7dcb2abf0000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526060916000916001600160a01b0390911690637dcb2abf90602401600060405180830381865afa1580156133cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133f391908101906153e3565b905060005b81518110156135de5773c3344870d52688874b06d844e0c36cc39fc727f66001600160a01b03168282815181106134315761343161522d565b6020026020010151600001516001600160a01b0316036135cc577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166343c2e2f573c3344870d52688874b06d844e0c36cc39fc727f67f00000000000000000000000000000000000000000000000000000000000000008585815181106134c2576134c261522d565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016040805180830381865afa158015613539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355d91906154ae565b508282815181106135705761357061522d565b602002602001015160200181815250507f00000000000000000000000000000000000000000000000000000000000000008282815181106135b3576135b361522d565b60209081029190910101516001600160a01b0390911690525b806135d681615243565b9150506133f8565b50919050565b6000806135f18686613e73565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613635573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365991906154f0565b5091509150876001600160a01b0316836001600160a01b03161461367957905b6136a589836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff1688613ea4565b93505050505b95945050505050565b60006136be6124b7565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015613764573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061379a5750866001600160a01b0316816001600160a01b0316145b61380b5760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610d01565b50505050505050565b61381c613efe565b60006138266141b2565b9050816138a557600a548110156138a55760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360448201527f7420616d6f756e7420746f6f206c6f77000000000000000000000000000000006064820152608401610d01565b6000612710600f54836138b89190615272565b6138c291906152a7565b9050801561390457600954613904906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612d18565b6000612710600e54846139179190615272565b61392191906152a7565b9050801561395d5761395d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612d18565b600061397c8261396d85876151c8565b61397791906151c8565b6144a8565b9050600061398982612b33565b90506139958282613df3565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346139be6112b6565b6002546040805192835260208301919091520160405180910390a1505050505050565b60006128df846001600160a01b03166355af008a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a489190615214565b856001600160a01b0316637727c6556040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aaa9190615214565b866001600160a01b031663a76f54d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0c9190615214565b876001600160a01b0316637a1c36d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6e9190615214565b876001600160a01b031663961be3916040518163ffffffff1660e01b8152600401602060405180830381865afa158015613bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd09190615214565b886001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c329190615214565b88614756565b6000613c8d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661480c9092919063ffffffff16565b8051909150156122725780806020019051810190613cab91906151f7565b6122725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610d01565b60008111613d6d5760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610d01565b80600254613d7b91906151df565b6002556001600160a01b038216600090815260046020526040902054613da29082906151df565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612e209085815260200190565b60008211613e695760405162461bcd60e51b815260206004820152602d60248201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160448201527f6d6f756e7420746f6f206c6f77000000000000000000000000000000000000006064820152608401610d01565b610db3828261481b565b600080826001600160a01b0316846001600160a01b031610613e96578284613e99565b83835b915091509250929050565b600080613eb3836103e86151c8565b613ebd9087615272565b90506000613ecb8583615272565b9050600082613edc886103e8615272565b613ee691906151df565b9050613ef281836152a7565b98975050505050505050565b613f0661497c565b6040516370a0823160e01b815230600482015260009073c3344870d52688874b06d844e0c36cc39fc727f6906370a0823190602401602060405180830381865afa158015613f58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f7c9190615214565b90508015611e005760405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810182905273c3344870d52688874b06d844e0c36cc39fc727f69063095ea7b3906044016020604051808303816000875af1158015614005573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402991906151f7565b50604051639908fc8b60e01b815273c3344870d52688874b06d844e0c36cc39fc727f660048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018390526000606483015230608483015260001960a48301527f00000000000000000000000000000000000000000000000000000000000000001690639908fc8b9060c40160408051808303816000875af11580156140e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061410b91906154ae565b505060405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000602482015273c3344870d52688874b06d844e0c36cc39fc727f69063095ea7b3906044016020604051808303816000875af115801561418e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db391906151f7565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561421b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061423f9190615214565b60115490915060005b818110156144a0576000601182815481106142655761426561522d565b6000918252602090912001546001600160a01b0390811691507f000000000000000000000000000000000000000000000000000000000000000016810361439057478015614322577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561430857600080fd5b505af115801561431c573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160361438e5761438581866151df565b9450505061448e565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156143d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143fb9190615214565b9050801561448b576001600160a01b038083166000908152601060205260409020600101541680156144895761447c82847f00000000000000000000000000000000000000000000000000000000000000008460106000896001600160a01b03166001600160a01b03168152602001908152602001600020600201546149d3565b61448690876151df565b95505b505b50505b8061449881615243565b915050614248565b509092915050565b60007fffffffffffffffffffffffff3ccbb78f2ad97778b4f927bb1f3c933c6038d80a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016147485760405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015614589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145ad91906151f7565b50604051639908fc8b60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015273c3344870d52688874b06d844e0c36cc39fc727f66024830152604482018490526000606483015230608483015260001960a48301527f00000000000000000000000000000000000000000000000000000000000000001690639908fc8b9060c40160408051808303816000875af115801561466b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061468f91906154ae565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015614724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135de91906151f7565b610b7282614b70565b919050565b60008260000361476857506000614801565b60006147748585614c3b565b9050670de0b6b3a7640000811161478f576000915050614801565b60006147ae61479e85876151df565b6147a886896151df565b90614c3b565b905060006147bf8b8b8b8b87614c65565b905060006147d08c8c8c8c87614c65565b90506147dc8783614cd3565b6147f0826147ea898b6151df565b90614cd3565b6147fa91906151c8565b9450505050505b979650505050505050565b60606128df8484600085614cf3565b601354614855906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911684612d18565b6013546040517f529ebc7d0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152600060248201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301527f00000000000000000000000000000000000000000000000000000000000000008116608483015260a4820185905260c482018490529091169063529ebc7d9060e401600060405180830381600087803b15801561496057600080fd5b505af1158015614974573d6000803e3d6000fd5b505050505050565b6013546040516305d38c7160e21b8152600060048201527f000000000000000000000000000000000000000000000000000000000000000060248201526001600160a01b039091169063174e31c490604401613316565b6000806149e08686613e73565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015614a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a4891906154f0565b5091509150876001600160a01b0316836001600160a01b031614614a6857905b600080614a978b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff168a613ea4565b9050896001600160a01b0316856001600160a01b031614614ab457905b614ac86001600160a01b038b16898d612d18565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0389169063022c0d9f90614b209085908590309060248101615540565b600060405180830381600087803b158015614b3a57600080fd5b505af1158015614b4e573d6000803e3d6000fd5b50505050818111614b5f5781614b61565b805b9b9a5050505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603614bcf575090565b610b72827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000614e30565b600081614c496002826152a7565b614c5b670de0b6b3a764000086615272565b612a0591906151df565b600082821015614c8057614c7982856151c8565b90506136ab565b614c796b033b2e3c9fd0803ce8000000670de0b6b3a7640000614cb88882614ca88589615272565b614cb291906152a7565b90614e40565b614cc29190615272565b614ccc91906152a7565b8790614c3b565b6000670de0b6b3a7640000614ce96002826152a7565b614c5b8486615272565b606082471015614d6b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610d01565b6001600160a01b0385163b614dc25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d01565b600080866001600160a01b03168587604051614dde9190615578565b60006040518083038185875af1925050503d8060008114614e1b576040519150601f19603f3d011682016040523d82523d6000602084013e614e20565b606091505b5091509150614801828286614eb9565b60006136ab8585858560036149d3565b6000614e4d600283615594565b600003614e66576b033b2e3c9fd0803ce8000000614e68565b825b9050614e756002836152a7565b91505b8115610b7257614e888384614ef2565b9250614e95600283615594565b15614ea757614ea48184614ef2565b90505b614eb26002836152a7565b9150614e78565b60608315614ec8575081610c70565b825115614ed85782518084602001fd5b8160405162461bcd60e51b8152600401610d019190614f64565b60006b033b2e3c9fd0803ce8000000614ce96002826152a7565b60005b83811015614f27578181015183820152602001614f0f565b83811115611df05750506000910152565b60008151808452614f50816020860160208601614f0c565b601f01601f19169290920160200192915050565b602081526000610c706020830184614f38565b6001600160a01b0381168114611e0057600080fd5b60008060408385031215614f9f57600080fd5b8235614faa81614f77565b946020939093013593505050565b600060208284031215614fca57600080fd5b5035919050565b600080600060608486031215614fe657600080fd5b8335614ff181614f77565b9250602084013561500181614f77565b929592945050506040919091013590565b6000806040838503121561502557600080fd5b823561503081614f77565b9150602083013561504081614f77565b809150509250929050565b60006020828403121561505d57600080fd5b8135610c7081614f77565b803560ff8116811461475157600080fd5b600080600080600060a0868803121561509157600080fd5b85359450602086013593506150a860408701615068565b94979396509394606081013594506080013592915050565b8015158114611e0057600080fd5b6000602082840312156150e057600080fd5b8135610c70816150c0565b600080604083850312156150fe57600080fd5b823591506020830135615040816150c0565b600080600080600080600060e0888a03121561512b57600080fd5b873561513681614f77565b9650602088013561514681614f77565b9550604088013594506060880135935061516260808901615068565b925060a0880135915060c0880135905092959891949750929550565b600181811c9082168061519257607f821691505b6020821081036135de57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156151da576151da6151b2565b500390565b600082198211156151f2576151f26151b2565b500190565b60006020828403121561520957600080fd5b8151610c70816150c0565b60006020828403121561522657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060018201615255576152556151b2565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600081600019048311821515161561528c5761528c6151b2565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826152b6576152b6615291565b500490565b600080835481600182811c9150808316806152d757607f831692505b602080841082036152f657634e487b7160e01b86526022600452602486fd5b81801561530a576001811461531b57615348565b60ff19861689528489019650615348565b60008a81526020902060005b868110156153405781548b820152908501908301615327565b505084890196505b509498975050505050505050565b60006020828403121561536857600080fd5b8151610c7081614f77565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156153ac576153ac615373565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156153db576153db615373565b604052919050565b600060208083850312156153f657600080fd5b825167ffffffffffffffff8082111561540e57600080fd5b818501915085601f83011261542257600080fd5b81518181111561543457615434615373565b615442848260051b016153b2565b818152848101925060069190911b83018401908782111561546257600080fd5b928401925b8184101561480157604084890312156154805760008081fd5b615488615389565b845161549381614f77565b81528486015186820152835260409093019291840191615467565b600080604083850312156154c157600080fd5b505080516020909101519092909150565b80516dffffffffffffffffffffffffffff8116811461475157600080fd5b60008060006060848603121561550557600080fd5b61550e846154d2565b925061551c602085016154d2565b9150604084015163ffffffff8116811461553557600080fd5b809150509250925092565b8481528360208201526001600160a01b038316604082015260806060820152600061556e6080830184614f38565b9695505050505050565b6000825161558a818460208701614f0c565b9190910192915050565b6000826155a3576155a3615291565b50069056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212205c0fe1939c7c8a967dc59e7789e9c8b0ff0595c55cb985a3dc7a5df9e52715d264736f6c634300080d00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061048d5760003560e01c80638aff733d1161026b578063b9e57b8011610150578063dd8ce4d6116100c8578063ec55688911610097578063f2fde38b1161007c578063f2fde38b14610a91578063f7c618c114610aa4578063fdb5a03e14610acb57600080fd5b8063ec55688914610a76578063ed24911d14610a8957600080fd5b8063dd8ce4d614610a2a578063e21ac82514610a3d578063e75ab04514610a50578063eab89a5a14610a6357600080fd5b8063cff1b6ef1161011f578063d505accf11610104578063d505accf146109cb578063da09c72c146109de578063dd62ed3e146109f157600080fd5b8063cff1b6ef146109a5578063d0ed26ae146109b857600080fd5b8063b9e57b8014610965578063bd079f551461096d578063c4b24a4614610976578063c89039c51461097e57600080fd5b80639f0237b1116101e3578063a9059cbb116101b2578063ac0d31ff11610197578063ac0d31ff14610932578063b52a321f14610945578063b6b55f251461095257600080fd5b8063a9059cbb1461090c578063abff19631461091f57600080fd5b80639f0237b114610871578063a4d5e67c14610884578063a5534e7114610897578063a8ae2b7c146108f957600080fd5b80638dc1564a1161023a57806395d89b411161021f57806395d89b411461082f57806399729ec1146108375780639e4e73181461084a57600080fd5b80638dc1564a146108015780639291d5631461081c57600080fd5b80638aff733d146107cb5780638b73e606146107d45780638c04166f146107e75780638da5cb5b146107f057600080fd5b8063483c2ef011610391578063715018a6116103095780637ae26773116102d85780637ecebe00116102bd5780637ecebe001461078557806381837230146107a55780638980f11f146107b857600080fd5b80637ae267731461076a5780637d8820971461077d57600080fd5b8063715018a6146107355780637579a5dd1461073d578063789139bc14610758578063790854251461076157600080fd5b80634ebb7916116103605780635eaec0e4116103455780635eaec0e4146106be578063633afd28146106e557806370a082311461070c57600080fd5b80634ebb7916146106a25780635ea682ea146106b557600080fd5b8063483c2ef0146106465780634a970be7146106695780634bebd1e71461067c5780634e77ace51461068f57600080fd5b806323b872dd1161042457806330adf81f116103f357806338d52e0f116103d857806338d52e0f146106035780633bdc6e721461062a57806340b47e1a1461063357600080fd5b806330adf81f146105c2578063313ce567146105e957600080fd5b806323b872dd14610574578063247d284b146105875780632e1a7d4d1461059a5780632f4f21e2146105af57600080fd5b8063110560351161046057806311056035146104f257806316f0115b1461050557806318160ddd1461054457806320606b701461054d57600080fd5b806306fdde031461049257806307677111146104b0578063095ea7b3146104c75780630f23475d146104ea575b600080fd5b61049a610ad3565b6040516104a79190614f64565b60405180910390f35b6104b9600d5481565b6040519081526020016104a7565b6104da6104d5366004614f8c565b610b61565b60405190151581526020016104a7565b6104b9610b78565b6104b9610500366004614fb8565b610ba3565b61052c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016104a7565b6104b960025481565b6104b97f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6104da610582366004614fd1565b610bae565b6104b9610595366004614fb8565b610c77565b6105ad6105a8366004614fb8565b610c82565b005b6105ad6105bd366004614f8c565b610da9565b6104b97f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6105f1601281565b60405160ff90911681526020016104a7565b61052c7f000000000000000000000000000000000000000000000000000000000000000081565b6104b960075481565b6105ad610641366004615012565b610db7565b6104da61065436600461504b565b60086020526000908152604090205460ff1681565b6105ad610677366004615079565b610e14565b6105ad61068a36600461504b565b610ee2565b6105ad61069d3660046150ce565b610fff565b6105ad6106b0366004614fb8565b6110a6565b6104b9600f5481565b6104b97f000000000000000000000000000000000000000000000000000000000000000081565b61052c7f000000000000000000000000000000000000000000000000000000000000000081565b6104b961071a36600461504b565b6001600160a01b031660009081526004602052604090205490565b6105ad611160565b61052c73c3344870d52688874b06d844e0c36cc39fc727f681565b6104b9600b5481565b6104b960125481565b6105ad610778366004615012565b6111f2565b6104b96112b6565b6104b961079336600461504b565b60056020526000908152604090205481565b6105ad6107b3366004614fb8565b611367565b6105ad6107c6366004614f8c565b6113f0565b6104b9600e5481565b6105ad6107e236600461504b565b6114a0565b6104b960145481565b6006546001600160a01b031661052c565b61052c7322d4002028f537599be9f666d1c4fa138522f9c881565b6105ad61082a36600461504b565b61165c565b61049a611716565b6105ad610845366004614fb8565b611723565b6104b97fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6105ad61087f36600461504b565b6117c8565b6105ad61089236600461504b565b611832565b6108d36108a536600461504b565b6010602052600090815260409020805460018201546002909201546001600160a01b03918216929091169083565b604080516001600160a01b039485168152939092166020840152908201526060016104a7565b6105ad610907366004614fb8565b611a7c565b6104da61091a366004614f8c565b611b21565b6105ad61092d366004614fb8565b611b2e565b6105ad6109403660046150eb565b611b84565b600c546104da9060ff1681565b6105ad610960366004614fb8565b611df6565b6104b9611e03565b6104b9600a5481565b6104b9611e42565b61052c7f000000000000000000000000000000000000000000000000000000000000000081565b6105ad6109b3366004614fb8565b612182565b6105ad6109c6366004614fd1565b612216565b6105ad6109d9366004615110565b612277565b60095461052c906001600160a01b031681565b6104b96109ff366004615012565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6104b9610a38366004614fb8565b61238a565b6105ad610a4b366004614fb8565b6123ca565b61052c610a5e366004614fb8565b612453565b6104b9610a71366004614fb8565b61247d565b60135461052c906001600160a01b031681565b6104b96124b7565b6105ad610a9f36600461504b565b612557565b61052c7f000000000000000000000000000000000000000000000000000000000000000081565b6105ad612677565b60008054610ae09061517e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0c9061517e565b8015610b595780601f10610b2e57610100808354040283529160200191610b59565b820191906000526020600020905b815481529060010190602001808311610b3c57829003601f168201915b505050505081565b6000610b6e3384846128e7565b5060015b92915050565b600080610b836112b6565b90506000610b90826129f5565b9050610b9c81836151c8565b9250505090565b6000610b72826129f5565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610be857506000198114155b15610c5e576000610bf985836151c8565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610c69868686612a0f565b6001925050505b9392505050565b6000610b7282612b33565b6000610c8d8261247d565b905060008111610d0a5760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5769746864726160448201527f7720616d6f756e7420746f6f206c6f770000000000000000000000000000000060648201526084015b60405180910390fd5b6000610d1582612b80565b90506000610d22836129f5565b9050610d6333610d3283856151c8565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612d18565b610d6d3385612d98565b60405183815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a250505050565b610db38282612e2c565b5050565b6009546001600160a01b03163314610e085760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610d01565b610db38282600361305c565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d505accf9060e401600060405180830381600087803b158015610eb957600080fd5b505af1158015610ecd573d6000803e3d6000fd5b50505050610edb3386612e2c565b5050505050565b6006546001600160a01b03163314610f2a5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6001600160a01b03811660009081526008602052604090205460ff1615610f935760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610d01565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610fc5916151df565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b031633146110475760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b600c5481151560ff90911615150361105e57600080fd5b600c805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b031633146110ee5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b600081116110fb57600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611128573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910161109b565b6006546001600160a01b031633146111a85760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b0316331461123a5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b60405163095ea7b360e01b81526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad91906151f7565b610db357600080fd5b6013546040517f01e1c48d0000000000000000000000000000000000000000000000000000000081526000600482018190527f000000000000000000000000000000000000000000000000000000000000000060248301529182916001600160a01b03909116906301e1c48d90604401602060405180830381865afa158015611343573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b729190615214565b6006546001600160a01b031633146113af5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b600a5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600a55565b6006546001600160a01b031633146114385760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6000811161144557600080fd5b6114596001600160a01b0383163383612d18565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2891015b60405180910390a15050565b6006546001600160a01b031633146114e85760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6000600754116115605760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610d01565b6001600160a01b03811660009081526008602052604090205460ff1615156001146115f35760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610d01565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611622906001906151c8565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6009546001600160a01b031633146116ad5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610d01565b600954604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600980546001600160a01b0319166001600160a01b0392909216919091179055565b60018054610ae09061517e565b6006546001600160a01b0316331461176b5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b612710600e548261177c91906151df565b111561178757600080fd5b600f5460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1600f55565b6006546001600160a01b031633146118105760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b031633146118835760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610d01565b6001600160a01b038116600090815260106020526040812080546001600160a01b031990811682556001820180549091169055600201819055805b60115481101561198a57601181815481106118db576118db61522d565b6000918252602090912001546001600160a01b039081169084160361197857601180546001935061190d9084906151c8565b8154811061191d5761191d61522d565b600091825260209091200154601180546001600160a01b0390921691839081106119495761194961522d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b8061198281615243565b9150506118be565b50806119fe5760405162461bcd60e51b815260206004820152603460248201527f5661726961626c655265776172647353747261746567793a3a5265776172642060448201527f746f2064656c657465206e6f7420666f756e64210000000000000000000000006064820152608401610d01565b6011805480611a0f57611a0f61525c565b600082815260209020810160001990810180546001600160a01b0319169055019055601254611a40906001906151c8565b6012556040516001600160a01b03831681527f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc90602001611494565b6006546001600160a01b03163314611ac45760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b612710600f5482611ad591906151df565b1115611ae057600080fd5b600e5460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1600e55565b6000610b6e338484612a0f565b6009546001600160a01b03163314611b7f5760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610d01565b601455565b6006546001600160a01b03163314611bcc5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c579190615214565b9050611c61613232565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190615214565b905083611cf983836151c8565b1015611d935760405162461bcd60e51b815260206004820152604d60248201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60448201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60648201527f74206e6f74207265616368656400000000000000000000000000000000000000608482015260a401610d01565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611dbc6112b6565b6002546040805192835260208301919091520160405180910390a1600c5460ff161515600103611df057611df06000610fff565b50505050565b611e003382612e2c565b50565b600080611e0e611e42565b9050600a548110611e3a57612710600e5482611e2a9190615272565b611e3491906152a7565b91505090565b600091505090565b600080611e4d613344565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edb9190615214565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603611f4357611f4047826151df565b90505b60005b825181101561217b576000838281518110611f6357611f6361522d565b60200260200101516000015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031603611fda57838281518110611fbc57611fbc61522d565b60200260200101516020015183611fd391906151df565b9250612168565b6001600160a01b03811615612168576040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120549190615214565b9050600085848151811061206a5761206a61522d565b6020026020010151602001518261208191906151df565b905060006010600088878151811061209b5761209b61522d565b602090810291909101810151516001600160a01b039081168352908201929092526040016000206001015416905081158015906120e057506001600160a01b03811615155b156121645761215782857f000000000000000000000000000000000000000000000000000000000000000084601060008d8c815181106121225761212261522d565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600201546135e4565b61216190876151df565b95505b5050505b508061217381615243565b915050611f46565b5092915050565b6006546001600160a01b031633146121ca5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b80156121d557600080fd5b600d5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600d55565b6009546001600160a01b031633146122675760405162461bcd60e51b81526020600482015260146024820152732cb0b5a9ba3930ba32b3bc9d1d37b7363ca232bb60611b6044820152606401610d01565b61227283838361305c565b505050565b428410156122c75760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610d01565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a91908661231483615243565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905061237588828686866136b4565b6123808888886128e7565b5050505050505050565b6000600254600014806123a257506123a06112b6565b155b156123ab575090565b6123b36112b6565b6002546123c09084615272565b610b7291906152a7565b6006546001600160a01b031633146124125760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b600b5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600b55565b6011818154811061246357600080fd5b6000918252602090912001546001600160a01b0316905081565b60006002546000148061249557506124936112b6565b155b156124a257506000919050565b6002546124ad6112b6565b6123c09084615272565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b60006040516124ec91906152bb565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b0316331461259f5760405162461bcd60e51b815260206004820181905260248201526000805160206155a98339815191526044820152606401610d01565b6001600160a01b03811661261b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610d01565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146126c65760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610d01565b6126d06000613814565b565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127369190615356565b6001600160a01b0316836001600160a01b031614806127c75750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561278e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b29190615356565b6001600160a01b0316836001600160a01b0316145b80156128c15750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561280c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128309190615356565b6001600160a01b0316826001600160a01b031614806128c15750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ac9190615356565b6001600160a01b0316826001600160a01b0316145b80156128df5750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b03831661293d5760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610d01565b6001600160a01b0382166129935760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610d01565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080612710612a058285615272565b610c7091906152a7565b6001600160a01b038216612a8b5760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610d01565b6001600160a01b038316600090815260046020526040902054612aaf9082906151c8565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612adf9082906151df565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906129e89085815260200190565b6000610b727f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846139e1565b6013546040516305d38c7160e21b81526000600482018190527f00000000000000000000000000000000000000000000000000000000000000006024830152916001600160a01b03169063174e31c490604401600060405180830381600087803b158015612bed57600080fd5b505af1158015612c01573d6000803e3d6000fd5b50506013546014546040517fa530882e0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152600060248201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301527f00000000000000000000000000000000000000000000000000000000000000008116608483015260a482019290925260c481018790529116925063a530882e915060e4016020604051808303816000875af1158015611343573d6000803e3d6000fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052612272908490613c38565b6001600160a01b038216600090815260046020526040902054612dbc9082906151c8565b6001600160a01b038316600090815260046020526040902055600254612de39082906151c8565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600c5460ff161515600114612ea95760405162461bcd60e51b815260206004820152602a60248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f732064697361626c6564000000000000000000000000000000000000000000006064820152608401610d01565b600b548015612ed2576000612ebc611e42565b905081811115612ed057612ed06001613814565b505b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015612f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8291906151f7565b612ff45760405162461bcd60e51b815260206004820152603660248201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460448201527f20746f6b656e207472616e73666572206661696c6564000000000000000000006064820152608401610d01565b6000612fff83612b33565b905061301784613012610a3884876151c8565b613d1d565b6130218382613df3565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610d9b91815260200190565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614613134576130c082847f00000000000000000000000000000000000000000000000000000000000000006126d2565b613134576040805162461bcd60e51b81526020600482015260248101919091527f5661726961626c655265776172647353747261746567793a3a5377617020706160448201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e6064820152608401610d01565b604080516060810182526001600160a01b03808616808352858216602080850191825284860187815260008481526010909252958120945185549085166001600160a01b03199182161786559151600180870180549290961691841691909117909455945160029094019390935560118054808401825594527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68909301805490921690921790556012546131e7916151df565b601255604080516001600160a01b038086168252841660208201527f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80910160405180910390a1505050565b6013546040517f02eb6f7e0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152600060248201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301527f000000000000000000000000000000000000000000000000000000000000000081166084830152909116906302eb6f7e9060a4015b600060405180830381600087803b15801561333057600080fd5b505af1158015611df0573d6000803e3d6000fd5b6013546040517f7dcb2abf0000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526060916000916001600160a01b0390911690637dcb2abf90602401600060405180830381865afa1580156133cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133f391908101906153e3565b905060005b81518110156135de5773c3344870d52688874b06d844e0c36cc39fc727f66001600160a01b03168282815181106134315761343161522d565b6020026020010151600001516001600160a01b0316036135cc577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166343c2e2f573c3344870d52688874b06d844e0c36cc39fc727f67f00000000000000000000000000000000000000000000000000000000000000008585815181106134c2576134c261522d565b60209081029190910181015101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016040805180830381865afa158015613539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061355d91906154ae565b508282815181106135705761357061522d565b602002602001015160200181815250507f00000000000000000000000000000000000000000000000000000000000000008282815181106135b3576135b361522d565b60209081029190910101516001600160a01b0390911690525b806135d681615243565b9150506133f8565b50919050565b6000806135f18686613e73565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613635573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061365991906154f0565b5091509150876001600160a01b0316836001600160a01b03161461367957905b6136a589836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff1688613ea4565b93505050505b95945050505050565b60006136be6124b7565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015613764573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061379a5750866001600160a01b0316816001600160a01b0316145b61380b5760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610d01565b50505050505050565b61381c613efe565b60006138266141b2565b9050816138a557600a548110156138a55760405162461bcd60e51b815260206004820152603060248201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360448201527f7420616d6f756e7420746f6f206c6f77000000000000000000000000000000006064820152608401610d01565b6000612710600f54836138b89190615272565b6138c291906152a7565b9050801561390457600954613904906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683612d18565b6000612710600e54846139179190615272565b61392191906152a7565b9050801561395d5761395d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612d18565b600061397c8261396d85876151c8565b61397791906151c8565b6144a8565b9050600061398982612b33565b90506139958282613df3565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346139be6112b6565b6002546040805192835260208301919091520160405180910390a1505050505050565b60006128df846001600160a01b03166355af008a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a489190615214565b856001600160a01b0316637727c6556040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aaa9190615214565b866001600160a01b031663a76f54d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0c9190615214565b876001600160a01b0316637a1c36d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6e9190615214565b876001600160a01b031663961be3916040518163ffffffff1660e01b8152600401602060405180830381865afa158015613bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd09190615214565b886001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c329190615214565b88614756565b6000613c8d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661480c9092919063ffffffff16565b8051909150156122725780806020019051810190613cab91906151f7565b6122725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610d01565b60008111613d6d5760405162461bcd60e51b815260206004820152601260248201527f5f6d696e743a3a7a65726f2073686172657300000000000000000000000000006044820152606401610d01565b80600254613d7b91906151df565b6002556001600160a01b038216600090815260046020526040902054613da29082906151df565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612e209085815260200190565b60008211613e695760405162461bcd60e51b815260206004820152602d60248201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160448201527f6d6f756e7420746f6f206c6f77000000000000000000000000000000000000006064820152608401610d01565b610db3828261481b565b600080826001600160a01b0316846001600160a01b031610613e96578284613e99565b83835b915091509250929050565b600080613eb3836103e86151c8565b613ebd9087615272565b90506000613ecb8583615272565b9050600082613edc886103e8615272565b613ee691906151df565b9050613ef281836152a7565b98975050505050505050565b613f0661497c565b6040516370a0823160e01b815230600482015260009073c3344870d52688874b06d844e0c36cc39fc727f6906370a0823190602401602060405180830381865afa158015613f58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f7c9190615214565b90508015611e005760405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810182905273c3344870d52688874b06d844e0c36cc39fc727f69063095ea7b3906044016020604051808303816000875af1158015614005573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402991906151f7565b50604051639908fc8b60e01b815273c3344870d52688874b06d844e0c36cc39fc727f660048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018390526000606483015230608483015260001960a48301527f00000000000000000000000000000000000000000000000000000000000000001690639908fc8b9060c40160408051808303816000875af11580156140e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061410b91906154ae565b505060405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000602482015273c3344870d52688874b06d844e0c36cc39fc727f69063095ea7b3906044016020604051808303816000875af115801561418e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db391906151f7565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561421b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061423f9190615214565b60115490915060005b818110156144a0576000601182815481106142655761426561522d565b6000918252602090912001546001600160a01b0390811691507f000000000000000000000000000000000000000000000000000000000000000016810361439057478015614322577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561430857600080fd5b505af115801561431c573d6000803e3d6000fd5b50505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160361438e5761438581866151df565b9450505061448e565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156143d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143fb9190615214565b9050801561448b576001600160a01b038083166000908152601060205260409020600101541680156144895761447c82847f00000000000000000000000000000000000000000000000000000000000000008460106000896001600160a01b03166001600160a01b03168152602001908152602001600020600201546149d3565b61448690876151df565b95505b505b50505b8061449881615243565b915050614248565b509092915050565b60007fffffffffffffffffffffffff3ccbb78f2ad97778b4f927bb1f3c933c6038d80a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016147485760405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015614589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145ad91906151f7565b50604051639908fc8b60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015273c3344870d52688874b06d844e0c36cc39fc727f66024830152604482018490526000606483015230608483015260001960a48301527f00000000000000000000000000000000000000000000000000000000000000001690639908fc8b9060c40160408051808303816000875af115801561466b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061468f91906154ae565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600060248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015614724573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135de91906151f7565b610b7282614b70565b919050565b60008260000361476857506000614801565b60006147748585614c3b565b9050670de0b6b3a7640000811161478f576000915050614801565b60006147ae61479e85876151df565b6147a886896151df565b90614c3b565b905060006147bf8b8b8b8b87614c65565b905060006147d08c8c8c8c87614c65565b90506147dc8783614cd3565b6147f0826147ea898b6151df565b90614cd3565b6147fa91906151c8565b9450505050505b979650505050505050565b60606128df8484600085614cf3565b601354614855906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911684612d18565b6013546040517f529ebc7d0000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152600060248201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301527f00000000000000000000000000000000000000000000000000000000000000008116608483015260a4820185905260c482018490529091169063529ebc7d9060e401600060405180830381600087803b15801561496057600080fd5b505af1158015614974573d6000803e3d6000fd5b505050505050565b6013546040516305d38c7160e21b8152600060048201527f000000000000000000000000000000000000000000000000000000000000000060248201526001600160a01b039091169063174e31c490604401613316565b6000806149e08686613e73565b509050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015614a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a4891906154f0565b5091509150876001600160a01b0316836001600160a01b031614614a6857905b600080614a978b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff168a613ea4565b9050896001600160a01b0316856001600160a01b031614614ab457905b614ac86001600160a01b038b16898d612d18565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0389169063022c0d9f90614b209085908590309060248101615540565b600060405180830381600087803b158015614b3a57600080fd5b505af1158015614b4e573d6000803e3d6000fd5b50505050818111614b5f5781614b61565b805b9b9a5050505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031603614bcf575090565b610b72827f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000614e30565b600081614c496002826152a7565b614c5b670de0b6b3a764000086615272565b612a0591906151df565b600082821015614c8057614c7982856151c8565b90506136ab565b614c796b033b2e3c9fd0803ce8000000670de0b6b3a7640000614cb88882614ca88589615272565b614cb291906152a7565b90614e40565b614cc29190615272565b614ccc91906152a7565b8790614c3b565b6000670de0b6b3a7640000614ce96002826152a7565b614c5b8486615272565b606082471015614d6b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610d01565b6001600160a01b0385163b614dc25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d01565b600080866001600160a01b03168587604051614dde9190615578565b60006040518083038185875af1925050503d8060008114614e1b576040519150601f19603f3d011682016040523d82523d6000602084013e614e20565b606091505b5091509150614801828286614eb9565b60006136ab8585858560036149d3565b6000614e4d600283615594565b600003614e66576b033b2e3c9fd0803ce8000000614e68565b825b9050614e756002836152a7565b91505b8115610b7257614e888384614ef2565b9250614e95600283615594565b15614ea757614ea48184614ef2565b90505b614eb26002836152a7565b9150614e78565b60608315614ec8575081610c70565b825115614ed85782518084602001fd5b8160405162461bcd60e51b8152600401610d019190614f64565b60006b033b2e3c9fd0803ce8000000614ce96002826152a7565b60005b83811015614f27578181015183820152602001614f0f565b83811115611df05750506000910152565b60008151808452614f50816020860160208601614f0c565b601f01601f19169290920160200192915050565b602081526000610c706020830184614f38565b6001600160a01b0381168114611e0057600080fd5b60008060408385031215614f9f57600080fd5b8235614faa81614f77565b946020939093013593505050565b600060208284031215614fca57600080fd5b5035919050565b600080600060608486031215614fe657600080fd5b8335614ff181614f77565b9250602084013561500181614f77565b929592945050506040919091013590565b6000806040838503121561502557600080fd5b823561503081614f77565b9150602083013561504081614f77565b809150509250929050565b60006020828403121561505d57600080fd5b8135610c7081614f77565b803560ff8116811461475157600080fd5b600080600080600060a0868803121561509157600080fd5b85359450602086013593506150a860408701615068565b94979396509394606081013594506080013592915050565b8015158114611e0057600080fd5b6000602082840312156150e057600080fd5b8135610c70816150c0565b600080604083850312156150fe57600080fd5b823591506020830135615040816150c0565b600080600080600080600060e0888a03121561512b57600080fd5b873561513681614f77565b9650602088013561514681614f77565b9550604088013594506060880135935061516260808901615068565b925060a0880135915060c0880135905092959891949750929550565b600181811c9082168061519257607f821691505b6020821081036135de57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156151da576151da6151b2565b500390565b600082198211156151f2576151f26151b2565b500190565b60006020828403121561520957600080fd5b8151610c70816150c0565b60006020828403121561522657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060018201615255576152556151b2565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600081600019048311821515161561528c5761528c6151b2565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826152b6576152b6615291565b500490565b600080835481600182811c9150808316806152d757607f831692505b602080841082036152f657634e487b7160e01b86526022600452602486fd5b81801561530a576001811461531b57615348565b60ff19861689528489019650615348565b60008a81526020902060005b868110156153405781548b820152908501908301615327565b505084890196505b509498975050505050505050565b60006020828403121561536857600080fd5b8151610c7081614f77565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156153ac576153ac615373565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156153db576153db615373565b604052919050565b600060208083850312156153f657600080fd5b825167ffffffffffffffff8082111561540e57600080fd5b818501915085601f83011261542257600080fd5b81518181111561543457615434615373565b615442848260051b016153b2565b818152848101925060069190911b83018401908782111561546257600080fd5b928401925b8184101561480157604084890312156154805760008081fd5b615488615389565b845161549381614f77565b81528486015186820152835260409093019291840191615467565b600080604083850312156154c157600080fd5b505080516020909101519092909150565b80516dffffffffffffffffffffffffffff8116811461475157600080fd5b60008060006060848603121561550557600080fd5b61550e846154d2565b925061551c602085016154d2565b9150604084015163ffffffff8116811461553557600080fd5b809150509250925092565b8481528360208201526001600160a01b038316604082015260806060820152600061556e6080830184614f38565b9695505050505050565b6000825161558a818460208701614f0c565b9190910192915050565b6000826155a3576155a3615291565b50069056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212205c0fe1939c7c8a967dc59e7789e9c8b0ff0595c55cb985a3dc7a5df9e52715d264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of tokens to deposit",
          "_deadline": "The time at which to expire the signature",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens after withdraw fee"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Deprecated; Kept for compatibility",
        "params": {
          "newValue": "fee in BIPS; required to be 0"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxSwapSlippage(uint256)": {
        "details": "Function name matches interface for FeeCollector"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens available to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance after withdraw fee"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxSwapSlippage(uint256)": {
        "notice": "Update max slippage for withdrawal"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 552,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 555,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 560,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 566,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 570,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 586,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8054,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8163,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8167,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1967,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "devAddr",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1969,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1971,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1973,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 1975,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1977,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1979,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 11918,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "rewardSwapPairs",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(RewardSwapPair)11913_storage)"
      },
      {
        "astId": 11921,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "supportedRewards",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11923,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "rewardCount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 41026,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "proxy",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IPlatypusVoterProxy)44660"
      },
      {
        "astId": 41030,
        "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
        "label": "maxSlippage",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPlatypusVoterProxy)44660": {
        "encoding": "inplace",
        "label": "contract IPlatypusVoterProxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(RewardSwapPair)11913_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VariableRewardsStrategy.RewardSwapPair)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardSwapPair)11913_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RewardSwapPair)11913_storage": {
        "encoding": "inplace",
        "label": "struct VariableRewardsStrategy.RewardSwapPair",
        "members": [
          {
            "astId": 11908,
            "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
            "label": "reward",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11910,
            "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
            "label": "swapPair",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11912,
            "contract": "contracts/strategies/avalanche/platypus/AnkrAvaxPlatypusStrategy.sol:AnkrAvaxPlatypusStrategy",
            "label": "swapFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}